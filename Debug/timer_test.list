
timer_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af2c  0800af2c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800af2c  0800af2c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af2c  0800af2c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af30  0800af30  0001af30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800af34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  200001e4  0800b118  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800b118  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c27  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351e  00000000  00000000  00033e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00037358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00038410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b828  00000000  00000000  00039368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144fa  00000000  00000000  00054b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f19f  00000000  00000000  0006908a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  000f8229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  000f82e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000c79  00000000  00000000  000fcbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a5f0 	.word	0x0800a5f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800a5f0 	.word	0x0800a5f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


  set_led_rate(LED_FREQ, LED_DUTY);
 800066a:	2114      	movs	r1, #20
 800066c:	2003      	movs	r0, #3
 800066e:	f000 fb0d 	bl	8000c8c <set_led_rate>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	483c      	ldr	r0, [pc, #240]	; (800076c <main+0x108>)
 800067a:	f001 f954 	bl	8001926 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fe47 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f87f 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f9ed 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM1_Init();
 800068a:	f000 f8d5 	bl	8000838 <MX_TIM1_Init>
  MX_TIM3_Init();
 800068e:	f000 f973 	bl	8000978 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000692:	f008 fdc3 	bl	800921c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  spwm.psc = htim1.Init.Prescaler;
 8000696:	4b36      	ldr	r3, [pc, #216]	; (8000770 <main+0x10c>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a36      	ldr	r2, [pc, #216]	; (8000774 <main+0x110>)
 800069c:	6093      	str	r3, [r2, #8]
  spwm.ccr1 = htim1.Instance->CCR1;
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <main+0x10c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a4:	4a33      	ldr	r2, [pc, #204]	; (8000774 <main+0x110>)
 80006a6:	60d3      	str	r3, [r2, #12]
  HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	482f      	ldr	r0, [pc, #188]	; (800076c <main+0x108>)
 80006b0:	f001 f939 	bl	8001926 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2019      	movs	r0, #25
 80006ba:	f000 ff62 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006be:	2019      	movs	r0, #25
 80006c0:	f000 ff7b 	bl	80015ba <HAL_NVIC_EnableIRQ>



  // Prepare accel steps
  uint32_t psc = spwm.psc;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <main+0x110>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	607b      	str	r3, [r7, #4]
  for (uint32_t i = 0; i < ACCEL_STEPS ; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	e00d      	b.n	80006ec <main+0x88>
  {
    psc = (psc * ACCEL_K) >> 8;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	22dc      	movs	r2, #220	; 0xdc
 80006d4:	fb02 f303 	mul.w	r3, r2, r3
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	607b      	str	r3, [r7, #4]
    a_psc[i] = psc;
 80006dc:	4926      	ldr	r1, [pc, #152]	; (8000778 <main+0x114>)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uint32_t i = 0; i < ACCEL_STEPS ; i++)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b09      	cmp	r3, #9
 80006f0:	d9ee      	bls.n	80006d0 <main+0x6c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  static uint32_t bg_tick;
  bg_tick = HAL_GetTick() + BGLOOP_RATE;
 80006f2:	f000 fe65 	bl	80013c0 <HAL_GetTick>
 80006f6:	4603      	mov	r3, r0
 80006f8:	3314      	adds	r3, #20
 80006fa:	4a20      	ldr	r2, [pc, #128]	; (800077c <main+0x118>)
 80006fc:	6013      	str	r3, [r2, #0]
  while (1)
  {
    if (HAL_GetTick() >= bg_tick)
 80006fe:	f000 fe5f 	bl	80013c0 <HAL_GetTick>
 8000702:	4602      	mov	r2, r0
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0x118>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d306      	bcc.n	800071a <main+0xb6>
    {
      bg_tick += BGLOOP_RATE;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <main+0x118>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3314      	adds	r3, #20
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <main+0x118>)
 8000714:	6013      	str	r3, [r2, #0]
      bg_proc();
 8000716:	f000 faf1 	bl	8000cfc <bg_proc>
    }

    if (HAL_GetTick() >= sled.next_change)
 800071a:	f000 fe51 	bl	80013c0 <HAL_GetTick>
 800071e:	4602      	mov	r2, r0
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <main+0x11c>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	429a      	cmp	r2, r3
 8000726:	d3ea      	bcc.n	80006fe <main+0x9a>
    {
      if (sled.state == GPIO_PIN_SET)
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <main+0x11c>)
 800072a:	7b1b      	ldrb	r3, [r3, #12]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d10a      	bne.n	8000746 <main+0xe2>
      {
        sled.state = GPIO_PIN_RESET;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <main+0x11c>)
 8000732:	2200      	movs	r2, #0
 8000734:	731a      	strb	r2, [r3, #12]
        sled.next_change += sled.on_ticks;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <main+0x11c>)
 8000738:	689a      	ldr	r2, [r3, #8]
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <main+0x11c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <main+0x11c>)
 8000742:	6093      	str	r3, [r2, #8]
 8000744:	e009      	b.n	800075a <main+0xf6>
      }
      else
      {
        sled.state = GPIO_PIN_SET;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <main+0x11c>)
 8000748:	2201      	movs	r2, #1
 800074a:	731a      	strb	r2, [r3, #12]
        sled.next_change += sled.off_ticks;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <main+0x11c>)
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <main+0x11c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4413      	add	r3, r2
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <main+0x11c>)
 8000758:	6093      	str	r3, [r2, #8]
      }
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, sled.state);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <main+0x11c>)
 800075c:	7b1b      	ldrb	r3, [r3, #12]
 800075e:	461a      	mov	r2, r3
 8000760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000764:	4801      	ldr	r0, [pc, #4]	; (800076c <main+0x108>)
 8000766:	f001 f8de 	bl	8001926 <HAL_GPIO_WritePin>
    if (HAL_GetTick() >= bg_tick)
 800076a:	e7c8      	b.n	80006fe <main+0x9a>
 800076c:	40011000 	.word	0x40011000
 8000770:	20000200 	.word	0x20000200
 8000774:	200002a0 	.word	0x200002a0
 8000778:	200002b0 	.word	0x200002b0
 800077c:	200002d8 	.word	0x200002d8
 8000780:	20000290 	.word	0x20000290

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	2228      	movs	r2, #40	; 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 faaa 	bl	8009cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fd7e 	bl	80032dc <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007e6:	f000 fb21 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f002 ffea 	bl	80037e0 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000812:	f000 fb0b 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000816:	2310      	movs	r3, #16
 8000818:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f003 f943 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800082c:	f000 fafe 	bl	8000e2c <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	; 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b096      	sub	sp, #88	; 0x58
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2220      	movs	r2, #32
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f009 fa3b 	bl	8009cec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_TIM1_Init+0x138>)
 8000878:	4a3e      	ldr	r2, [pc, #248]	; (8000974 <MX_TIM1_Init+0x13c>)
 800087a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800087c:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <MX_TIM1_Init+0x138>)
 800087e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000882:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <MX_TIM1_Init+0x138>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800088a:	4b39      	ldr	r3, [pc, #228]	; (8000970 <MX_TIM1_Init+0x138>)
 800088c:	2209      	movs	r2, #9
 800088e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b37      	ldr	r3, [pc, #220]	; (8000970 <MX_TIM1_Init+0x138>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <MX_TIM1_Init+0x138>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <MX_TIM1_Init+0x138>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a2:	4833      	ldr	r0, [pc, #204]	; (8000970 <MX_TIM1_Init+0x138>)
 80008a4:	f003 f9b8 	bl	8003c18 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008ae:	f000 fabd 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008bc:	4619      	mov	r1, r3
 80008be:	482c      	ldr	r0, [pc, #176]	; (8000970 <MX_TIM1_Init+0x138>)
 80008c0:	f003 fe5a 	bl	8004578 <HAL_TIM_ConfigClockSource>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008ca:	f000 faaf 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ce:	4828      	ldr	r0, [pc, #160]	; (8000970 <MX_TIM1_Init+0x138>)
 80008d0:	f003 fa49 	bl	8003d66 <HAL_TIM_PWM_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008da:	f000 faa7 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80008de:	2330      	movs	r3, #48	; 0x30
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ea:	4619      	mov	r1, r3
 80008ec:	4820      	ldr	r0, [pc, #128]	; (8000970 <MX_TIM1_Init+0x138>)
 80008ee:	f004 fa97 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008f8:	f000 fa98 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5;
 8000900:	2305      	movs	r3, #5
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_TIM1_Init+0x138>)
 8000922:	f003 fd6b 	bl	80043fc <HAL_TIM_PWM_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800092c:	f000 fa7e 	bl	8000e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM1_Init+0x138>)
 8000954:	f004 fac2 	bl	8004edc <HAL_TIMEx_ConfigBreakDeadTime>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800095e:	f000 fa65 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM1_Init+0x138>)
 8000964:	f000 fbf8 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3758      	adds	r7, #88	; 0x58
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000200 	.word	0x20000200
 8000974:	40012c00 	.word	0x40012c00

08000978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009ac:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MX_TIM3_Init+0xe8>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d0:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009d2:	f003 f921 	bl	8003c18 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009dc:	f000 fa26 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009e0:	481e      	ldr	r0, [pc, #120]	; (8000a5c <MX_TIM3_Init+0xe4>)
 80009e2:	f003 f968 	bl	8003cb6 <HAL_TIM_OC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80009ec:	f000 fa1e 	bl	8000e2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80009f0:	2307      	movs	r3, #7
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_TIM3_Init+0xe4>)
 8000a00:	f003 fe7e 	bl	8004700 <HAL_TIM_SlaveConfigSynchro>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a0a:	f000 fa0f 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480f      	ldr	r0, [pc, #60]	; (8000a5c <MX_TIM3_Init+0xe4>)
 8000a1e:	f004 f9ff 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a28:	f000 fa00 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000a30:	230a      	movs	r3, #10
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_TIM3_Init+0xe4>)
 8000a44:	f003 fc82 	bl	800434c <HAL_TIM_OC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a4e:	f000 f9ed 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3738      	adds	r7, #56	; 0x38
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000248 	.word	0x20000248
 8000a60:	40000400 	.word	0x40000400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_GPIO_Init+0xc0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, pin_debug_Pin|USB_DISC_Pin|LED_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_GPIO_Init+0xc4>)
 8000ae0:	f000 ff21 	bl	8001926 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pin_debug_Pin USB_DISC_Pin LED_Pin */
  GPIO_InitStruct.Pin = pin_debug_Pin|USB_DISC_Pin|LED_Pin;
 8000ae4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <MX_GPIO_Init+0xc4>)
 8000afe:	f000 fd77 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000b02:	2301      	movs	r3, #1
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0xc8>)
 8000b16:	f000 fd6b 	bl	80015f0 <HAL_GPIO_Init>

}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40010800 	.word	0x40010800

08000b30 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  // TODO: Don't use the HAL as it combines the **individual** timer IRQs into
  // unified callback, as a result I have to check the timer instance
  if (htim->Instance == TIM3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d13e      	bne.n	8000bc0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
  {
//    __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
    htim1.Instance->CCER &= ~TIM_CCER_CC1E;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6a1a      	ldr	r2, [r3, #32]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 0201 	bic.w	r2, r2, #1
 8000b50:	621a      	str	r2, [r3, #32]
    htim1.Instance->CR1 &= ~(TIM_CR1_CEN);
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
    htim3.Instance->CNT = 0;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
    htim1.Instance->CNT = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
    htim1.Instance->CCR1 = spwm.ccr1;
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000b78:	68d2      	ldr	r2, [r2, #12]
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
    htim1.Instance->PSC = spwm.psc;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000b82:	6892      	ldr	r2, [r2, #8]
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
    htim1.Instance->EGR |= TIM_EGR_UG;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	695a      	ldr	r2, [r3, #20]
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f042 0201 	orr.w	r2, r2, #1
 8000b94:	615a      	str	r2, [r3, #20]
    set_led_rate(LED_FREQ*2, 50);
 8000b96:	2132      	movs	r1, #50	; 0x32
 8000b98:	2006      	movs	r0, #6
 8000b9a:	f000 f877 	bl	8000c8c <set_led_rate>
    HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000ba6:	f000 febe 	bl	8001926 <HAL_GPIO_WritePin>
    spwm.running = false;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
    htim1.Init.Prescaler = spwm.psc;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000bb6:	6053      	str	r3, [r2, #4]
    HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000bbc:	f003 fa14 	bl	8003fe8 <HAL_TIM_PWM_Stop_IT>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	20000200 	.word	0x20000200
 8000bd0:	20000248 	.word	0x20000248
 8000bd4:	200002a0 	.word	0x200002a0
 8000bd8:	40011000 	.word	0x40011000

08000bdc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  static uint32_t ticks_prev = ULONG_MAX;
  static uint32_t steps = 0;
  static uint8_t buff[30];
  // See comment in OC delay callback
  if (htim->Instance == TIM1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a20      	ldr	r2, [pc, #128]	; (8000c6c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d13a      	bne.n	8000c64 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
  {
    //HAL_GPIO_TogglePin(pin_debug_GPIO_Port, pin_debug_Pin);
    uint32_t ticks = motion_step();
 8000bee:	f000 f983 	bl	8000ef8 <motion_step>
 8000bf2:	60f8      	str	r0, [r7, #12]
    if (ticks == 0)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d124      	bne.n	8000c44 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
    {
      ticks_prev = ULONG_MAX;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c00:	601a      	str	r2, [r3, #0]
      // Stop timer
      HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000c06:	f003 f9ef 	bl	8003fe8 <HAL_TIM_PWM_Stop_IT>
      spwm.running = false;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	4819      	ldr	r0, [pc, #100]	; (8000c7c <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000c18:	f000 fe85 	bl	8001926 <HAL_GPIO_WritePin>

      sprintf((void*)buff, "ISR count %lu\r\n", steps);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4918      	ldr	r1, [pc, #96]	; (8000c84 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000c26:	f009 f955 	bl	8009ed4 <siprintf>
      (void)CDC_Transmit_FS(buff, strlen((void*)buff));
 8000c2a:	4817      	ldr	r0, [pc, #92]	; (8000c88 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000c2c:	f7ff fa8e 	bl	800014c <strlen>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4619      	mov	r1, r3
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000c38:	f008 fbae 	bl	8009398 <CDC_Transmit_FS>
      steps = 0;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
        schedule_pulse(ticks);
        ticks_prev = ticks;
      }
    }
  }
}
 8000c42:	e00f      	b.n	8000c64 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
      steps++;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000c4c:	6013      	str	r3, [r2, #0]
      if (ticks != ticks_prev)
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d005      	beq.n	8000c64 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
        schedule_pulse(ticks);
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f8bd 	bl	8000dd8 <schedule_pulse>
        ticks_prev = ticks;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40012c00 	.word	0x40012c00
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000200 	.word	0x20000200
 8000c78:	200002a0 	.word	0x200002a0
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	200002dc 	.word	0x200002dc
 8000c84:	0800a608 	.word	0x0800a608
 8000c88:	200002e0 	.word	0x200002e0

08000c8c <set_led_rate>:

static void set_led_rate(uint32_t freq, uint32_t dr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t period_ticks = uwTickFreq * 1000U / freq;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <set_led_rate+0x64>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca0:	fb03 f202 	mul.w	r2, r3, r2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	60fb      	str	r3, [r7, #12]
  sled.on_ticks = (period_ticks * dr) / 100;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <set_led_rate+0x68>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <set_led_rate+0x6c>)
 8000cbe:	6013      	str	r3, [r2, #0]
  sled.off_ticks = (period_ticks * (100 - dr) / 100);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	fb02 f303 	mul.w	r3, r2, r3
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <set_led_rate+0x68>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <set_led_rate+0x6c>)
 8000cd6:	6053      	str	r3, [r2, #4]
  sled.next_change = HAL_GetTick() + sled.off_ticks;
 8000cd8:	f000 fb72 	bl	80013c0 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <set_led_rate+0x6c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <set_led_rate+0x6c>)
 8000ce6:	6093      	str	r3, [r2, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000000c 	.word	0x2000000c
 8000cf4:	51eb851f 	.word	0x51eb851f
 8000cf8:	20000290 	.word	0x20000290

08000cfc <bg_proc>:

static void bg_proc(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  // Check for button press
  static GPIO_PinState btn_prev = GPIO_PIN_RESET;
  static uint8_t buff[30];
  GPIO_PinState btn_state = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000d02:	2101      	movs	r1, #1
 8000d04:	482c      	ldr	r0, [pc, #176]	; (8000db8 <bg_proc+0xbc>)
 8000d06:	f000 fdf7 	bl	80018f8 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71bb      	strb	r3, [r7, #6]
  bool btn_press = false;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if (btn_state != btn_prev)
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <bg_proc+0xc0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	79ba      	ldrb	r2, [r7, #6]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d008      	beq.n	8000d2e <bg_proc+0x32>
  {
    if (btn_prev == GPIO_PIN_RESET)
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <bg_proc+0xc0>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <bg_proc+0x2c>
    {
      btn_press = true;
 8000d24:	2301      	movs	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
    }
    btn_prev = btn_state;
 8000d28:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <bg_proc+0xc0>)
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	7013      	strb	r3, [r2, #0]
  }

  if (!spwm.running)
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <bg_proc+0xc4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f083 0301 	eor.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d038      	beq.n	8000db0 <bg_proc+0xb4>
  {
    if (btn_press)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d035      	beq.n	8000db0 <bg_proc+0xb4>
    {
      sprintf((void*)buff, "Starting pulses\r\n");
 8000d44:	491f      	ldr	r1, [pc, #124]	; (8000dc4 <bg_proc+0xc8>)
 8000d46:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <bg_proc+0xcc>)
 8000d48:	f009 f8c4 	bl	8009ed4 <siprintf>
      (void)CDC_Transmit_FS(buff, strlen((void*)buff));
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <bg_proc+0xcc>)
 8000d4e:	f7ff f9fd 	bl	800014c <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <bg_proc+0xcc>)
 8000d5a:	f008 fb1d 	bl	8009398 <CDC_Transmit_FS>
      htim3.Instance->CNT = 0;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <bg_proc+0xd0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
      uint32_t ticks = motion_start_fp(210, 2000, 500);
 8000d66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000d6e:	20d2      	movs	r0, #210	; 0xd2
 8000d70:	f000 f862 	bl	8000e38 <motion_start_fp>
 8000d74:	6038      	str	r0, [r7, #0]
      schedule_pulse(ticks);
 8000d76:	6838      	ldr	r0, [r7, #0]
 8000d78:	f000 f82e 	bl	8000dd8 <schedule_pulse>
      htim1.Instance->EGR |= TIM_EGR_UG;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <bg_proc+0xd4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <bg_proc+0xd4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	615a      	str	r2, [r3, #20]
      __HAL_TIM_CLEAR_FLAG(&htim1, TIM_IT_CC1);
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <bg_proc+0xd4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f06f 0202 	mvn.w	r2, #2
 8000d94:	611a      	str	r2, [r3, #16]
//      HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, a_psc, ACCEL_STEPS);
      HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <bg_proc+0xd8>)
 8000d9e:	f000 fdc2 	bl	8001926 <HAL_GPIO_WritePin>
      HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <bg_proc+0xd4>)
 8000da6:	f003 f837 	bl	8003e18 <HAL_TIM_PWM_Start_IT>
      spwm.running = true;
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <bg_proc+0xc4>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
    }
  }

}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	200002fe 	.word	0x200002fe
 8000dc0:	200002a0 	.word	0x200002a0
 8000dc4:	0800a618 	.word	0x0800a618
 8000dc8:	20000300 	.word	0x20000300
 8000dcc:	20000248 	.word	0x20000248
 8000dd0:	20000200 	.word	0x20000200
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <schedule_pulse>:


static void schedule_pulse(uint32_t ticks)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  // ticks is in terms of Fclock/5 (i.e. ARR = 4)
  // Work out PSC, ARR and CCR1 values
  uint32_t psc;
  uint32_t div = 5;
 8000de0:	2305      	movs	r3, #5
 8000de2:	60bb      	str	r3, [r7, #8]
  psc = ticks;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    if (psc <= 65535)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dee:	d306      	bcc.n	8000dfe <schedule_pulse+0x26>
      break;
    div <<= 1;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
    psc >>= 1;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	085b      	lsrs	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
    if (psc <= 65535)
 8000dfc:	e7f4      	b.n	8000de8 <schedule_pulse+0x10>
      break;
 8000dfe:	bf00      	nop
  }

  htim1.Instance->ARR = div-1;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <schedule_pulse+0x50>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	3a01      	subs	r2, #1
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  htim1.Instance->CCR1 = div >> 1;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <schedule_pulse+0x50>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	0852      	lsrs	r2, r2, #1
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->PSC = psc;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <schedule_pulse+0x50>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000200 	.word	0x20000200

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <motion_start_fp>:
 * @param max_accel
 * @param max_speed
 * @return
 */
uint32_t motion_start_fp(uint16_t s_target, uint16_t max_accel, uint16_t max_speed)
{
 8000e38:	b538      	push	{r3, r4, r5, lr}
 8000e3a:	460c      	mov	r4, r1

  motion_ctx.p_buff = (uint32_t*)p_motion_buff;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <motion_start_fp+0xb0>)
 8000e3e:	492b      	ldr	r1, [pc, #172]	; (8000eec <motion_start_fp+0xb4>)
 8000e40:	6809      	ldr	r1, [r1, #0]
 8000e42:	6019      	str	r1, [r3, #0]
  motion_ctx.s_target = (uint32_t)s_target;
 8000e44:	6118      	str	r0, [r3, #16]

  // See if are enough steps to acheive the specified speed (113/710 is pi/2))
  uint32_t temp = (uint32_t)max_speed;
  temp *= temp;
 8000e46:	fb02 f302 	mul.w	r3, r2, r2

  uint16_t s_min = (uint16_t)((temp * 355)/
 8000e4a:	f240 1163 	movw	r1, #355	; 0x163
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
                    ((uint32_t)max_accel * 226UL));
 8000e52:	21e2      	movs	r1, #226	; 0xe2
 8000e54:	fb04 f101 	mul.w	r1, r4, r1
  uint16_t s_min = (uint16_t)((temp * 355)/
 8000e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5c:	b29b      	uxth	r3, r3

  if (s_target < s_min)
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d32e      	bcc.n	8000ec0 <motion_start_fp+0x88>
    motion_ctx.nmax -= SPEED_MIN;
#endif
  }
  else
  {
    motion_ctx.nmax = (uint32_t)max_speed - SPEED_MIN;
 8000e62:	3a1e      	subs	r2, #30
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <motion_start_fp+0xb0>)
 8000e66:	605a      	str	r2, [r3, #4]
  // ARM lib trig functions are scaled so that 2^31 input is 2pi
  // So our multiplier is 2^31/2pi
  // overall multipler is (w*2^31*T_TICK_NUM)
  //                      -------------------
  //                       2pi * 2^31
  motion_ctx.t_mult = (uint32_t)max_accel*T_TICK_NUM*113;       // pi == 355/113
 8000e68:	f244 11c5 	movw	r1, #16837	; 0x41c5
 8000e6c:	fb01 f404 	mul.w	r4, r1, r4
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <motion_start_fp+0xb0>)
 8000e72:	619c      	str	r4, [r3, #24]
  motion_ctx.t_mult += (motion_ctx.nmax * 355)/2;
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	f240 1163 	movw	r1, #355	; 0x163
 8000e7a:	fb01 f202 	mul.w	r2, r1, r2
 8000e7e:	eb04 0452 	add.w	r4, r4, r2, lsr #1
 8000e82:	619c      	str	r4, [r3, #24]
  motion_ctx.t_mult /= (motion_ctx.nmax * 355);
 8000e84:	fbb4 f4f2 	udiv	r4, r4, r2
 8000e88:	619c      	str	r4, [r3, #24]

  // say max accel = 20000, so t_mult(max) = ((20000*149*113)+355/2)/355
  // So tMult(max) = 948,563

  motion_ctx.ticks = SPEED_MIN_TICKS;
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <motion_start_fp+0xb8>)
 8000e8c:	621a      	str	r2, [r3, #32]
  motion_ctx.n_prev = 0;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  motion_ctx.s_idx = 0;
 8000e92:	61da      	str	r2, [r3, #28]
  motion_ctx.n = SPEED_MIN<<8;                // q8
 8000e94:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000e98:	6099      	str	r1, [r3, #8]
  motion_ctx.decel_done = false;
 8000e9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  // t = 0
  if (motion_ctx.p_buff != NULL)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b12b      	cbz	r3, 8000eae <motion_start_fp+0x76>
    *motion_ctx.p_buff++ = motion_ctx.n;
 8000ea2:	1d19      	adds	r1, r3, #4
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <motion_start_fp+0xb0>)
 8000ea6:	6011      	str	r1, [r2, #0]
 8000ea8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
 8000eac:	601a      	str	r2, [r3, #0]
  motion_ctx.s_idx++;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <motion_start_fp+0xb0>)
 8000eb0:	69da      	ldr	r2, [r3, #28]
 8000eb2:	3201      	adds	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]

  motion_ctx.decel_done = false;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  // TODO: schedule first pulse
//  while(!motion_step());

  return motion_ctx.ticks;
}
 8000ebc:	6a18      	ldr	r0, [r3, #32]
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
    temp = (452UL * (uint32_t)max_accel * (uint32_t)s_target)/355UL;
 8000ec0:	fb04 f000 	mul.w	r0, r4, r0
 8000ec4:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8000ec8:	fb03 f000 	mul.w	r0, r3, r0
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <motion_start_fp+0xbc>)
 8000ece:	fba3 3000 	umull	r3, r0, r3, r0
    arm_sqrt_q31(temp, (q31_t*)&motion_ctx.nmax);
 8000ed2:	4d05      	ldr	r5, [pc, #20]	; (8000ee8 <motion_start_fp+0xb0>)
 8000ed4:	1d29      	adds	r1, r5, #4
 8000ed6:	0a00      	lsrs	r0, r0, #8
 8000ed8:	f008 fe42 	bl	8009b60 <arm_sqrt_q31>
    motion_ctx.nmax >>= 16;
 8000edc:	88eb      	ldrh	r3, [r5, #6]
 8000ede:	606b      	str	r3, [r5, #4]
    motion_ctx.nmax -= SPEED_MIN;
 8000ee0:	3b1e      	subs	r3, #30
 8000ee2:	606b      	str	r3, [r5, #4]
 8000ee4:	e7c0      	b.n	8000e68 <motion_start_fp+0x30>
 8000ee6:	bf00      	nop
 8000ee8:	20000320 	.word	0x20000320
 8000eec:	20000354 	.word	0x20000354
 8000ef0:	00075300 	.word	0x00075300
 8000ef4:	b89bc36d 	.word	0xb89bc36d

08000ef8 <motion_step>:

uint32_t motion_step(void)
{
  static uint32_t result = 0;
  uint32_t trig_operand;
  if(motion_ctx.s_idx < motion_ctx.s_target)
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <motion_step+0x134>)
 8000efa:	69da      	ldr	r2, [r3, #28]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	f080 8088 	bcs.w	8001014 <motion_step+0x11c>
  {
    switch (motion_ctx.state)
 8000f04:	4b49      	ldr	r3, [pc, #292]	; (800102c <motion_step+0x134>)
 8000f06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d06d      	beq.n	8000fea <motion_step+0xf2>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d002      	beq.n	8000f18 <motion_step+0x20>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8086 	bne.w	8001024 <motion_step+0x12c>
{
 8000f18:	b510      	push	{r4, lr}
      // be generated in real time inside the timer OC interrupt, for this to be feasible
      // calculation wants to be < 40us (based on say 5000Hz max stepper speed)

      // ticks * tmult must not exceed 2^31, however greater accel will have less accel/decel
      // ticks so everything should look after itself
      trig_operand = motion_ctx.ticks * motion_ctx.t_mult;
 8000f1a:	4b44      	ldr	r3, [pc, #272]	; (800102c <motion_step+0x134>)
 8000f1c:	6a1c      	ldr	r4, [r3, #32]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	fb03 f404 	mul.w	r4, r3, r4
      if (trig_operand > 0x7fffffff)
 8000f24:	2c00      	cmp	r4, #0
 8000f26:	db1e      	blt.n	8000f66 <motion_step+0x6e>
      {
        motion_ctx.decel_done = true;
      }
      uint32_t temp = (uint32_t)arm_cos_q31((q31_t)trig_operand);
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f008 fe95 	bl	8009c58 <arm_cos_q31>
      temp = 0x7fffffff-temp;
      // This should always be positive, therefore change to q14 by doing a right shift 17 places
      temp += 1<<14;
 8000f2e:	4b40      	ldr	r3, [pc, #256]	; (8001030 <motion_step+0x138>)
 8000f30:	1a1b      	subs	r3, r3, r0
      temp >>= 15;      // Change scaling to q16 to prevent overflow
 8000f32:	0bd8      	lsrs	r0, r3, #15
      // Work out the speed
      motion_ctx.n = motion_ctx.nmax/2 * temp;         // q16ls
 8000f34:	493d      	ldr	r1, [pc, #244]	; (800102c <motion_step+0x134>)
 8000f36:	684a      	ldr	r2, [r1, #4]
 8000f38:	0853      	lsrs	r3, r2, #1
 8000f3a:	fb00 f303 	mul.w	r3, r0, r3
 8000f3e:	608b      	str	r3, [r1, #8]
      motion_ctx.n += 1<<7;                // add 1/2 divisor
 8000f40:	3380      	adds	r3, #128	; 0x80
 8000f42:	608b      	str	r3, [r1, #8]
      motion_ctx.n >>= 8;                           // q8
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	608b      	str	r3, [r1, #8]
      motion_ctx.n += (SPEED_MIN<<8);
 8000f48:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000f4c:	608b      	str	r3, [r1, #8]
      bool accel_done = ((motion_ctx.state == ACCEL) &&
 8000f4e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8000f52:	b96a      	cbnz	r2, 8000f70 <motion_step+0x78>
                      ((motion_ctx.n < motion_ctx.n_prev) ||
 8000f54:	68ca      	ldr	r2, [r1, #12]
      bool accel_done = ((motion_ctx.state == ACCEL) &&
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d31b      	bcc.n	8000f92 <motion_step+0x9a>
                      ((motion_ctx.n < motion_ctx.n_prev) ||
 8000f5a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000f5e:	4294      	cmp	r4, r2
 8000f60:	d219      	bcs.n	8000f96 <motion_step+0x9e>
      bool accel_done = ((motion_ctx.state == ACCEL) &&
 8000f62:	2200      	movs	r2, #0
 8000f64:	e005      	b.n	8000f72 <motion_step+0x7a>
        motion_ctx.decel_done = true;
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <motion_step+0x134>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000f6e:	e7db      	b.n	8000f28 <motion_step+0x30>
      bool accel_done = ((motion_ctx.state == ACCEL) &&
 8000f70:	2200      	movs	r2, #0
                          (trig_operand >= 0x3fffffff)));
      if (accel_done)
 8000f72:	b1ba      	cbz	r2, 8000fa4 <motion_step+0xac>
      {
          uint32_t s_accel = motion_ctx.s_idx+1;
 8000f74:	492d      	ldr	r1, [pc, #180]	; (800102c <motion_step+0x134>)
 8000f76:	69ca      	ldr	r2, [r1, #28]
 8000f78:	1c50      	adds	r0, r2, #1
//        uint32_t s_accel = motion_ctx.s_idx;
//        printf("Peak speed %lu detected at %u steps\n", motion_ctx.n>>8, s_accel);
          // TODO: set ticks * t_mult to be exactly 0x4000000 (i.e. pi)
        //motion_ctx.ticks = 0x3fffffff/motion_ctx.t_mult;
        motion_ctx.s_cv = motion_ctx.s_target - (2 * s_accel);
 8000f7a:	690a      	ldr	r2, [r1, #16]
 8000f7c:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
 8000f80:	614a      	str	r2, [r1, #20]
        if (motion_ctx.s_cv > 0)
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	dd09      	ble.n	8000f9a <motion_step+0xa2>
        {
          motion_ctx.state = STEADY;
 8000f86:	2201      	movs	r2, #1
 8000f88:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
          motion_ctx.n = motion_ctx.n_prev;
 8000f8c:	68ca      	ldr	r2, [r1, #12]
 8000f8e:	608a      	str	r2, [r1, #8]
          break;
 8000f90:	e028      	b.n	8000fe4 <motion_step+0xec>
      bool accel_done = ((motion_ctx.state == ACCEL) &&
 8000f92:	2201      	movs	r2, #1
 8000f94:	e7ed      	b.n	8000f72 <motion_step+0x7a>
 8000f96:	2201      	movs	r2, #1
 8000f98:	e7eb      	b.n	8000f72 <motion_step+0x7a>
        }
        else
        {
          motion_ctx.state = DECEL;
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <motion_step+0x134>)
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8000fa2:	e007      	b.n	8000fb4 <motion_step+0xbc>
        }
      }
      else if (motion_ctx.decel_done)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <motion_step+0x134>)
 8000fa6:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8000faa:	b11a      	cbz	r2, 8000fb4 <motion_step+0xbc>
      {
        motion_ctx.state = ACCEL;
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <motion_step+0x134>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
      }
      // We want to go from speed to pulse, so its 1/speed
      // dticks is used to schedule the next pulse, PSC, ARR and CCR1 will needed to be
      // adjusted to that PSC is <= 65535
      uint32_t dticks = (((T_TICK_DIV)<<8) + (motion_ctx.n>>1))/motion_ctx.n;
 8000fb4:	085a      	lsrs	r2, r3, #1
 8000fb6:	f102 425b 	add.w	r2, r2, #3674210304	; 0xdb000000
 8000fba:	f502 023a 	add.w	r2, r2, #12189696	; 0xba0000
 8000fbe:	fbb2 f2f3 	udiv	r2, r2, r3
      motion_ctx.ticks += dticks;
 8000fc2:	491a      	ldr	r1, [pc, #104]	; (800102c <motion_step+0x134>)
 8000fc4:	6a08      	ldr	r0, [r1, #32]
 8000fc6:	4410      	add	r0, r2
 8000fc8:	6208      	str	r0, [r1, #32]
      result = dticks;
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <motion_step+0x13c>)
 8000fcc:	6002      	str	r2, [r0, #0]
      if (motion_ctx.p_buff != NULL)
 8000fce:	680a      	ldr	r2, [r1, #0]
 8000fd0:	b112      	cbz	r2, 8000fd8 <motion_step+0xe0>
        *motion_ctx.p_buff++ = motion_ctx.n;
 8000fd2:	1d10      	adds	r0, r2, #4
 8000fd4:	6008      	str	r0, [r1, #0]
 8000fd6:	6013      	str	r3, [r2, #0]
      motion_ctx.s_idx++;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <motion_step+0x134>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	3201      	adds	r2, #1
 8000fde:	61da      	str	r2, [r3, #28]
      motion_ctx.n_prev = motion_ctx.n;
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
    motion_ctx.decel_done = false;
    motion_ctx.state = ACCEL;
  }

  return result;
}
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <motion_step+0x13c>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	bd10      	pop	{r4, pc}
      if (--motion_ctx.s_cv > 0)
 8000fea:	4910      	ldr	r1, [pc, #64]	; (800102c <motion_step+0x134>)
 8000fec:	694b      	ldr	r3, [r1, #20]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	614b      	str	r3, [r1, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	dd09      	ble.n	800100a <motion_step+0x112>
        motion_ctx.s_idx++;
 8000ff6:	3201      	adds	r2, #1
 8000ff8:	61ca      	str	r2, [r1, #28]
        if (motion_ctx.p_buff != NULL)
 8000ffa:	680b      	ldr	r3, [r1, #0]
 8000ffc:	b193      	cbz	r3, 8001024 <motion_step+0x12c>
          *motion_ctx.p_buff++ = motion_ctx.n;
 8000ffe:	460a      	mov	r2, r1
 8001000:	1d19      	adds	r1, r3, #4
 8001002:	6011      	str	r1, [r2, #0]
 8001004:	6892      	ldr	r2, [r2, #8]
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e00c      	b.n	8001024 <motion_step+0x12c>
        motion_ctx.state = DECEL;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <motion_step+0x134>)
 800100c:	2202      	movs	r2, #2
 800100e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001012:	e007      	b.n	8001024 <motion_step+0x12c>
    result = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <motion_step+0x13c>)
 8001018:	6013      	str	r3, [r2, #0]
    motion_ctx.decel_done = false;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <motion_step+0x134>)
 800101c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
    motion_ctx.state = ACCEL;
 8001020:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <motion_step+0x13c>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000320 	.word	0x20000320
 8001030:	80003fff 	.word	0x80003fff
 8001034:	20000358 	.word	0x20000358

08001038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_MspInit+0x54>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_MspInit+0x54>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_MspInit+0x54>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_MspInit+0x54>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_MspInit+0x54>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x54>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_MspInit+0x58>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_MspInit+0x58>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000

08001094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a26      	ldr	r2, [pc, #152]	; (8001148 <HAL_TIM_Base_MspInit+0xb4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d114      	bne.n	80010de <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a24      	ldr	r2, [pc, #144]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 80010ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	201b      	movs	r0, #27
 80010d2:	f000 fa56 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010d6:	201b      	movs	r0, #27
 80010d8:	f000 fa6f 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010dc:	e030      	b.n	8001140 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_TIM_Base_MspInit+0xbc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d12b      	bne.n	8001140 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	61d3      	str	r3, [r2, #28]
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a11      	ldr	r2, [pc, #68]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 8001106:	f043 0320 	orr.w	r3, r3, #32
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_TIM_Base_MspInit+0xb8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001118:	2304      	movs	r3, #4
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4619      	mov	r1, r3
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0xc0>)
 800112c:	f000 fa60 	bl	80015f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	201d      	movs	r0, #29
 8001136:	f000 fa24 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800113a:	201d      	movs	r0, #29
 800113c:	f000 fa3d 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40012c00 	.word	0x40012c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40000400 	.word	0x40000400
 8001154:	40011400 	.word	0x40011400

08001158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_TIM_MspPostInit+0x5c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d118      	bne.n	80011aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_TIM_MspPostInit+0x60>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_TIM_MspPostInit+0x60>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_TIM_MspPostInit+0x60>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2302      	movs	r3, #2
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_TIM_MspPostInit+0x64>)
 80011a6:	f000 fa23 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001206:	f000 f8c9 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001216:	f000 fccf 	bl	8001bb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000092c 	.word	0x2000092c

08001224 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_CC_IRQHandler+0x10>)
 800122a:	f002 ff87 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000200 	.word	0x20000200

08001238 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM3_IRQHandler+0x10>)
 800123e:	f002 ff7d 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000248 	.word	0x20000248

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f008 fd0c 	bl	8009c98 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20005000 	.word	0x20005000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	2000035c 	.word	0x2000035c
 80012b4:	20000e48 	.word	0x20000e48

080012b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff ffe5 	bl	80012b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f008 fcd9 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff f9b7 	bl	8000664 <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001300:	0800af34 	.word	0x0800af34
  ldr r2, =_sbss
 8001304:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001308:	20000e48 	.word	0x20000e48

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f923 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fe84 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f93b 	bl	80015d6 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001378:	f000 f903 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000004 	.word	0x20000004
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x1c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x20>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x20>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000360 	.word	0x20000360

080013c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_GetTick+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000360 	.word	0x20000360

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e169      	b.n	80018d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001604:	2201      	movs	r2, #1
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8158 	bne.w	80018d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a9a      	ldr	r2, [pc, #616]	; (8001890 <HAL_GPIO_Init+0x2a0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d05e      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800162c:	4a98      	ldr	r2, [pc, #608]	; (8001890 <HAL_GPIO_Init+0x2a0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d875      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001632:	4a98      	ldr	r2, [pc, #608]	; (8001894 <HAL_GPIO_Init+0x2a4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d058      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001638:	4a96      	ldr	r2, [pc, #600]	; (8001894 <HAL_GPIO_Init+0x2a4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d86f      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800163e:	4a96      	ldr	r2, [pc, #600]	; (8001898 <HAL_GPIO_Init+0x2a8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d052      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001644:	4a94      	ldr	r2, [pc, #592]	; (8001898 <HAL_GPIO_Init+0x2a8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d869      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800164a:	4a94      	ldr	r2, [pc, #592]	; (800189c <HAL_GPIO_Init+0x2ac>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04c      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001650:	4a92      	ldr	r2, [pc, #584]	; (800189c <HAL_GPIO_Init+0x2ac>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d863      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001656:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d046      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800165c:	4a90      	ldr	r2, [pc, #576]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d85d      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d82a      	bhi.n	80016bc <HAL_GPIO_Init+0xcc>
 8001666:	2b12      	cmp	r3, #18
 8001668:	d859      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <HAL_GPIO_Init+0x80>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016c5 	.word	0x080016c5
 8001678:	080016d7 	.word	0x080016d7
 800167c:	08001719 	.word	0x08001719
 8001680:	0800171f 	.word	0x0800171f
 8001684:	0800171f 	.word	0x0800171f
 8001688:	0800171f 	.word	0x0800171f
 800168c:	0800171f 	.word	0x0800171f
 8001690:	0800171f 	.word	0x0800171f
 8001694:	0800171f 	.word	0x0800171f
 8001698:	0800171f 	.word	0x0800171f
 800169c:	0800171f 	.word	0x0800171f
 80016a0:	0800171f 	.word	0x0800171f
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	0800171f 	.word	0x0800171f
 80016ac:	0800171f 	.word	0x0800171f
 80016b0:	0800171f 	.word	0x0800171f
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016e1 	.word	0x080016e1
 80016bc:	4a79      	ldr	r2, [pc, #484]	; (80018a4 <HAL_GPIO_Init+0x2b4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016c2:	e02c      	b.n	800171e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e029      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e024      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	3308      	adds	r3, #8
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e01f      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	330c      	adds	r3, #12
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e01a      	b.n	8001720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f2:	2304      	movs	r3, #4
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e013      	b.n	8001720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	611a      	str	r2, [r3, #16]
          break;
 800170a:	e009      	b.n	8001720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	615a      	str	r2, [r3, #20]
          break;
 8001716:	e003      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x130>
          break;
 800171e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2bff      	cmp	r3, #255	; 0xff
 8001724:	d801      	bhi.n	800172a <HAL_GPIO_Init+0x13a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	e001      	b.n	800172e <HAL_GPIO_Init+0x13e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d802      	bhi.n	800173c <HAL_GPIO_Init+0x14c>
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x152>
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3b08      	subs	r3, #8
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	210f      	movs	r1, #15
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80b1 	beq.w	80018d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001770:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <HAL_GPIO_Init+0x2b8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <HAL_GPIO_Init+0x2b8>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_GPIO_Init+0x2b8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2bc>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a40      	ldr	r2, [pc, #256]	; (80018b0 <HAL_GPIO_Init+0x2c0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_Init+0x1ec>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a3f      	ldr	r2, [pc, #252]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1e8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3d      	ldr	r2, [pc, #244]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1e0>
 80017cc:	2303      	movs	r3, #3
 80017ce:	e006      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017d0:	2304      	movs	r3, #4
 80017d2:	e004      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e002      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017dc:	2300      	movs	r3, #0
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	f002 0203 	and.w	r2, r2, #3
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	4093      	lsls	r3, r2
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ee:	492f      	ldr	r1, [pc, #188]	; (80018ac <HAL_GPIO_Init+0x2bc>)
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	492c      	ldr	r1, [pc, #176]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	4928      	ldr	r1, [pc, #160]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001820:	4013      	ands	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4922      	ldr	r1, [pc, #136]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	491e      	ldr	r1, [pc, #120]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001848:	4013      	ands	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4918      	ldr	r1, [pc, #96]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4914      	ldr	r1, [pc, #80]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001870:	4013      	ands	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d021      	beq.n	80018c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	490e      	ldr	r1, [pc, #56]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
 800188c:	e021      	b.n	80018d2 <HAL_GPIO_Init+0x2e2>
 800188e:	bf00      	nop
 8001890:	10320000 	.word	0x10320000
 8001894:	10310000 	.word	0x10310000
 8001898:	10220000 	.word	0x10220000
 800189c:	10210000 	.word	0x10210000
 80018a0:	10120000 	.word	0x10120000
 80018a4:	10110000 	.word	0x10110000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40011400 	.word	0x40011400
 80018c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_GPIO_Init+0x304>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4909      	ldr	r1, [pc, #36]	; (80018f4 <HAL_GPIO_Init+0x304>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	3301      	adds	r3, #1
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f47f ae8e 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	372c      	adds	r7, #44	; 0x2c
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40010400 	.word	0x40010400

080018f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e001      	b.n	800191a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
 8001932:	4613      	mov	r3, r2
 8001934:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001936:	787b      	ldrb	r3, [r7, #1]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193c:	887a      	ldrh	r2, [r7, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001942:	e003      	b.n	800194c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001958:	b08b      	sub	sp, #44	; 0x2c
 800195a:	af06      	add	r7, sp, #24
 800195c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0fd      	b.n	8001b64 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f007 fe45 	bl	800960c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 fb2d 	bl	8004fee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	687e      	ldr	r6, [r7, #4]
 800199c:	466d      	mov	r5, sp
 800199e:	f106 0410 	add.w	r4, r6, #16
 80019a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	602b      	str	r3, [r5, #0]
 80019aa:	1d33      	adds	r3, r6, #4
 80019ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ae:	6838      	ldr	r0, [r7, #0]
 80019b0:	f003 faf7 	bl	8004fa2 <USB_CoreInit>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0ce      	b.n	8001b64 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fb28 	bl	8005022 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e04c      	b.n	8001a72 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3301      	adds	r3, #1
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	b298      	uxth	r0, r3
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	3336      	adds	r3, #54	; 0x36
 8001a16:	4602      	mov	r2, r0
 8001a18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3338      	adds	r3, #56	; 0x38
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	333c      	adds	r3, #60	; 0x3c
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3340      	adds	r3, #64	; 0x40
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3ad      	bcc.n	80019d8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e044      	b.n	8001b0c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3b5      	bcc.n	8001a82 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	687e      	ldr	r6, [r7, #4]
 8001b1e:	466d      	mov	r5, sp
 8001b20:	f106 0410 	add.w	r4, r6, #16
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	602b      	str	r3, [r5, #0]
 8001b2c:	1d33      	adds	r3, r6, #4
 8001b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f003 fa82 	bl	800503a <USB_DevInit>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e00d      	b.n	8001b64 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f005 ff35 	bl	80079cc <USB_DevDisconnect>

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_Start+0x16>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e016      	b.n	8001bb0 <HAL_PCD_Start+0x44>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fa17 	bl	8004fc2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b94:	2101      	movs	r1, #1
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f007 ffab 	bl	8009af2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 ff09 	bl	80079b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f005 ff0b 	bl	80079e0 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd4:	d102      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb5f 	bl	800229a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 fefd 	bl	80079e0 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d112      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c04:	b292      	uxth	r2, r2
 8001c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f007 fd79 	bl	8009702 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f923 	bl	8001e5e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 fedf 	bl	80079e0 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c40:	b292      	uxth	r2, r2
 8001c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fec8 	bl	80079e0 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 feb1 	bl	80079e0 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c88:	d126      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0204 	bic.w	r2, r2, #4
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0208 	bic.w	r2, r2, #8
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f007 fd5a 	bl	8009774 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fe7f 	bl	80079e0 <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cec:	f040 8082 	bne.w	8001df4 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]
 8001cf4:	e010      	b.n	8001d18 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	b292      	uxth	r2, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	3301      	adds	r3, #1
 8001d16:	77fb      	strb	r3, [r7, #31]
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	2b07      	cmp	r3, #7
 8001d1c:	d9eb      	bls.n	8001cf6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	b292      	uxth	r2, r2
 8001d32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d4e:	bf00      	nop
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f6      	beq.n	8001d50 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d74:	b292      	uxth	r2, r2
 8001d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	77fb      	strb	r3, [r7, #31]
 8001d7e:	e00f      	b.n	8001da0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	4611      	mov	r1, r2
 8001d88:	7ffa      	ldrb	r2, [r7, #31]
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	440a      	add	r2, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	3320      	adds	r3, #32
 8001d92:	443b      	add	r3, r7
 8001d94:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d98:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d9a:	7ffb      	ldrb	r3, [r7, #31]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d9ec      	bls.n	8001d80 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0208 	orr.w	r2, r2, #8
 8001db8:	b292      	uxth	r2, r2
 8001dba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0204 	orr.w	r2, r2, #4
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f007 fca6 	bl	8009740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 fdf1 	bl	80079e0 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e08:	d10e      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f007 fc5f 	bl	80096e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 fdd7 	bl	80079e0 <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d10b      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e50:	b292      	uxth	r2, r2
 8001e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e56:	bf00      	nop
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_SetAddress+0x1a>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e013      	b.n	8001ea0 <HAL_PCD_SetAddress+0x42>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f005 fd7e 	bl	8007992 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	70fb      	strb	r3, [r7, #3]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	803b      	strh	r3, [r7, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0e      	bge.n	8001eec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	705a      	strb	r2, [r3, #1]
 8001eea:	e00e      	b.n	8001f0a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 0207 	and.w	r2, r3, #7
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f16:	883a      	ldrh	r2, [r7, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	78ba      	ldrb	r2, [r7, #2]
 8001f20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d102      	bne.n	8001f40 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_EP_Open+0xa6>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e00e      	b.n	8001f6c <HAL_PCD_EP_Open+0xc4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f88d 	bl	800507c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0e      	bge.n	8001fa6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	705a      	strb	r2, [r3, #1]
 8001fa4:	e00e      	b.n	8001fc4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 0207 	and.w	r2, r3, #7
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_PCD_EP_Close+0x6a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e00e      	b.n	8001ffc <HAL_PCD_EP_Close+0x88>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fbaf 	bl	8005750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	460b      	mov	r3, r1
 8002012:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	f003 0207 	and.w	r2, r3, #7
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	b2da      	uxtb	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6979      	ldr	r1, [r7, #20]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fd61 	bl	8005b28 <USB_EPStartXfer>
 8002066:	e005      	b.n	8002074 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6979      	ldr	r1, [r7, #20]
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fd5a 	bl	8005b28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 0207 	and.w	r2, r3, #7
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020a0:	681b      	ldr	r3, [r3, #0]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	460b      	mov	r3, r1
 80020ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2201      	movs	r2, #1
 80020f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fd07 	bl	8005b28 <USB_EPStartXfer>
 800211a:	e005      	b.n	8002128 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6979      	ldr	r1, [r7, #20]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fd00 	bl	8005b28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0207 	and.w	r2, r3, #7
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d901      	bls.n	8002150 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e04c      	b.n	80021ea <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0e      	bge.n	8002176 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	705a      	strb	r2, [r3, #1]
 8002174:	e00c      	b.n	8002190 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_SetStall+0x7e>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e01c      	b.n	80021ea <HAL_PCD_EP_SetStall+0xb8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 faea 	bl	8007798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f005 fc0f 	bl	80079fe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 020f 	and.w	r2, r3, #15
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	d901      	bls.n	8002210 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e040      	b.n	8002292 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002214:	2b00      	cmp	r3, #0
 8002216:	da0e      	bge.n	8002236 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	e00e      	b.n	8002254 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 0207 	and.w	r2, r3, #7
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_PCD_EP_ClrStall+0x82>
 8002270:	2302      	movs	r3, #2
 8002272:	e00e      	b.n	8002292 <HAL_PCD_EP_ClrStall+0xa0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	4618      	mov	r0, r3
 8002284:	f005 fad8 	bl	8007838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08e      	sub	sp, #56	; 0x38
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022a2:	e2ec      	b.n	800287e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80022ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8161 	bne.w	8002586 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d152      	bne.n	8002374 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	81fb      	strh	r3, [r7, #14]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	89fb      	ldrh	r3, [r7, #14]
 80022e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3328      	adds	r3, #40	; 0x28
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	3302      	adds	r3, #2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	441a      	add	r2, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002332:	2100      	movs	r1, #0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f007 f9bc 	bl	80096b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 829b 	beq.w	800287e <PCD_EP_ISR_Handler+0x5e4>
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8296 	bne.w	800287e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800235e:	b2da      	uxtb	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b292      	uxth	r2, r2
 8002366:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002372:	e284      	b.n	800287e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002384:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238a:	2b00      	cmp	r3, #0
 800238c:	d034      	beq.n	80023f8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	3306      	adds	r3, #6
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f005 fb66 	bl	8007a9e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023de:	4013      	ands	r3, r2
 80023e0:	823b      	strh	r3, [r7, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	8a3a      	ldrh	r2, [r7, #16]
 80023e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ec:	b292      	uxth	r2, r2
 80023ee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f007 f931 	bl	8009658 <HAL_PCD_SetupStageCallback>
 80023f6:	e242      	b.n	800287e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f280 823e 	bge.w	800287e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29a      	uxth	r2, r3
 800240a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800240e:	4013      	ands	r3, r2
 8002410:	83bb      	strh	r3, [r7, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	8bba      	ldrh	r2, [r7, #28]
 8002418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241c:	b292      	uxth	r2, r2
 800241e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	3306      	adds	r3, #6
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d019      	beq.n	8002488 <PCD_EP_ISR_Handler+0x1ee>
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	6959      	ldr	r1, [r3, #20]
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800246c:	b29b      	uxth	r3, r3
 800246e:	f005 fb16 	bl	8007a9e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	441a      	add	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002480:	2100      	movs	r1, #0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f007 f8fa 	bl	800967c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 81f2 	bne.w	800287e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d112      	bne.n	80024e8 <PCD_EP_ISR_Handler+0x24e>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e02f      	b.n	8002548 <PCD_EP_ISR_Handler+0x2ae>
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b3e      	cmp	r3, #62	; 0x3e
 80024ee:	d813      	bhi.n	8002518 <PCD_EP_ISR_Handler+0x27e>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <PCD_EP_ISR_Handler+0x270>
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	3301      	adds	r3, #1
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	b29b      	uxth	r3, r3
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	b29a      	uxth	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	e017      	b.n	8002548 <PCD_EP_ISR_Handler+0x2ae>
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <PCD_EP_ISR_Handler+0x298>
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	3b01      	subs	r3, #1
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	b29b      	uxth	r3, r3
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	b29b      	uxth	r3, r3
 800253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002542:	b29a      	uxth	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002558:	827b      	strh	r3, [r7, #18]
 800255a:	8a7b      	ldrh	r3, [r7, #18]
 800255c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002560:	827b      	strh	r3, [r7, #18]
 8002562:	8a7b      	ldrh	r3, [r7, #18]
 8002564:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002568:	827b      	strh	r3, [r7, #18]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002580:	b29b      	uxth	r3, r3
 8002582:	8013      	strh	r3, [r2, #0]
 8002584:	e17b      	b.n	800287e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002598:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800259c:	2b00      	cmp	r3, #0
 800259e:	f280 80ea 	bge.w	8002776 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025b8:	4013      	ands	r3, r2
 80025ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d122      	bne.n	8002638 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	3306      	adds	r3, #6
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800261c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	6959      	ldr	r1, [r3, #20]
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	88da      	ldrh	r2, [r3, #6]
 8002630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002632:	f005 fa34 	bl	8007a9e <USB_ReadPMA>
 8002636:	e07c      	b.n	8002732 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	78db      	ldrb	r3, [r3, #3]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d108      	bne.n	8002652 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002640:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002642:	461a      	mov	r2, r3
 8002644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f927 	bl	800289a <HAL_PCD_EP_DB_Receive>
 800264c:	4603      	mov	r3, r0
 800264e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002650:	e06f      	b.n	8002732 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	847b      	strh	r3, [r7, #34]	; 0x22
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d021      	beq.n	80026f0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	3302      	adds	r3, #2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02a      	beq.n	8002732 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	6959      	ldr	r1, [r3, #20]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	891a      	ldrh	r2, [r3, #8]
 80026e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ea:	f005 f9d8 	bl	8007a9e <USB_ReadPMA>
 80026ee:	e020      	b.n	8002732 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	3306      	adds	r3, #6
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800271a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	6959      	ldr	r1, [r3, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	895a      	ldrh	r2, [r3, #10]
 800272c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800272e:	f005 f9b6 	bl	8007a9e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002738:	441a      	add	r2, r3
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002744:	441a      	add	r2, r3
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <PCD_EP_ISR_Handler+0x4c2>
 8002752:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d206      	bcs.n	800276a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f006 ff8a 	bl	800967c <HAL_PCD_DataOutStageCallback>
 8002768:	e005      	b.n	8002776 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002770:	4618      	mov	r0, r3
 8002772:	f003 f9d9 	bl	8005b28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002776:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d07e      	beq.n	800287e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002780:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	843b      	strh	r3, [r7, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	8c3b      	ldrh	r3, [r7, #32]
 80027c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	78db      	ldrb	r3, [r3, #3]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d00c      	beq.n	80027ee <PCD_EP_ISR_Handler+0x554>
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	78db      	ldrb	r3, [r3, #3]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d146      	bne.n	8002872 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d141      	bne.n	8002872 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	3302      	adds	r3, #2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	8bfb      	ldrh	r3, [r7, #30]
 800281e:	429a      	cmp	r2, r3
 8002820:	d906      	bls.n	8002830 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	8bfb      	ldrh	r3, [r7, #30]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e002      	b.n	8002836 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f006 ff34 	bl	80096b2 <HAL_PCD_DataInStageCallback>
 800284a:	e018      	b.n	800287e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	8bfb      	ldrh	r3, [r7, #30]
 8002852:	441a      	add	r2, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	8bfb      	ldrh	r3, [r7, #30]
 800285e:	441a      	add	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286a:	4618      	mov	r0, r3
 800286c:	f003 f95c 	bl	8005b28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002870:	e005      	b.n	800287e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002872:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002874:	461a      	mov	r2, r3
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f91b 	bl	8002ab4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002886:	b29b      	uxth	r3, r3
 8002888:	b21b      	sxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	f6ff ad0a 	blt.w	80022a4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3738      	adds	r7, #56	; 0x38
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b088      	sub	sp, #32
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	4613      	mov	r3, r2
 80028a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07e      	beq.n	80029b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	3302      	adds	r3, #2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	8b7b      	ldrh	r3, [r7, #26]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d306      	bcc.n	80028f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	8b7b      	ldrh	r3, [r7, #26]
 80028ec:	1ad2      	subs	r2, r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	619a      	str	r2, [r3, #24]
 80028f2:	e002      	b.n	80028fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d123      	bne.n	800294a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	833b      	strh	r3, [r7, #24]
 800291e:	8b3b      	ldrh	r3, [r7, #24]
 8002920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002924:	833b      	strh	r3, [r7, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	441a      	add	r2, r3
 8002934:	8b3b      	ldrh	r3, [r7, #24]
 8002936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800293a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002946:	b29b      	uxth	r3, r3
 8002948:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01f      	beq.n	8002994 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	82fb      	strh	r3, [r7, #22]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	8afb      	ldrh	r3, [r7, #22]
 8002980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002990:	b29b      	uxth	r3, r3
 8002992:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002994:	8b7b      	ldrh	r3, [r7, #26]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8087 	beq.w	8002aaa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6959      	ldr	r1, [r3, #20]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	891a      	ldrh	r2, [r3, #8]
 80029a8:	8b7b      	ldrh	r3, [r7, #26]
 80029aa:	f005 f878 	bl	8007a9e <USB_ReadPMA>
 80029ae:	e07c      	b.n	8002aaa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	3306      	adds	r3, #6
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	8b7b      	ldrh	r3, [r7, #26]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d306      	bcc.n	80029f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	8b7b      	ldrh	r3, [r7, #26]
 80029ea:	1ad2      	subs	r2, r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	e002      	b.n	80029f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d123      	bne.n	8002a48 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	83fb      	strh	r3, [r7, #30]
 8002a1c:	8bfb      	ldrh	r3, [r7, #30]
 8002a1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a22:	83fb      	strh	r3, [r7, #30]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	441a      	add	r2, r3
 8002a32:	8bfb      	ldrh	r3, [r7, #30]
 8002a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11f      	bne.n	8002a92 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6c:	83bb      	strh	r3, [r7, #28]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a92:	8b7b      	ldrh	r3, [r7, #26]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6959      	ldr	r1, [r3, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	895a      	ldrh	r2, [r3, #10]
 8002aa4:	8b7b      	ldrh	r3, [r7, #26]
 8002aa6:	f004 fffa 	bl	8007a9e <USB_ReadPMA>
    }
  }

  return count;
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0a2      	sub	sp, #136	; 0x88
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 81c7 	beq.w	8002e5c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d907      	bls.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	e002      	b.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 80b9 	bne.w	8002c98 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d126      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	4413      	add	r3, r2
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	011a      	lsls	r2, r3, #4
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	4413      	add	r3, r2
 8002b50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	e01a      	b.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d116      	bne.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	4413      	add	r3, r2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	011a      	lsls	r2, r3, #4
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d126      	bne.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	011a      	lsls	r2, r3, #4
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4413      	add	r3, r2
 8002be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	e017      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d113      	bne.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	4413      	add	r3, r2
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	011a      	lsls	r2, r3, #4
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	4413      	add	r3, r2
 8002c32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f006 fd34 	bl	80096b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 82d4 	beq.w	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	827b      	strh	r3, [r7, #18]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	441a      	add	r2, r3
 8002c80:	8a7b      	ldrh	r3, [r7, #18]
 8002c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	8013      	strh	r3, [r2, #0]
 8002c96:	e2b2      	b.n	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d021      	beq.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 8286 	bne.w	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d08:	441a      	add	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d309      	bcc.n	8002d2e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	621a      	str	r2, [r3, #32]
 8002d2c:	e015      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002d36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d44:	e009      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d155      	bne.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	4413      	add	r3, r2
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	011a      	lsls	r2, r3, #4
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	4413      	add	r3, r2
 8002d84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d112      	bne.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x302>
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	801a      	strh	r2, [r3, #0]
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e047      	b.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	2b3e      	cmp	r3, #62	; 0x3e
 8002dba:	d811      	bhi.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dce:	3301      	adds	r3, #1
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e032      	b.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x342>
 8002df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df2:	3b01      	subs	r3, #1
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	e01b      	b.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d117      	bne.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2a:	4413      	add	r3, r2
 8002e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	011a      	lsls	r2, r3, #4
 8002e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e36:	4413      	add	r3, r2
 8002e38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6959      	ldr	r1, [r3, #20]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	891a      	ldrh	r2, [r3, #8]
 8002e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f004 fddd 	bl	8007a14 <USB_WritePMA>
 8002e5a:	e1d0      	b.n	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3306      	adds	r3, #6
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d307      	bcc.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e9c:	1ad2      	subs	r2, r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	619a      	str	r2, [r3, #24]
 8002ea2:	e002      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 80c4 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d126      	bne.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x456>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	4413      	add	r3, r2
 8002ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	011a      	lsls	r2, r3, #4
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002edc:	4413      	add	r3, r2
 8002ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	e01a      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d116      	bne.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	677b      	str	r3, [r7, #116]	; 0x74
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f26:	4413      	add	r3, r2
 8002f28:	677b      	str	r3, [r7, #116]	; 0x74
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	011a      	lsls	r2, r3, #4
 8002f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f32:	4413      	add	r3, r2
 8002f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f38:	673b      	str	r3, [r7, #112]	; 0x70
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d12f      	bne.n	8002fae <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f66:	4413      	add	r3, r2
 8002f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	011a      	lsls	r2, r3, #4
 8002f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002faa:	801a      	strh	r2, [r3, #0]
 8002fac:	e017      	b.n	8002fde <HAL_PCD_EP_DB_Transmit+0x52a>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d113      	bne.n	8002fde <HAL_PCD_EP_DB_Transmit+0x52a>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fc4:	4413      	add	r3, r2
 8002fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	011a      	lsls	r2, r3, #4
 8002fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fda:	2200      	movs	r2, #0
 8002fdc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f006 fb64 	bl	80096b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 8104 	bne.w	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003010:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
 800303a:	e0e0      	b.n	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d121      	bne.n	800308a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800307a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003086:	b29b      	uxth	r3, r3
 8003088:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 80b4 	bne.w	80031fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800309e:	441a      	add	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030ac:	441a      	add	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d309      	bcc.n	80030d2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ca:	1ad2      	subs	r2, r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	621a      	str	r2, [r3, #32]
 80030d0:	e015      	b.n	80030fe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80030da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030e8:	e009      	b.n	80030fe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	667b      	str	r3, [r7, #100]	; 0x64
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d155      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x704>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	4413      	add	r3, r2
 8003122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	011a      	lsls	r2, r3, #4
 800312a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800312c:	4413      	add	r3, r2
 800312e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003132:	65bb      	str	r3, [r7, #88]	; 0x58
 8003134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d112      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800313a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003144:	b29a      	uxth	r2, r3
 8003146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003158:	b29a      	uxth	r2, r3
 800315a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e044      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x736>
 8003160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003162:	2b3e      	cmp	r3, #62	; 0x3e
 8003164:	d811      	bhi.n	800318a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	657b      	str	r3, [r7, #84]	; 0x54
 800316c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003178:	3301      	adds	r3, #1
 800317a:	657b      	str	r3, [r7, #84]	; 0x54
 800317c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317e:	b29b      	uxth	r3, r3
 8003180:	029b      	lsls	r3, r3, #10
 8003182:	b29a      	uxth	r2, r3
 8003184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	e02f      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x736>
 800318a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
 8003190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319c:	3b01      	subs	r3, #1
 800319e:	657b      	str	r3, [r7, #84]	; 0x54
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e018      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x736>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d114      	bne.n	80031ea <HAL_PCD_EP_DB_Transmit+0x736>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ce:	4413      	add	r3, r2
 80031d0:	667b      	str	r3, [r7, #100]	; 0x64
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	011a      	lsls	r2, r3, #4
 80031d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031da:	4413      	add	r3, r2
 80031dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60
 80031e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6959      	ldr	r1, [r3, #20]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	895a      	ldrh	r2, [r3, #10]
 80031f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f004 fc0b 	bl	8007a14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003218:	823b      	strh	r3, [r7, #16]
 800321a:	8a3b      	ldrh	r3, [r7, #16]
 800321c:	f083 0310 	eor.w	r3, r3, #16
 8003220:	823b      	strh	r3, [r7, #16]
 8003222:	8a3b      	ldrh	r3, [r7, #16]
 8003224:	f083 0320 	eor.w	r3, r3, #32
 8003228:	823b      	strh	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	8a3b      	ldrh	r3, [r7, #16]
 800323a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324a:	b29b      	uxth	r3, r3
 800324c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3788      	adds	r7, #136	; 0x88
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	817b      	strh	r3, [r7, #10]
 8003266:	4613      	mov	r3, r2
 8003268:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e009      	b.n	80032a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800328e:	897a      	ldrh	r2, [r7, #10]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2200      	movs	r2, #0
 80032ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	80da      	strh	r2, [r3, #6]
 80032b6:	e00b      	b.n	80032d0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2201      	movs	r2, #1
 80032bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e272      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8087 	beq.w	800340a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00c      	beq.n	8003322 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003308:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	d112      	bne.n	800333a <HAL_RCC_OscConfig+0x5e>
 8003314:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d10b      	bne.n	800333a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d06c      	beq.n	8003408 <HAL_RCC_OscConfig+0x12c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d168      	bne.n	8003408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e24c      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x76>
 8003344:	4b80      	ldr	r3, [pc, #512]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a7f      	ldr	r2, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	e02e      	b.n	80033b0 <HAL_RCC_OscConfig+0xd4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x98>
 800335a:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7a      	ldr	r2, [pc, #488]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b78      	ldr	r3, [pc, #480]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a77      	ldr	r2, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800336c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e01d      	b.n	80033b0 <HAL_RCC_OscConfig+0xd4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0xbc>
 800337e:	4b72      	ldr	r3, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a71      	ldr	r2, [pc, #452]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0xd4>
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a67      	ldr	r2, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe f802 	bl	80013c0 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fd fffe 	bl	80013c0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e200      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe4>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd ffee 	bl	80013c0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fd ffea 	bl	80013c0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1ec      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x10c>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003416:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x18c>
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x176>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1c0      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4939      	ldr	r1, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd ffa3 	bl	80013c0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fd ff9f 	bl	80013c0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1a1      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4927      	ldr	r1, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd ff82 	bl	80013c0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fd ff7e 	bl	80013c0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e180      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03a      	beq.n	8003560 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d019      	beq.n	8003526 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <HAL_RCC_OscConfig+0x274>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fd ff62 	bl	80013c0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fd ff5e 	bl	80013c0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e160      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCC_OscConfig+0x26c>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800351e:	2001      	movs	r0, #1
 8003520:	f000 faa6 	bl	8003a70 <RCC_Delay>
 8003524:	e01c      	b.n	8003560 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_OscConfig+0x274>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fd ff48 	bl	80013c0 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003532:	e00f      	b.n	8003554 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd ff44 	bl	80013c0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d908      	bls.n	8003554 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e146      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	42420000 	.word	0x42420000
 8003550:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e9      	bne.n	8003534 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a6 	beq.w	80036ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]
 800358a:	4b85      	ldr	r3, [pc, #532]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b7f      	ldr	r3, [pc, #508]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7e      	ldr	r2, [pc, #504]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fd ff05 	bl	80013c0 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fd ff01 	bl	80013c0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e103      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <HAL_RCC_OscConfig+0x4c8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x312>
 80035e0:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6213      	str	r3, [r2, #32]
 80035ec:	e02d      	b.n	800364a <HAL_RCC_OscConfig+0x36e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x334>
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a69      	ldr	r2, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a66      	ldr	r2, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	e01c      	b.n	800364a <HAL_RCC_OscConfig+0x36e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10c      	bne.n	8003632 <HAL_RCC_OscConfig+0x356>
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	e00b      	b.n	800364a <HAL_RCC_OscConfig+0x36e>
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d015      	beq.n	800367e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7fd feb5 	bl	80013c0 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd feb1 	bl	80013c0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0b1      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCC_OscConfig+0x37e>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7fd fe9f 	bl	80013c0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fd fe9b 	bl	80013c0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e09b      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4a3b      	ldr	r2, [pc, #236]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8087 	beq.w	80037d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d061      	beq.n	8003794 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d146      	bne.n	8003766 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fd fe6f 	bl	80013c0 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fd fe6b 	bl	80013c0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e06d      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d108      	bne.n	8003720 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	4921      	ldr	r1, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003720:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a19      	ldr	r1, [r3, #32]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	430b      	orrs	r3, r1
 8003732:	491b      	ldr	r1, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fd fe3f 	bl	80013c0 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003746:	f7fd fe3b 	bl	80013c0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e03d      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x46a>
 8003764:	e035      	b.n	80037d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fd fe28 	bl	80013c0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd fe24 	bl	80013c0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e026      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x498>
 8003792:	e01e      	b.n	80037d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e019      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x500>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0d0      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d910      	bls.n	8003824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 0207 	bic.w	r2, r3, #7
 800380a:	4965      	ldr	r1, [pc, #404]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800385e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	494d      	ldr	r1, [pc, #308]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d040      	beq.n	8003900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d115      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389e:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e073      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06b      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038be:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f023 0203 	bic.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4936      	ldr	r1, [pc, #216]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d0:	f7fd fd76 	bl	80013c0 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fd fd72 	bl	80013c0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e053      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 020c 	and.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d1eb      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d210      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0207 	bic.w	r2, r3, #7
 8003916:	4922      	ldr	r1, [pc, #136]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4916      	ldr	r1, [pc, #88]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490e      	ldr	r1, [pc, #56]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f821 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1cc>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1d0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fcd4 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40021000 	.word	0x40021000
 80039a8:	0800a684 	.word	0x0800a684
 80039ac:	20000004 	.word	0x20000004
 80039b0:	20000008 	.word	0x20000008

080039b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b490      	push	{r4, r7}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039ba:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xac>)
 80039bc:	1d3c      	adds	r4, r7, #4
 80039be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039c4:	f240 2301 	movw	r3, #513	; 0x201
 80039c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d002      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x46>
 80039f2:	e02b      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039f6:	623b      	str	r3, [r7, #32]
      break;
 80039f8:	e02b      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	0c9b      	lsrs	r3, r3, #18
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	3328      	adds	r3, #40	; 0x28
 8003a04:	443b      	add	r3, r7
 8003a06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0c5b      	lsrs	r3, r3, #17
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	3328      	adds	r3, #40	; 0x28
 8003a22:	443b      	add	r3, r7
 8003a24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a2e:	fb03 f202 	mul.w	r2, r3, r2
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e004      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	623b      	str	r3, [r7, #32]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4e:	623b      	str	r3, [r7, #32]
      break;
 8003a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a52:	6a3b      	ldr	r3, [r7, #32]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc90      	pop	{r4, r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	0800a644 	.word	0x0800a644
 8003a64:	40021000 	.word	0x40021000
 8003a68:	007a1200 	.word	0x007a1200
 8003a6c:	003d0900 	.word	0x003d0900

08003a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <RCC_Delay+0x34>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <RCC_Delay+0x38>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a5b      	lsrs	r3, r3, #9
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a8c:	bf00      	nop
  }
  while (Delay --);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	60fa      	str	r2, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f9      	bne.n	8003a8c <RCC_Delay+0x1c>
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	10624dd3 	.word	0x10624dd3

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d07d      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003acc:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a4b      	ldr	r2, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	61d3      	str	r3, [r2, #28]
 8003ae4:	4b49      	ldr	r3, [pc, #292]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d118      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b00:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fc58 	bl	80013c0 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	e008      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fd fc54 	bl	80013c0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e06d      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02e      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d027      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b60:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b66:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fd fc23 	bl	80013c0 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fc1f 	bl	80013c0 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e036      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ee      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4917      	ldr	r1, [pc, #92]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	490b      	ldr	r1, [pc, #44]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4904      	ldr	r1, [pc, #16]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
 8003c14:	42420440 	.word	0x42420440

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e041      	b.n	8003cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fa28 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fdb0 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e041      	b.n	8003d4c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f839 	bl	8003d54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f000 fd61 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e041      	b.n	8003dfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f839 	bl	8003e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f000 fd09 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_TIM_PWM_Start_IT+0x24>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e022      	b.n	8003e82 <HAL_TIM_PWM_Start_IT+0x6a>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d109      	bne.n	8003e56 <HAL_TIM_PWM_Start_IT+0x3e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e015      	b.n	8003e82 <HAL_TIM_PWM_Start_IT+0x6a>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d109      	bne.n	8003e70 <HAL_TIM_PWM_Start_IT+0x58>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e008      	b.n	8003e82 <HAL_TIM_PWM_Start_IT+0x6a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0a4      	b.n	8003fd4 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start_IT+0x82>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e98:	e013      	b.n	8003ec2 <HAL_TIM_PWM_Start_IT+0xaa>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start_IT+0x92>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea8:	e00b      	b.n	8003ec2 <HAL_TIM_PWM_Start_IT+0xaa>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start_IT+0xa2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	e003      	b.n	8003ec2 <HAL_TIM_PWM_Start_IT+0xaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d841      	bhi.n	8003f4c <HAL_TIM_PWM_Start_IT+0x134>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <HAL_TIM_PWM_Start_IT+0xb8>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f4d 	.word	0x08003f4d
 8003ed8:	08003f4d 	.word	0x08003f4d
 8003edc:	08003f4d 	.word	0x08003f4d
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f4d 	.word	0x08003f4d
 8003ee8:	08003f4d 	.word	0x08003f4d
 8003eec:	08003f4d 	.word	0x08003f4d
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f4d 	.word	0x08003f4d
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003f4d 	.word	0x08003f4d
 8003f00:	08003f3b 	.word	0x08003f3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0202 	orr.w	r2, r2, #2
 8003f12:	60da      	str	r2, [r3, #12]
      break;
 8003f14:	e01b      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0204 	orr.w	r2, r2, #4
 8003f24:	60da      	str	r2, [r3, #12]
      break;
 8003f26:	e012      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	60da      	str	r2, [r3, #12]
      break;
 8003f38:	e009      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0210 	orr.w	r2, r2, #16
 8003f48:	60da      	str	r2, [r3, #12]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003f4c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 ff3e 	bl	8004dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d107      	bne.n	8003f76 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_TIM_PWM_Start_IT+0x186>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d009      	beq.n	8003f9e <HAL_TIM_PWM_Start_IT+0x186>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_TIM_PWM_Start_IT+0x186>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d111      	bne.n	8003fc2 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d010      	beq.n	8003fd2 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	e007      	b.n	8003fd2 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800

08003fe8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d841      	bhi.n	800407c <HAL_TIM_PWM_Stop_IT+0x94>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_TIM_PWM_Stop_IT+0x18>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004035 	.word	0x08004035
 8004004:	0800407d 	.word	0x0800407d
 8004008:	0800407d 	.word	0x0800407d
 800400c:	0800407d 	.word	0x0800407d
 8004010:	08004047 	.word	0x08004047
 8004014:	0800407d 	.word	0x0800407d
 8004018:	0800407d 	.word	0x0800407d
 800401c:	0800407d 	.word	0x0800407d
 8004020:	08004059 	.word	0x08004059
 8004024:	0800407d 	.word	0x0800407d
 8004028:	0800407d 	.word	0x0800407d
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800406b 	.word	0x0800406b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0202 	bic.w	r2, r2, #2
 8004042:	60da      	str	r2, [r3, #12]
      break;
 8004044:	e01b      	b.n	800407e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0204 	bic.w	r2, r2, #4
 8004054:	60da      	str	r2, [r3, #12]
      break;
 8004056:	e012      	b.n	800407e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0208 	bic.w	r2, r2, #8
 8004066:	60da      	str	r2, [r3, #12]
      break;
 8004068:	e009      	b.n	800407e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0210 	bic.w	r2, r2, #16
 8004078:	60da      	str	r2, [r3, #12]
      break;
 800407a:	e000      	b.n	800407e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800407c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fea6 	bl	8004dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_TIM_PWM_Stop_IT+0x150>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d117      	bne.n	80040c6 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	f241 1311 	movw	r3, #4369	; 0x1111
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_TIM_PWM_Stop_IT+0xde>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	f240 4344 	movw	r3, #1092	; 0x444
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <HAL_TIM_PWM_Stop_IT+0xde>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_TIM_PWM_Stop_IT+0x10e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	f240 4344 	movw	r3, #1092	; 0x444
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_TIM_PWM_Stop_IT+0x10e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Stop_IT+0x11e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004104:	e013      	b.n	800412e <HAL_TIM_PWM_Stop_IT+0x146>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d104      	bne.n	8004116 <HAL_TIM_PWM_Stop_IT+0x12e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	e00b      	b.n	800412e <HAL_TIM_PWM_Stop_IT+0x146>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Stop_IT+0x13e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	e003      	b.n	800412e <HAL_TIM_PWM_Stop_IT+0x146>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40012c00 	.word	0x40012c00

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb09 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fcd2 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc fd25 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fadf 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fca8 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fc fcfb 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0208 	mvn.w	r2, #8
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2204      	movs	r2, #4
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fab5 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fc7e 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fc fcd1 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0210 	mvn.w	r2, #16
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2208      	movs	r2, #8
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa8b 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fc54 	bl	8000b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fc fca7 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa62 	bl	8004784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fe52 	bl	8004f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa48 	bl	80047a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b20      	cmp	r3, #32
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0220 	mvn.w	r2, #32
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fe1d 	bl	8004f7e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004362:	2302      	movs	r3, #2
 8004364:	e046      	b.n	80043f4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0c      	cmp	r3, #12
 8004372:	d839      	bhi.n	80043e8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043e9 	.word	0x080043e9
 8004384:	080043e9 	.word	0x080043e9
 8004388:	080043e9 	.word	0x080043e9
 800438c:	080043bf 	.word	0x080043bf
 8004390:	080043e9 	.word	0x080043e9
 8004394:	080043e9 	.word	0x080043e9
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043cd 	.word	0x080043cd
 80043a0:	080043e9 	.word	0x080043e9
 80043a4:	080043e9 	.word	0x080043e9
 80043a8:	080043e9 	.word	0x080043e9
 80043ac:	080043db 	.word	0x080043db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa62 	bl	8004880 <TIM_OC1_SetConfig>
      break;
 80043bc:	e015      	b.n	80043ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fac1 	bl	800494c <TIM_OC2_SetConfig>
      break;
 80043ca:	e00e      	b.n	80043ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb24 	bl	8004a20 <TIM_OC3_SetConfig>
      break;
 80043d8:	e007      	b.n	80043ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fb87 	bl	8004af4 <TIM_OC4_SetConfig>
      break;
 80043e6:	e000      	b.n	80043ea <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80043e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004412:	2302      	movs	r3, #2
 8004414:	e0ac      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b0c      	cmp	r3, #12
 8004422:	f200 809f 	bhi.w	8004564 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004461 	.word	0x08004461
 8004430:	08004565 	.word	0x08004565
 8004434:	08004565 	.word	0x08004565
 8004438:	08004565 	.word	0x08004565
 800443c:	080044a1 	.word	0x080044a1
 8004440:	08004565 	.word	0x08004565
 8004444:	08004565 	.word	0x08004565
 8004448:	08004565 	.word	0x08004565
 800444c:	080044e3 	.word	0x080044e3
 8004450:	08004565 	.word	0x08004565
 8004454:	08004565 	.word	0x08004565
 8004458:	08004565 	.word	0x08004565
 800445c:	08004523 	.word	0x08004523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa0a 	bl	8004880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	619a      	str	r2, [r3, #24]
      break;
 800449e:	e062      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fa50 	bl	800494c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	619a      	str	r2, [r3, #24]
      break;
 80044e0:	e041      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fa99 	bl	8004a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0208 	orr.w	r2, r2, #8
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0204 	bic.w	r2, r2, #4
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	61da      	str	r2, [r3, #28]
      break;
 8004520:	e021      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fae3 	bl	8004af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	021a      	lsls	r2, r3, #8
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	61da      	str	r2, [r3, #28]
      break;
 8004562:	e000      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e0b3      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x180>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c8:	d03e      	beq.n	8004648 <HAL_TIM_ConfigClockSource+0xd0>
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	f200 8087 	bhi.w	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	f000 8085 	beq.w	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d87f      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045e0:	2b70      	cmp	r3, #112	; 0x70
 80045e2:	d01a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xa2>
 80045e4:	2b70      	cmp	r3, #112	; 0x70
 80045e6:	d87b      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045e8:	2b60      	cmp	r3, #96	; 0x60
 80045ea:	d050      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x116>
 80045ec:	2b60      	cmp	r3, #96	; 0x60
 80045ee:	d877      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045f0:	2b50      	cmp	r3, #80	; 0x50
 80045f2:	d03c      	beq.n	800466e <HAL_TIM_ConfigClockSource+0xf6>
 80045f4:	2b50      	cmp	r3, #80	; 0x50
 80045f6:	d873      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d058      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x136>
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d86f      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d064      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d86b      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 8004608:	2b20      	cmp	r3, #32
 800460a:	d060      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d867      	bhi.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05c      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
 8004614:	2b10      	cmp	r3, #16
 8004616:	d05a      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004618:	e062      	b.n	80046e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f000 fbb6 	bl	8004d9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800463c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	609a      	str	r2, [r3, #8]
      break;
 8004646:	e04e      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f000 fb9f 	bl	8004d9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800466a:	609a      	str	r2, [r3, #8]
      break;
 800466c:	e03b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	f000 fb16 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2150      	movs	r1, #80	; 0x50
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fb6d 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 800468c:	e02b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	461a      	mov	r2, r3
 800469c:	f000 fb34 	bl	8004d08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2160      	movs	r1, #96	; 0x60
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb5d 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 80046ac:	e01b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 faf6 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2140      	movs	r1, #64	; 0x40
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fb4d 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 80046cc:	e00b      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fb44 	bl	8004d66 <TIM_ITRx_SetConfig>
        break;
 80046de:	e002      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046e0:	bf00      	nop
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e031      	b.n	800477c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa30 	bl	8004b90 <TIM_SlaveTimer_SetConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e018      	b.n	800477c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004758:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004768:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
	...

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a29      	ldr	r2, [pc, #164]	; (8004874 <TIM_Base_SetConfig+0xb8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00b      	beq.n	80047ec <TIM_Base_SetConfig+0x30>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047da:	d007      	beq.n	80047ec <TIM_Base_SetConfig+0x30>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a26      	ldr	r2, [pc, #152]	; (8004878 <TIM_Base_SetConfig+0xbc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <TIM_Base_SetConfig+0xc0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d108      	bne.n	80047fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <TIM_Base_SetConfig+0xb8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00b      	beq.n	800481e <TIM_Base_SetConfig+0x62>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d007      	beq.n	800481e <TIM_Base_SetConfig+0x62>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <TIM_Base_SetConfig+0xbc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <TIM_Base_SetConfig+0xc0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a07      	ldr	r2, [pc, #28]	; (8004874 <TIM_Base_SetConfig+0xb8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	615a      	str	r2, [r3, #20]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800

08004880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0201 	bic.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <TIM_OC1_SetConfig+0xc8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10c      	bne.n	80048f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0308 	bic.w	r3, r3, #8
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <TIM_OC1_SetConfig+0xc8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d111      	bne.n	8004922 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	621a      	str	r2, [r3, #32]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00

0800494c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0210 	bic.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0320 	bic.w	r3, r3, #32
 8004996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <TIM_OC2_SetConfig+0xd0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10d      	bne.n	80049c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <TIM_OC2_SetConfig+0xd0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d113      	bne.n	80049f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00

08004a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <TIM_OC3_SetConfig+0xd0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d10d      	bne.n	8004a9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <TIM_OC3_SetConfig+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d113      	bne.n	8004aca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00

08004af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <TIM_OC4_SetConfig+0x98>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d109      	bne.n	8004b68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	019b      	lsls	r3, r3, #6
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00

08004b90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0307 	bic.w	r3, r3, #7
 8004bba:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b70      	cmp	r3, #112	; 0x70
 8004bd4:	d01a      	beq.n	8004c0c <TIM_SlaveTimer_SetConfig+0x7c>
 8004bd6:	2b70      	cmp	r3, #112	; 0x70
 8004bd8:	d860      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
 8004bda:	2b60      	cmp	r3, #96	; 0x60
 8004bdc:	d054      	beq.n	8004c88 <TIM_SlaveTimer_SetConfig+0xf8>
 8004bde:	2b60      	cmp	r3, #96	; 0x60
 8004be0:	d85c      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
 8004be2:	2b50      	cmp	r3, #80	; 0x50
 8004be4:	d046      	beq.n	8004c74 <TIM_SlaveTimer_SetConfig+0xe4>
 8004be6:	2b50      	cmp	r3, #80	; 0x50
 8004be8:	d858      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d019      	beq.n	8004c22 <TIM_SlaveTimer_SetConfig+0x92>
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d854      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
 8004bf2:	2b30      	cmp	r3, #48	; 0x30
 8004bf4:	d054      	beq.n	8004ca0 <TIM_SlaveTimer_SetConfig+0x110>
 8004bf6:	2b30      	cmp	r3, #48	; 0x30
 8004bf8:	d850      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d050      	beq.n	8004ca0 <TIM_SlaveTimer_SetConfig+0x110>
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d84c      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d04c      	beq.n	8004ca0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d04a      	beq.n	8004ca0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004c0a:	e047      	b.n	8004c9c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68d9      	ldr	r1, [r3, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f000 f8bd 	bl	8004d9a <TIM_ETR_SetConfig>
      break;
 8004c20:	e03f      	b.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d101      	bne.n	8004c2e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e03a      	b.n	8004ca4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c54:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
      break;
 8004c72:	e016      	b.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f000 f813 	bl	8004cac <TIM_TI1_ConfigInputStage>
      break;
 8004c86:	e00c      	b.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6899      	ldr	r1, [r3, #8]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f000 f837 	bl	8004d08 <TIM_TI2_ConfigInputStage>
      break;
 8004c9a:	e002      	b.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004ca0:	bf00      	nop
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 030a 	bic.w	r3, r3, #10
 8004ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 0210 	bic.w	r2, r3, #16
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	031b      	lsls	r3, r3, #12
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	621a      	str	r2, [r3, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 0307 	orr.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
 8004da6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	021a      	lsls	r2, r3, #8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	609a      	str	r2, [r3, #8]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2201      	movs	r2, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e046      	b.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00e      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d009      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10c      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800

08004edc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e03d      	b.n	8004f74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	f107 0014 	add.w	r0, r7, #20
 8004fb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	b004      	add	sp, #16
 8004fc0:	4770      	bx	lr

08004fc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fd2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ff6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ffa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	b29b      	uxth	r3, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	b29b      	uxth	r3, r3
 800500c:	4013      	ands	r3, r2
 800500e:	b29a      	uxth	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800503a:	b084      	sub	sp, #16
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	f107 0014 	add.w	r0, r7, #20
 8005048:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	b004      	add	sp, #16
 8005078:	4770      	bx	lr
	...

0800507c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800507c:	b480      	push	{r7}
 800507e:	b09b      	sub	sp, #108	; 0x6c
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	78db      	ldrb	r3, [r3, #3]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d81f      	bhi.n	80050ee <USB_ActivateEndpoint+0x72>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <USB_ActivateEndpoint+0x38>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050f7 	.word	0x080050f7
 80050c0:	080050d3 	.word	0x080050d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050d0:	e012      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80050da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050de:	e00b      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050ec:	e004      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80050f4:	e000      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>
      break;
 80050f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005116:	b29b      	uxth	r3, r3
 8005118:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	b29a      	uxth	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	4313      	orrs	r3, r2
 800513a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	7b1b      	ldrb	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f040 8149 	bne.w	80053fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8084 	beq.w	800527c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4413      	add	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	88db      	ldrh	r3, [r3, #6]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	b29b      	uxth	r3, r3
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	81fb      	strh	r3, [r7, #14]
 80051b6:	89fb      	ldrh	r3, [r7, #14]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <USB_ActivateEndpoint+0x17c>
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	81bb      	strh	r3, [r7, #12]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	89bb      	ldrh	r3, [r7, #12]
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	78db      	ldrb	r3, [r3, #3]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d020      	beq.n	8005242 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005216:	813b      	strh	r3, [r7, #8]
 8005218:	893b      	ldrh	r3, [r7, #8]
 800521a:	f083 0320 	eor.w	r3, r3, #32
 800521e:	813b      	strh	r3, [r7, #8]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	893b      	ldrh	r3, [r7, #8]
 800522c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]
 8005240:	e27f      	b.n	8005742 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005258:	817b      	strh	r3, [r7, #10]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]
 800527a:	e262      	b.n	8005742 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	4413      	add	r3, r2
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	4413      	add	r3, r2
 800529a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	88db      	ldrh	r3, [r3, #6]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	4413      	add	r3, r2
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052d2:	623b      	str	r3, [r7, #32]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d112      	bne.n	8005302 <USB_ActivateEndpoint+0x286>
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e02f      	b.n	8005362 <USB_ActivateEndpoint+0x2e6>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b3e      	cmp	r3, #62	; 0x3e
 8005308:	d813      	bhi.n	8005332 <USB_ActivateEndpoint+0x2b6>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	663b      	str	r3, [r7, #96]	; 0x60
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <USB_ActivateEndpoint+0x2a8>
 800531e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005320:	3301      	adds	r3, #1
 8005322:	663b      	str	r3, [r7, #96]	; 0x60
 8005324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	b29a      	uxth	r2, r3
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	e017      	b.n	8005362 <USB_ActivateEndpoint+0x2e6>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	663b      	str	r3, [r7, #96]	; 0x60
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <USB_ActivateEndpoint+0x2d0>
 8005346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005348:	3b01      	subs	r3, #1
 800534a:	663b      	str	r3, [r7, #96]	; 0x60
 800534c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29b      	uxth	r3, r3
 8005354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535c:	b29a      	uxth	r2, r3
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	83fb      	strh	r3, [r7, #30]
 8005370:	8bfb      	ldrh	r3, [r7, #30]
 8005372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01b      	beq.n	80053b2 <USB_ActivateEndpoint+0x336>
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	83bb      	strh	r3, [r7, #28]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	8bbb      	ldrh	r3, [r7, #28]
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c8:	837b      	strh	r3, [r7, #26]
 80053ca:	8b7b      	ldrh	r3, [r7, #26]
 80053cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053d0:	837b      	strh	r3, [r7, #26]
 80053d2:	8b7b      	ldrh	r3, [r7, #26]
 80053d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053d8:	837b      	strh	r3, [r7, #26]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	8b7b      	ldrh	r3, [r7, #26]
 80053e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]
 80053fa:	e1a2      	b.n	8005742 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	b29b      	uxth	r3, r3
 8005436:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	65bb      	str	r3, [r7, #88]	; 0x58
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005448:	4413      	add	r3, r2
 800544a:	65bb      	str	r3, [r7, #88]	; 0x58
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	011a      	lsls	r2, r3, #4
 8005452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005454:	4413      	add	r3, r2
 8005456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545a:	657b      	str	r3, [r7, #84]	; 0x54
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	891b      	ldrh	r3, [r3, #8]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547c:	4413      	add	r3, r2
 800547e:	653b      	str	r3, [r7, #80]	; 0x50
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	011a      	lsls	r2, r3, #4
 8005486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005488:	4413      	add	r3, r2
 800548a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	895b      	ldrh	r3, [r3, #10]
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 8091 	bne.w	80055cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80054b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01b      	beq.n	80054fa <USB_ActivateEndpoint+0x47e>
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	873b      	strh	r3, [r7, #56]	; 0x38
 8005508:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01b      	beq.n	800554a <USB_ActivateEndpoint+0x4ce>
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	86fb      	strh	r3, [r7, #54]	; 0x36
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005562:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005564:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005568:	86bb      	strh	r3, [r7, #52]	; 0x34
 800556a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800556c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005570:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
 80055ca:	e0ba      	b.n	8005742 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80055dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01d      	beq.n	8005624 <USB_ActivateEndpoint+0x5a8>
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	b29b      	uxth	r3, r3
 8005622:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005634:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01d      	beq.n	800567c <USB_ActivateEndpoint+0x600>
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	441a      	add	r2, r3
 8005664:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	78db      	ldrb	r3, [r3, #3]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d024      	beq.n	80056ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800569e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056a2:	f083 0320 	eor.w	r3, r3, #32
 80056a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8013      	strh	r3, [r2, #0]
 80056cc:	e01d      	b.n	800570a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	b29b      	uxth	r3, r3
 8005708:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800572e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573e:	b29b      	uxth	r3, r3
 8005740:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005746:	4618      	mov	r0, r3
 8005748:	376c      	adds	r7, #108	; 0x6c
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005750:	b480      	push	{r7}
 8005752:	b08d      	sub	sp, #52	; 0x34
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	7b1b      	ldrb	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 808e 	bne.w	8005880 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d044      	beq.n	80057f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	81bb      	strh	r3, [r7, #12]
 800577a:	89bb      	ldrh	r3, [r7, #12]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <USB_DeactivateEndpoint+0x6c>
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	817b      	strh	r3, [r7, #10]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	897b      	ldrh	r3, [r7, #10]
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d2:	813b      	strh	r3, [r7, #8]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	8013      	strh	r3, [r2, #0]
 80057f4:	e192      	b.n	8005b1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	827b      	strh	r3, [r7, #18]
 8005804:	8a7b      	ldrh	r3, [r7, #18]
 8005806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01b      	beq.n	8005846 <USB_DeactivateEndpoint+0xf6>
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005824:	823b      	strh	r3, [r7, #16]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	8a3b      	ldrh	r3, [r7, #16]
 8005832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	81fb      	strh	r3, [r7, #14]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	441a      	add	r2, r3
 8005868:	89fb      	ldrh	r3, [r7, #14]
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]
 800587e:	e14d      	b.n	8005b1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 80a5 	bne.w	80059d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	843b      	strh	r3, [r7, #32]
 8005898:	8c3b      	ldrh	r3, [r7, #32]
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01b      	beq.n	80058da <USB_DeactivateEndpoint+0x18a>
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	83fb      	strh	r3, [r7, #30]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	83bb      	strh	r3, [r7, #28]
 80058e8:	8bbb      	ldrh	r3, [r7, #28]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01b      	beq.n	800592a <USB_DeactivateEndpoint+0x1da>
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	837b      	strh	r3, [r7, #26]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8b7b      	ldrh	r3, [r7, #26]
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	833b      	strh	r3, [r7, #24]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8b3b      	ldrh	r3, [r7, #24]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	82fb      	strh	r3, [r7, #22]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	8afb      	ldrh	r3, [r7, #22]
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	82bb      	strh	r3, [r7, #20]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	441a      	add	r2, r3
 80059bc:	8abb      	ldrh	r3, [r7, #20]
 80059be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	8013      	strh	r3, [r2, #0]
 80059d2:	e0a3      	b.n	8005b1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <USB_DeactivateEndpoint+0x2d4>
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <USB_DeactivateEndpoint+0x324>
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	441a      	add	r2, r3
 8005a96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	847b      	strh	r3, [r7, #34]	; 0x22
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	441a      	add	r2, r3
 8005b06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3734      	adds	r7, #52	; 0x34
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b0cc      	sub	sp, #304	; 0x130
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b36:	6018      	str	r0, [r3, #0]
 8005b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b40:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f041 817d 	bne.w	8006e4e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d908      	bls.n	8005b82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005b80:	e007      	b.n	8005b92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	7b1b      	ldrb	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d152      	bne.n	8005c48 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6959      	ldr	r1, [r3, #20]
 8005bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	88da      	ldrh	r2, [r3, #6]
 8005bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bc4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bc8:	6800      	ldr	r0, [r0, #0]
 8005bca:	f001 ff23 	bl	8007a14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005bd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bda:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005bfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c00:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	440a      	add	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	f001 b8b5 	b.w	8006db2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	f040 84c6 	bne.w	80065e6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	f240 8443 	bls.w	80064fe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 823e 	beq.w	8006196 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d26:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 809a 	bne.w	8005e74 <USB_EPStartXfer+0x34c>
 8005d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d72:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	440a      	add	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	011a      	lsls	r2, r3, #4
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d122      	bne.n	8005df2 <USB_EPStartXfer+0x2ca>
 8005dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e079      	b.n	8005ee6 <USB_EPStartXfer+0x3be>
 8005df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df6:	2b3e      	cmp	r3, #62	; 0x3e
 8005df8:	d81b      	bhi.n	8005e32 <USB_EPStartXfer+0x30a>
 8005dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <USB_EPStartXfer+0x2f2>
 8005e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e14:	3301      	adds	r3, #1
 8005e16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e059      	b.n	8005ee6 <USB_EPStartXfer+0x3be>
 8005e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <USB_EPStartXfer+0x32a>
 8005e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	029b      	lsls	r3, r3, #10
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e038      	b.n	8005ee6 <USB_EPStartXfer+0x3be>
 8005e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d130      	bne.n	8005ee6 <USB_EPStartXfer+0x3be>
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ea2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	895b      	ldrh	r3, [r3, #10]
 8005ef2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6959      	ldr	r1, [r3, #20]
 8005f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f0c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f10:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f14:	6800      	ldr	r0, [r0, #0]
 8005f16:	f001 fd7d 	bl	8007a14 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2a:	441a      	add	r2, r3
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d90f      	bls.n	8005f74 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	621a      	str	r2, [r3, #32]
 8005f72:	e00e      	b.n	8005f92 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 809a 	bne.w	80060d8 <USB_EPStartXfer+0x5b0>
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005fac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fb0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fd6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	440a      	add	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	011a      	lsls	r2, r3, #4
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006002:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d122      	bne.n	8006056 <USB_EPStartXfer+0x52e>
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006022:	b29a      	uxth	r2, r3
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e083      	b.n	800615e <USB_EPStartXfer+0x636>
 8006056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605a:	2b3e      	cmp	r3, #62	; 0x3e
 800605c:	d81b      	bhi.n	8006096 <USB_EPStartXfer+0x56e>
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <USB_EPStartXfer+0x556>
 8006074:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006078:	3301      	adds	r3, #1
 800607a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800607e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006082:	b29b      	uxth	r3, r3
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	b29a      	uxth	r2, r3
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	e063      	b.n	800615e <USB_EPStartXfer+0x636>
 8006096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <USB_EPStartXfer+0x58e>
 80060ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060b0:	3b01      	subs	r3, #1
 80060b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	b29b      	uxth	r3, r3
 80060c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	e042      	b.n	800615e <USB_EPStartXfer+0x636>
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d13a      	bne.n	800615e <USB_EPStartXfer+0x636>
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610a:	b29b      	uxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006116:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800611a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	440a      	add	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	011a      	lsls	r2, r3, #4
 8006132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006136:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4413      	add	r3, r2
 800613e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006146:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006150:	b29a      	uxth	r2, r3
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	891b      	ldrh	r3, [r3, #8]
 800616a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6959      	ldr	r1, [r3, #20]
 800617a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617e:	b29b      	uxth	r3, r3
 8006180:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006184:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006188:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800618c:	6800      	ldr	r0, [r0, #0]
 800618e:	f001 fc41 	bl	8007a14 <USB_WritePMA>
 8006192:	f000 be0e 	b.w	8006db2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d16d      	bne.n	8006282 <USB_EPStartXfer+0x75a>
 80061a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c6:	4413      	add	r3, r2
 80061c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	011a      	lsls	r2, r3, #4
 80061d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061da:	4413      	add	r3, r2
 80061dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e0:	647b      	str	r3, [r7, #68]	; 0x44
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d112      	bne.n	8006210 <USB_EPStartXfer+0x6e8>
 80061ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006208:	b29a      	uxth	r2, r3
 800620a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e063      	b.n	80062d8 <USB_EPStartXfer+0x7b0>
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	2b3e      	cmp	r3, #62	; 0x3e
 8006216:	d817      	bhi.n	8006248 <USB_EPStartXfer+0x720>
 8006218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <USB_EPStartXfer+0x710>
 800622e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006232:	3301      	adds	r3, #1
 8006234:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006238:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29a      	uxth	r2, r3
 8006242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e047      	b.n	80062d8 <USB_EPStartXfer+0x7b0>
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <USB_EPStartXfer+0x740>
 800625e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006262:	3b01      	subs	r3, #1
 8006264:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006268:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800626c:	b29b      	uxth	r3, r3
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627a:	b29a      	uxth	r2, r3
 800627c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e02a      	b.n	80062d8 <USB_EPStartXfer+0x7b0>
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d122      	bne.n	80062d8 <USB_EPStartXfer+0x7b0>
 8006292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	653b      	str	r3, [r7, #80]	; 0x50
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b2:	4413      	add	r3, r2
 80062b4:	653b      	str	r3, [r7, #80]	; 0x50
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	891b      	ldrh	r3, [r3, #8]
 80062e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6959      	ldr	r1, [r3, #20]
 80062f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006302:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	f001 fb84 	bl	8007a14 <USB_WritePMA>
            ep->xfer_buff += len;
 800630c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631c:	441a      	add	r2, r3
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d90f      	bls.n	8006366 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	621a      	str	r2, [r3, #32]
 8006364:	e00e      	b.n	8006384 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2200      	movs	r2, #0
 8006382:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	643b      	str	r3, [r7, #64]	; 0x40
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d16d      	bne.n	800647c <USB_EPStartXfer+0x954>
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	4413      	add	r3, r2
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	011a      	lsls	r2, r3, #4
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	4413      	add	r3, r2
 80063d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
 80063dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d112      	bne.n	800640a <USB_EPStartXfer+0x8e2>
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006402:	b29a      	uxth	r2, r3
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e05d      	b.n	80064c6 <USB_EPStartXfer+0x99e>
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	2b3e      	cmp	r3, #62	; 0x3e
 8006410:	d817      	bhi.n	8006442 <USB_EPStartXfer+0x91a>
 8006412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <USB_EPStartXfer+0x90a>
 8006428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800642c:	3301      	adds	r3, #1
 800642e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29a      	uxth	r2, r3
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e041      	b.n	80064c6 <USB_EPStartXfer+0x99e>
 8006442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800644c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <USB_EPStartXfer+0x93a>
 8006458:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800645c:	3b01      	subs	r3, #1
 800645e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006474:	b29a      	uxth	r2, r3
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e024      	b.n	80064c6 <USB_EPStartXfer+0x99e>
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d11c      	bne.n	80064c6 <USB_EPStartXfer+0x99e>
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649a:	b29b      	uxth	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a0:	4413      	add	r3, r2
 80064a2:	643b      	str	r3, [r7, #64]	; 0x40
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	011a      	lsls	r2, r3, #4
 80064b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b4:	4413      	add	r3, r2
 80064b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	895b      	ldrh	r3, [r3, #10]
 80064d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6959      	ldr	r1, [r3, #20]
 80064e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064f4:	6800      	ldr	r0, [r0, #0]
 80064f6:	f001 fa8d 	bl	8007a14 <USB_WritePMA>
 80064fa:	f000 bc5a 	b.w	8006db2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658a:	4413      	add	r3, r2
 800658c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800659e:	4413      	add	r3, r2
 80065a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	891b      	ldrh	r3, [r3, #8]
 80065bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6959      	ldr	r1, [r3, #20]
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065de:	6800      	ldr	r0, [r0, #0]
 80065e0:	f001 fa18 	bl	8007a14 <USB_WritePMA>
 80065e4:	e3e5      	b.n	8006db2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80065e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 81bc 	beq.w	8006a00 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	785b      	ldrb	r3, [r3, #1]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d16d      	bne.n	8006782 <USB_EPStartXfer+0xc5a>
 80066a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066c6:	4413      	add	r3, r2
 80066c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	011a      	lsls	r2, r3, #4
 80066d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066da:	4413      	add	r3, r2
 80066dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e0:	677b      	str	r3, [r7, #116]	; 0x74
 80066e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d112      	bne.n	8006710 <USB_EPStartXfer+0xbe8>
 80066ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006708:	b29a      	uxth	r2, r3
 800670a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	e060      	b.n	80067d2 <USB_EPStartXfer+0xcaa>
 8006710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006714:	2b3e      	cmp	r3, #62	; 0x3e
 8006716:	d817      	bhi.n	8006748 <USB_EPStartXfer+0xc20>
 8006718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0xc10>
 800672e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006738:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800673c:	b29b      	uxth	r3, r3
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	b29a      	uxth	r2, r3
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e044      	b.n	80067d2 <USB_EPStartXfer+0xcaa>
 8006748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <USB_EPStartXfer+0xc40>
 800675e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006762:	3b01      	subs	r3, #1
 8006764:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006768:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800676c:	b29b      	uxth	r3, r3
 800676e:	029b      	lsls	r3, r3, #10
 8006770:	b29b      	uxth	r3, r3
 8006772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677a:	b29a      	uxth	r2, r3
 800677c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e027      	b.n	80067d2 <USB_EPStartXfer+0xcaa>
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d11f      	bne.n	80067d2 <USB_EPStartXfer+0xcaa>
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a8:	4413      	add	r3, r2
 80067aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	011a      	lsls	r2, r3, #4
 80067bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80067d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	895b      	ldrh	r3, [r3, #10]
 80067de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6959      	ldr	r1, [r3, #20]
 80067ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006800:	6800      	ldr	r0, [r0, #0]
 8006802:	f001 f907 	bl	8007a14 <USB_WritePMA>
          ep->xfer_buff += len;
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695a      	ldr	r2, [r3, #20]
 8006812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006816:	441a      	add	r2, r3
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6a1a      	ldr	r2, [r3, #32]
 8006830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	429a      	cmp	r2, r3
 800683e:	d90f      	bls.n	8006860 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006850:	1ad2      	subs	r2, r2, r3
 8006852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	621a      	str	r2, [r3, #32]
 800685e:	e00e      	b.n	800687e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800687e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8295 	beq.w	8006db2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d16d      	bne.n	8006974 <USB_EPStartXfer+0xe4c>
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068b8:	4413      	add	r3, r2
 80068ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	011a      	lsls	r2, r3, #4
 80068ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068d2:	667b      	str	r3, [r7, #100]	; 0x64
 80068d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d112      	bne.n	8006902 <USB_EPStartXfer+0xdda>
 80068dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	e063      	b.n	80069ca <USB_EPStartXfer+0xea2>
 8006902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006906:	2b3e      	cmp	r3, #62	; 0x3e
 8006908:	d817      	bhi.n	800693a <USB_EPStartXfer+0xe12>
 800690a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <USB_EPStartXfer+0xe02>
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29a      	uxth	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e047      	b.n	80069ca <USB_EPStartXfer+0xea2>
 800693a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <USB_EPStartXfer+0xe32>
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006954:	3b01      	subs	r3, #1
 8006956:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695e:	b29b      	uxth	r3, r3
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696c:	b29a      	uxth	r2, r3
 800696e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	e02a      	b.n	80069ca <USB_EPStartXfer+0xea2>
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d122      	bne.n	80069ca <USB_EPStartXfer+0xea2>
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	673b      	str	r3, [r7, #112]	; 0x70
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a4:	4413      	add	r3, r2
 80069a6:	673b      	str	r3, [r7, #112]	; 0x70
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	891b      	ldrh	r3, [r3, #8]
 80069d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6959      	ldr	r1, [r3, #20]
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069f8:	6800      	ldr	r0, [r0, #0]
 80069fa:	f001 f80b 	bl	8007a14 <USB_WritePMA>
 80069fe:	e1d8      	b.n	8006db2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d178      	bne.n	8006b02 <USB_EPStartXfer+0xfda>
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a34:	4413      	add	r3, r2
 8006a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	011a      	lsls	r2, r3, #4
 8006a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d116      	bne.n	8006a8c <USB_EPStartXfer+0xf64>
 8006a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a88:	801a      	strh	r2, [r3, #0]
 8006a8a:	e06b      	b.n	8006b64 <USB_EPStartXfer+0x103c>
 8006a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a90:	2b3e      	cmp	r3, #62	; 0x3e
 8006a92:	d818      	bhi.n	8006ac6 <USB_EPStartXfer+0xf9e>
 8006a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <USB_EPStartXfer+0xf8c>
 8006aaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ab4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	e04e      	b.n	8006b64 <USB_EPStartXfer+0x103c>
 8006ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USB_EPStartXfer+0xfbe>
 8006adc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e030      	b.n	8006b64 <USB_EPStartXfer+0x103c>
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d128      	bne.n	8006b64 <USB_EPStartXfer+0x103c>
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b36:	4413      	add	r3, r2
 8006b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	011a      	lsls	r2, r3, #4
 8006b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b4e:	4413      	add	r3, r2
 8006b50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	891b      	ldrh	r3, [r3, #8]
 8006b70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6959      	ldr	r1, [r3, #20]
 8006b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b8a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b8e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	f000 ff3e 	bl	8007a14 <USB_WritePMA>
          ep->xfer_buff += len;
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba8:	441a      	add	r2, r3
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d90f      	bls.n	8006bf2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	621a      	str	r2, [r3, #32]
 8006bf0:	e00e      	b.n	8006c10 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80cc 	beq.w	8006db2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d178      	bne.n	8006d2a <USB_EPStartXfer+0x1202>
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	011a      	lsls	r2, r3, #4
 8006c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d116      	bne.n	8006cb4 <USB_EPStartXfer+0x118c>
 8006c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	e064      	b.n	8006d7e <USB_EPStartXfer+0x1256>
 8006cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cba:	d818      	bhi.n	8006cee <USB_EPStartXfer+0x11c6>
 8006cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <USB_EPStartXfer+0x11b4>
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	029b      	lsls	r3, r3, #10
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	e047      	b.n	8006d7e <USB_EPStartXfer+0x1256>
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <USB_EPStartXfer+0x11e6>
 8006d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	029b      	lsls	r3, r3, #10
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	e029      	b.n	8006d7e <USB_EPStartXfer+0x1256>
 8006d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d121      	bne.n	8006d7e <USB_EPStartXfer+0x1256>
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d50:	4413      	add	r3, r2
 8006d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	011a      	lsls	r2, r3, #4
 8006d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	895b      	ldrh	r3, [r3, #10]
 8006d8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6959      	ldr	r1, [r3, #20]
 8006d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006da4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006da8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dac:	6800      	ldr	r0, [r0, #0]
 8006dae:	f000 fe31 	bl	8007a14 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dd4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006dea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006df2:	8812      	ldrh	r2, [r2, #0]
 8006df4:	f082 0210 	eor.w	r2, r2, #16
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006e02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e06:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e0a:	8812      	ldrh	r2, [r2, #0]
 8006e0c:	f082 0220 	eor.w	r2, r2, #32
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
 8006e4a:	f000 bc9f 	b.w	800778c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	7b1b      	ldrb	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 80ae 	bne.w	8006fbc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d917      	bls.n	8006eac <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9c:	1ad2      	subs	r2, r2, r3
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	619a      	str	r2, [r3, #24]
 8006eaa:	e00e      	b.n	8006eca <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006eee:	4413      	add	r3, r2
 8006ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f06:	4413      	add	r3, r2
 8006f08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d116      	bne.n	8006f46 <USB_EPStartXfer+0x141e>
 8006f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	e3e8      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4c:	d818      	bhi.n	8006f80 <USB_EPStartXfer+0x1458>
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <USB_EPStartXfer+0x1446>
 8006f64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	029b      	lsls	r3, r3, #10
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	e3cb      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
 8006f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <USB_EPStartXfer+0x1478>
 8006f96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	e3ad      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	78db      	ldrb	r3, [r3, #3]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f040 8200 	bne.w	80073ce <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 8091 	bne.w	8007102 <USB_EPStartXfer+0x15da>
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007004:	4413      	add	r3, r2
 8007006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	011a      	lsls	r2, r3, #4
 8007018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800701c:	4413      	add	r3, r2
 800701e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <USB_EPStartXfer+0x153c>
 8007036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e083      	b.n	800716c <USB_EPStartXfer+0x1644>
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b3e      	cmp	r3, #62	; 0x3e
 8007072:	d820      	bhi.n	80070b6 <USB_EPStartXfer+0x158e>
 8007074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <USB_EPStartXfer+0x157c>
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	3301      	adds	r3, #1
 80070a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	029b      	lsls	r3, r3, #10
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	e05a      	b.n	800716c <USB_EPStartXfer+0x1644>
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <USB_EPStartXfer+0x15be>
 80070dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e0:	3b01      	subs	r3, #1
 80070e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	029b      	lsls	r3, r3, #10
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	e034      	b.n	800716c <USB_EPStartXfer+0x1644>
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d12c      	bne.n	800716c <USB_EPStartXfer+0x1644>
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007136:	4413      	add	r3, r2
 8007138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800713c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	011a      	lsls	r2, r3, #4
 800714a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800714e:	4413      	add	r3, r2
 8007150:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800717a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 8091 	bne.w	80072ae <USB_EPStartXfer+0x1786>
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071b0:	4413      	add	r3, r2
 80071b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	011a      	lsls	r2, r3, #4
 80071c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071c8:	4413      	add	r3, r2
 80071ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d116      	bne.n	8007210 <USB_EPStartXfer+0x16e8>
 80071e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007206:	b29a      	uxth	r2, r3
 8007208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e07c      	b.n	800730a <USB_EPStartXfer+0x17e2>
 8007210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b3e      	cmp	r3, #62	; 0x3e
 800721e:	d820      	bhi.n	8007262 <USB_EPStartXfer+0x173a>
 8007220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <USB_EPStartXfer+0x1728>
 8007246:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800724a:	3301      	adds	r3, #1
 800724c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007250:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007254:	b29b      	uxth	r3, r3
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e053      	b.n	800730a <USB_EPStartXfer+0x17e2>
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USB_EPStartXfer+0x176a>
 8007288:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800728c:	3b01      	subs	r3, #1
 800728e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007292:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007296:	b29b      	uxth	r3, r3
 8007298:	029b      	lsls	r3, r3, #10
 800729a:	b29b      	uxth	r3, r3
 800729c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	e02d      	b.n	800730a <USB_EPStartXfer+0x17e2>
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	785b      	ldrb	r3, [r3, #1]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d125      	bne.n	800730a <USB_EPStartXfer+0x17e2>
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072d4:	4413      	add	r3, r2
 80072d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	011a      	lsls	r2, r3, #4
 80072e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	b29a      	uxth	r2, r3
 8007304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007308:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 81fe 	beq.w	8007718 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800733c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <USB_EPStartXfer+0x182c>
 8007348:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800734c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10d      	bne.n	8007370 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007354:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800735c:	2b00      	cmp	r3, #0
 800735e:	f040 81db 	bne.w	8007718 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007362:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 81d4 	bne.w	8007718 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007396:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	441a      	add	r2, r3
 80073b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80073b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	8013      	strh	r3, [r2, #0]
 80073cc:	e1a4      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	78db      	ldrb	r3, [r3, #3]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	f040 819a 	bne.w	8007714 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d917      	bls.n	800742c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741c:	1ad2      	subs	r2, r2, r3
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	619a      	str	r2, [r3, #24]
 800742a:	e00e      	b.n	800744a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2200      	movs	r2, #0
 8007448:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800744a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d178      	bne.n	800754c <USB_EPStartXfer+0x1a24>
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800747e:	4413      	add	r3, r2
 8007480:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	011a      	lsls	r2, r3, #4
 8007492:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007496:	4413      	add	r3, r2
 8007498:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800749c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <USB_EPStartXfer+0x19ae>
 80074a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e06b      	b.n	80075ae <USB_EPStartXfer+0x1a86>
 80074d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074da:	2b3e      	cmp	r3, #62	; 0x3e
 80074dc:	d818      	bhi.n	8007510 <USB_EPStartXfer+0x19e8>
 80074de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <USB_EPStartXfer+0x19d6>
 80074f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f8:	3301      	adds	r3, #1
 80074fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007502:	b29b      	uxth	r3, r3
 8007504:	029b      	lsls	r3, r3, #10
 8007506:	b29a      	uxth	r2, r3
 8007508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	e04e      	b.n	80075ae <USB_EPStartXfer+0x1a86>
 8007510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800751a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <USB_EPStartXfer+0x1a08>
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752a:	3b01      	subs	r3, #1
 800752c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007534:	b29b      	uxth	r3, r3
 8007536:	029b      	lsls	r3, r3, #10
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	e030      	b.n	80075ae <USB_EPStartXfer+0x1a86>
 800754c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d128      	bne.n	80075ae <USB_EPStartXfer+0x1a86>
 800755c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007578:	b29b      	uxth	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	4413      	add	r3, r2
 8007582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	011a      	lsls	r2, r3, #4
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	4413      	add	r3, r2
 800759a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800759e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075ac:	801a      	strh	r2, [r3, #0]
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d178      	bne.n	80076be <USB_EPStartXfer+0x1b96>
 80075cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f0:	4413      	add	r3, r2
 80075f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	011a      	lsls	r2, r3, #4
 8007604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007608:	4413      	add	r3, r2
 800760a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800760e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d116      	bne.n	8007648 <USB_EPStartXfer+0x1b20>
 800761a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007626:	b29a      	uxth	r2, r3
 8007628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e067      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
 8007648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764c:	2b3e      	cmp	r3, #62	; 0x3e
 800764e:	d818      	bhi.n	8007682 <USB_EPStartXfer+0x1b5a>
 8007650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800765a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <USB_EPStartXfer+0x1b48>
 8007666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800766a:	3301      	adds	r3, #1
 800766c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007670:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007674:	b29b      	uxth	r3, r3
 8007676:	029b      	lsls	r3, r3, #10
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e04a      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
 8007682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800768c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USB_EPStartXfer+0x1b7a>
 8007698:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800769c:	3b01      	subs	r3, #1
 800769e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	029b      	lsls	r3, r3, #10
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	e02c      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d124      	bne.n	8007718 <USB_EPStartXfer+0x1bf0>
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e4:	4413      	add	r3, r2
 80076e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	011a      	lsls	r2, r3, #4
 80076f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fc:	4413      	add	r3, r2
 80076fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770a:	b29a      	uxth	r2, r3
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	e001      	b.n	8007718 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e03a      	b.n	800778e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007742:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007746:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800774a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800774e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007756:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d020      	beq.n	80077ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c0:	81bb      	strh	r3, [r7, #12]
 80077c2:	89bb      	ldrh	r3, [r7, #12]
 80077c4:	f083 0310 	eor.w	r3, r3, #16
 80077c8:	81bb      	strh	r3, [r7, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	441a      	add	r2, r3
 80077d4:	89bb      	ldrh	r3, [r7, #12]
 80077d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	8013      	strh	r3, [r2, #0]
 80077ea:	e01f      	b.n	800782c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	81fb      	strh	r3, [r7, #14]
 8007804:	89fb      	ldrh	r3, [r7, #14]
 8007806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800780a:	81fb      	strh	r3, [r7, #14]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	441a      	add	r2, r3
 8007816:	89fb      	ldrh	r3, [r7, #14]
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	7b1b      	ldrb	r3, [r3, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 809d 	bne.w	8007986 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d04c      	beq.n	80078ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	823b      	strh	r3, [r7, #16]
 8007862:	8a3b      	ldrh	r3, [r7, #16]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01b      	beq.n	80078a4 <USB_EPClearStall+0x6c>
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	81fb      	strh	r3, [r7, #14]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	89fb      	ldrh	r3, [r7, #14]
 8007890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d06c      	beq.n	8007986 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c2:	81bb      	strh	r3, [r7, #12]
 80078c4:	89bb      	ldrh	r3, [r7, #12]
 80078c6:	f083 0320 	eor.w	r3, r3, #32
 80078ca:	81bb      	strh	r3, [r7, #12]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	441a      	add	r2, r3
 80078d6:	89bb      	ldrh	r3, [r7, #12]
 80078d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	8013      	strh	r3, [r2, #0]
 80078ec:	e04b      	b.n	8007986 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	82fb      	strh	r3, [r7, #22]
 80078fc:	8afb      	ldrh	r3, [r7, #22]
 80078fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01b      	beq.n	800793e <USB_EPClearStall+0x106>
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791c:	82bb      	strh	r3, [r7, #20]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	8abb      	ldrh	r3, [r7, #20]
 800792a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793a:	b29b      	uxth	r3, r3
 800793c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007954:	827b      	strh	r3, [r7, #18]
 8007956:	8a7b      	ldrh	r3, [r7, #18]
 8007958:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800795c:	827b      	strh	r3, [r7, #18]
 800795e:	8a7b      	ldrh	r3, [r7, #18]
 8007960:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007964:	827b      	strh	r3, [r7, #18]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	441a      	add	r2, r3
 8007970:	8a7b      	ldrh	r3, [r7, #18]
 8007972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800797e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007982:	b29b      	uxth	r3, r3
 8007984:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr

08007992 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr

080079cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr

080079e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr

08007a14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b08d      	sub	sp, #52	; 0x34
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	460b      	mov	r3, r1
 8007a24:	80fb      	strh	r3, [r7, #6]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a2a:	88bb      	ldrh	r3, [r7, #4]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	005a      	lsls	r2, r3, #1
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4c:	e01e      	b.n	8007a8c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	3301      	adds	r3, #1
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	3302      	adds	r3, #2
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	3301      	adds	r3, #1
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1dd      	bne.n	8007a4e <USB_WritePMA+0x3a>
  }
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	3734      	adds	r7, #52	; 0x34
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b08b      	sub	sp, #44	; 0x2c
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	460b      	mov	r3, r1
 8007aae:	80fb      	strh	r3, [r7, #6]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ab4:	88bb      	ldrh	r3, [r7, #4]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	005a      	lsls	r2, r3, #1
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad6:	e01b      	b.n	8007b10 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	3301      	adds	r3, #1
 8007af2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3301      	adds	r3, #1
 8007b02:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	3302      	adds	r3, #2
 8007b08:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e0      	bne.n	8007ad8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	701a      	strb	r2, [r3, #0]
  }
}
 8007b32:	bf00      	nop
 8007b34:	372c      	adds	r7, #44	; 0x2c
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7c1b      	ldrb	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d115      	bne.n	8007b80 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b58:	2202      	movs	r2, #2
 8007b5a:	2181      	movs	r1, #129	; 0x81
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 fe8c 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	2101      	movs	r1, #1
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fe82 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007b7e:	e012      	b.n	8007ba6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b80:	2340      	movs	r3, #64	; 0x40
 8007b82:	2202      	movs	r2, #2
 8007b84:	2181      	movs	r1, #129	; 0x81
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 fe77 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b92:	2340      	movs	r3, #64	; 0x40
 8007b94:	2202      	movs	r2, #2
 8007b96:	2101      	movs	r1, #1
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fe6e 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	2203      	movs	r2, #3
 8007baa:	2182      	movs	r1, #130	; 0x82
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 fe64 	bl	800987a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bbc:	f001 ff84 	bl	8009ac8 <USBD_static_malloc>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	e026      	b.n	8007c26 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bde:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7c1b      	ldrb	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 ff24 	bl	8009a5c <USBD_LL_PrepareReceive>
 8007c14:	e007      	b.n	8007c26 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c1c:	2340      	movs	r3, #64	; 0x40
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 ff1b 	bl	8009a5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c40:	2181      	movs	r1, #129	; 0x81
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fe3f 	bl	80098c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c4e:	2101      	movs	r1, #1
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fe38 	bl	80098c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c5e:	2182      	movs	r1, #130	; 0x82
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fe30 	bl	80098c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00e      	beq.n	8007c94 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 ff2a 	bl	8009ae0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d039      	beq.n	8007d3c <USBD_CDC_Setup+0x9e>
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d17f      	bne.n	8007dcc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	88db      	ldrh	r3, [r3, #6]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d029      	beq.n	8007d28 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b25b      	sxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da11      	bge.n	8007d02 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007cea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	88d2      	ldrh	r2, [r2, #6]
 8007cf0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007cf2:	6939      	ldr	r1, [r7, #16]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	88db      	ldrh	r3, [r3, #6]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 fa09 	bl	8009112 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d00:	e06b      	b.n	8007dda <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	785a      	ldrb	r2, [r3, #1]
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	88db      	ldrh	r3, [r3, #6]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d18:	6939      	ldr	r1, [r7, #16]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	88db      	ldrh	r3, [r3, #6]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fa24 	bl	800916e <USBD_CtlPrepareRx>
      break;
 8007d26:	e058      	b.n	8007dda <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	7850      	ldrb	r0, [r2, #1]
 8007d34:	2200      	movs	r2, #0
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	4798      	blx	r3
      break;
 8007d3a:	e04e      	b.n	8007dda <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b0b      	cmp	r3, #11
 8007d42:	d02e      	beq.n	8007da2 <USBD_CDC_Setup+0x104>
 8007d44:	2b0b      	cmp	r3, #11
 8007d46:	dc38      	bgt.n	8007dba <USBD_CDC_Setup+0x11c>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <USBD_CDC_Setup+0xb4>
 8007d4c:	2b0a      	cmp	r3, #10
 8007d4e:	d014      	beq.n	8007d7a <USBD_CDC_Setup+0xdc>
 8007d50:	e033      	b.n	8007dba <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d107      	bne.n	8007d6c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	2202      	movs	r2, #2
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f9d4 	bl	8009112 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d6a:	e02e      	b.n	8007dca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 f965 	bl	800903e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d74:	2302      	movs	r3, #2
 8007d76:	75fb      	strb	r3, [r7, #23]
          break;
 8007d78:	e027      	b.n	8007dca <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d107      	bne.n	8007d94 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d84:	f107 030f 	add.w	r3, r7, #15
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f9c0 	bl	8009112 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d92:	e01a      	b.n	8007dca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 f951 	bl	800903e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	75fb      	strb	r3, [r7, #23]
          break;
 8007da0:	e013      	b.n	8007dca <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d00d      	beq.n	8007dc8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 f945 	bl	800903e <USBD_CtlError>
            ret = USBD_FAIL;
 8007db4:	2302      	movs	r3, #2
 8007db6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007db8:	e006      	b.n	8007dc8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 f93e 	bl	800903e <USBD_CtlError>
          ret = USBD_FAIL;
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007dc6:	e000      	b.n	8007dca <USBD_CDC_Setup+0x12c>
          break;
 8007dc8:	bf00      	nop
      }
      break;
 8007dca:	e006      	b.n	8007dda <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 f935 	bl	800903e <USBD_CtlError>
      ret = USBD_FAIL;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd8:	bf00      	nop
  }

  return ret;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dfe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d03a      	beq.n	8007e80 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	331c      	adds	r3, #28
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d029      	beq.n	8007e74 <USBD_CDC_DataIn+0x90>
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	331c      	adds	r3, #28
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	78f9      	ldrb	r1, [r7, #3]
 8007e34:	68b8      	ldr	r0, [r7, #8]
 8007e36:	460b      	mov	r3, r1
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4403      	add	r3, r0
 8007e40:	3338      	adds	r3, #56	; 0x38
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e48:	fb01 f303 	mul.w	r3, r1, r3
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d110      	bne.n	8007e74 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	331c      	adds	r3, #28
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e66:	78f9      	ldrb	r1, [r7, #3]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fdd2 	bl	8009a16 <USBD_LL_Transmit>
 8007e72:	e003      	b.n	8007e7c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fdfd 	bl	8009aa2 <USBD_LL_GetRxDataSize>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4798      	blx	r3

    return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e000      	b.n	8007ed8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ed6:	2302      	movs	r3, #2
  }
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d015      	beq.n	8007f26 <USBD_CDC_EP0_RxReady+0x46>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f00:	2bff      	cmp	r3, #255	; 0xff
 8007f02:	d010      	beq.n	8007f26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f1a:	b292      	uxth	r2, r2
 8007f1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	22ff      	movs	r2, #255	; 0xff
 8007f22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2243      	movs	r2, #67	; 0x43
 8007f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007f3e:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000098 	.word	0x20000098

08007f50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2243      	movs	r2, #67	; 0x43
 8007f5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007f5e:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000054 	.word	0x20000054

08007f70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2243      	movs	r2, #67	; 0x43
 8007f7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f7e:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	200000dc 	.word	0x200000dc

08007f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f9e:	4b03      	ldr	r3, [pc, #12]	; (8007fac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000010 	.word	0x20000010

08007fb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr

0800800e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01c      	beq.n	8008088 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008054:	2b00      	cmp	r3, #0
 8008056:	d115      	bne.n	8008084 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008076:	b29b      	uxth	r3, r3
 8008078:	2181      	movs	r1, #129	; 0x81
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fccb 	bl	8009a16 <USBD_LL_Transmit>

      return USBD_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e002      	b.n	800808a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008088:	2302      	movs	r3, #2
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d017      	beq.n	80080dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7c1b      	ldrb	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080be:	2101      	movs	r1, #1
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fccb 	bl	8009a5c <USBD_LL_PrepareReceive>
 80080c6:	e007      	b.n	80080d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	2101      	movs	r1, #1
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 fcc2 	bl	8009a5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	4613      	mov	r3, r2
 80080f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080fa:	2302      	movs	r3, #2
 80080fc:	e01a      	b.n	8008134 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	79fa      	ldrb	r2, [r7, #7]
 800812a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 fb2f 	bl	8009790 <USBD_LL_Init>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d006      	beq.n	800815e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
 800815c:	e001      	b.n	8008162 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr

0800816e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 fb64 	bl	8009844 <USBD_LL_Start>

  return USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr

0800819a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081a6:	2302      	movs	r3, #2
 80081a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00c      	beq.n	80081ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	4611      	mov	r1, r2
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	4611      	mov	r1, r2
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fed8 	bl	8008fc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008224:	461a      	mov	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	2b02      	cmp	r3, #2
 8008238:	d016      	beq.n	8008268 <USBD_LL_SetupStage+0x6a>
 800823a:	2b02      	cmp	r3, #2
 800823c:	d81c      	bhi.n	8008278 <USBD_LL_SetupStage+0x7a>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <USBD_LL_SetupStage+0x4a>
 8008242:	2b01      	cmp	r3, #1
 8008244:	d008      	beq.n	8008258 <USBD_LL_SetupStage+0x5a>
 8008246:	e017      	b.n	8008278 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9cb 	bl	80085ec <USBD_StdDevReq>
      break;
 8008256:	e01a      	b.n	800828e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fa2d 	bl	80086c0 <USBD_StdItfReq>
      break;
 8008266:	e012      	b.n	800828e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa6d 	bl	8008750 <USBD_StdEPReq>
      break;
 8008276:	e00a      	b.n	800828e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800827e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008282:	b2db      	uxtb	r3, r3
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fb3c 	bl	8009904 <USBD_LL_StallEP>
      break;
 800828c:	bf00      	nop
  }

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	460b      	mov	r3, r1
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d14b      	bne.n	8008344 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d134      	bne.n	8008328 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d919      	bls.n	80082fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	1ad2      	subs	r2, r2, r3
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d203      	bcs.n	80082ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	e002      	b.n	80082f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 ff57 	bl	80091aa <USBD_CtlContinueRx>
 80082fc:	e038      	b.n	8008370 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008310:	2b03      	cmp	r3, #3
 8008312:	d105      	bne.n	8008320 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 ff54 	bl	80091ce <USBD_CtlSendStatus>
 8008326:	e023      	b.n	8008370 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800832e:	2b05      	cmp	r3, #5
 8008330:	d11e      	bne.n	8008370 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800833a:	2100      	movs	r1, #0
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f001 fae1 	bl	8009904 <USBD_LL_StallEP>
 8008342:	e015      	b.n	8008370 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00d      	beq.n	800836c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008356:	2b03      	cmp	r3, #3
 8008358:	d108      	bne.n	800836c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	7afa      	ldrb	r2, [r7, #11]
 8008364:	4611      	mov	r1, r2
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	4798      	blx	r3
 800836a:	e001      	b.n	8008370 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800836c:	2302      	movs	r3, #2
 800836e:	e000      	b.n	8008372 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b086      	sub	sp, #24
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	460b      	mov	r3, r1
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d17f      	bne.n	800848e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3314      	adds	r3, #20
 8008392:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800839a:	2b02      	cmp	r3, #2
 800839c:	d15c      	bne.n	8008458 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d915      	bls.n	80083d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 fec1 	bl	800914a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083c8:	2300      	movs	r3, #0
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f001 fb44 	bl	8009a5c <USBD_LL_PrepareReceive>
 80083d4:	e04e      	b.n	8008474 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	6912      	ldr	r2, [r2, #16]
 80083de:	fbb3 f1f2 	udiv	r1, r3, r2
 80083e2:	fb01 f202 	mul.w	r2, r1, r2
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d11c      	bne.n	8008426 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d316      	bcc.n	8008426 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008402:	429a      	cmp	r2, r3
 8008404:	d20f      	bcs.n	8008426 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 fe9d 	bl	800914a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008418:	2300      	movs	r3, #0
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f001 fb1c 	bl	8009a5c <USBD_LL_PrepareReceive>
 8008424:	e026      	b.n	8008474 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008438:	2b03      	cmp	r3, #3
 800843a:	d105      	bne.n	8008448 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008448:	2180      	movs	r1, #128	; 0x80
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f001 fa5a 	bl	8009904 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 fecf 	bl	80091f4 <USBD_CtlReceiveStatus>
 8008456:	e00d      	b.n	8008474 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800845e:	2b04      	cmp	r3, #4
 8008460:	d004      	beq.n	800846c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800846c:	2180      	movs	r1, #128	; 0x80
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f001 fa48 	bl	8009904 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800847a:	2b01      	cmp	r3, #1
 800847c:	d11d      	bne.n	80084ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff fe81 	bl	8008186 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800848c:	e015      	b.n	80084ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d108      	bne.n	80084b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	7afa      	ldrb	r2, [r7, #11]
 80084ae:	4611      	mov	r1, r2
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	4798      	blx	r3
 80084b4:	e001      	b.n	80084ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084b6:	2302      	movs	r3, #2
 80084b8:	e000      	b.n	80084bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	2200      	movs	r2, #0
 80084d0:	2100      	movs	r1, #0
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 f9d1 	bl	800987a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2240      	movs	r2, #64	; 0x40
 80084e4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084e8:	2340      	movs	r3, #64	; 0x40
 80084ea:	2200      	movs	r2, #0
 80084ec:	2180      	movs	r1, #128	; 0x80
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 f9c3 	bl	800987a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2240      	movs	r2, #64	; 0x40
 80084fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6852      	ldr	r2, [r2, #4]
 8008534:	b2d2      	uxtb	r2, r2
 8008536:	4611      	mov	r1, r2
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
  }

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2204      	movs	r2, #4
 800857c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859a:	2b04      	cmp	r3, #4
 800859c:	d105      	bne.n	80085aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr

080085b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d10b      	bne.n	80085e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008602:	2b40      	cmp	r3, #64	; 0x40
 8008604:	d005      	beq.n	8008612 <USBD_StdDevReq+0x26>
 8008606:	2b40      	cmp	r3, #64	; 0x40
 8008608:	d84f      	bhi.n	80086aa <USBD_StdDevReq+0xbe>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d009      	beq.n	8008622 <USBD_StdDevReq+0x36>
 800860e:	2b20      	cmp	r3, #32
 8008610:	d14b      	bne.n	80086aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
      break;
 8008620:	e048      	b.n	80086b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b09      	cmp	r3, #9
 8008628:	d839      	bhi.n	800869e <USBD_StdDevReq+0xb2>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <USBD_StdDevReq+0x44>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008681 	.word	0x08008681
 8008634:	08008695 	.word	0x08008695
 8008638:	0800869f 	.word	0x0800869f
 800863c:	0800868b 	.word	0x0800868b
 8008640:	0800869f 	.word	0x0800869f
 8008644:	08008663 	.word	0x08008663
 8008648:	08008659 	.word	0x08008659
 800864c:	0800869f 	.word	0x0800869f
 8008650:	08008677 	.word	0x08008677
 8008654:	0800866d 	.word	0x0800866d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f9dc 	bl	8008a18 <USBD_GetDescriptor>
          break;
 8008660:	e022      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fb3f 	bl	8008ce8 <USBD_SetAddress>
          break;
 800866a:	e01d      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fb7e 	bl	8008d70 <USBD_SetConfig>
          break;
 8008674:	e018      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fc07 	bl	8008e8c <USBD_GetConfig>
          break;
 800867e:	e013      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fc37 	bl	8008ef6 <USBD_GetStatus>
          break;
 8008688:	e00e      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fc65 	bl	8008f5c <USBD_SetFeature>
          break;
 8008692:	e009      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc74 	bl	8008f84 <USBD_ClrFeature>
          break;
 800869c:	e004      	b.n	80086a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fccc 	bl	800903e <USBD_CtlError>
          break;
 80086a6:	bf00      	nop
      }
      break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fcc6 	bl	800903e <USBD_CtlError>
      break;
 80086b2:	bf00      	nop
  }

  return ret;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop

080086c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d005      	beq.n	80086e6 <USBD_StdItfReq+0x26>
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	d82e      	bhi.n	800873c <USBD_StdItfReq+0x7c>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <USBD_StdItfReq+0x26>
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d12a      	bne.n	800873c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	3b01      	subs	r3, #1
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d81d      	bhi.n	800872e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	889b      	ldrh	r3, [r3, #4]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d813      	bhi.n	8008724 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	88db      	ldrh	r3, [r3, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d110      	bne.n	8008738 <USBD_StdItfReq+0x78>
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10d      	bne.n	8008738 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fd56 	bl	80091ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008722:	e009      	b.n	8008738 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fc89 	bl	800903e <USBD_CtlError>
          break;
 800872c:	e004      	b.n	8008738 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fc84 	bl	800903e <USBD_CtlError>
          break;
 8008736:	e000      	b.n	800873a <USBD_StdItfReq+0x7a>
          break;
 8008738:	bf00      	nop
      }
      break;
 800873a:	e004      	b.n	8008746 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fc7d 	bl	800903e <USBD_CtlError>
      break;
 8008744:	bf00      	nop
  }

  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d007      	beq.n	8008780 <USBD_StdEPReq+0x30>
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	f200 8146 	bhi.w	8008a02 <USBD_StdEPReq+0x2b2>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <USBD_StdEPReq+0x40>
 800877a:	2b20      	cmp	r3, #32
 800877c:	f040 8141 	bne.w	8008a02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
      break;
 800878e:	e13d      	b.n	8008a0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008798:	2b20      	cmp	r3, #32
 800879a:	d10a      	bne.n	80087b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	e12d      	b.n	8008a0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	785b      	ldrb	r3, [r3, #1]
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d007      	beq.n	80087ca <USBD_StdEPReq+0x7a>
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	f300 811b 	bgt.w	80089f6 <USBD_StdEPReq+0x2a6>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d072      	beq.n	80088aa <USBD_StdEPReq+0x15a>
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d03a      	beq.n	800883e <USBD_StdEPReq+0xee>
 80087c8:	e115      	b.n	80089f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d002      	beq.n	80087da <USBD_StdEPReq+0x8a>
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d015      	beq.n	8008804 <USBD_StdEPReq+0xb4>
 80087d8:	e02b      	b.n	8008832 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00c      	beq.n	80087fa <USBD_StdEPReq+0xaa>
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	2b80      	cmp	r3, #128	; 0x80
 80087e4:	d009      	beq.n	80087fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 f88a 	bl	8009904 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087f0:	2180      	movs	r1, #128	; 0x80
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 f886 	bl	8009904 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087f8:	e020      	b.n	800883c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fc1e 	bl	800903e <USBD_CtlError>
              break;
 8008802:	e01b      	b.n	800883c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	885b      	ldrh	r3, [r3, #2]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10e      	bne.n	800882a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <USBD_StdEPReq+0xda>
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b80      	cmp	r3, #128	; 0x80
 8008816:	d008      	beq.n	800882a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	88db      	ldrh	r3, [r3, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 f86d 	bl	8009904 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fccf 	bl	80091ce <USBD_CtlSendStatus>

              break;
 8008830:	e004      	b.n	800883c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc02 	bl	800903e <USBD_CtlError>
              break;
 800883a:	bf00      	nop
          }
          break;
 800883c:	e0e0      	b.n	8008a00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	2b02      	cmp	r3, #2
 8008846:	d002      	beq.n	800884e <USBD_StdEPReq+0xfe>
 8008848:	2b03      	cmp	r3, #3
 800884a:	d015      	beq.n	8008878 <USBD_StdEPReq+0x128>
 800884c:	e026      	b.n	800889c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00c      	beq.n	800886e <USBD_StdEPReq+0x11e>
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b80      	cmp	r3, #128	; 0x80
 8008858:	d009      	beq.n	800886e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 f850 	bl	8009904 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008864:	2180      	movs	r1, #128	; 0x80
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 f84c 	bl	8009904 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800886c:	e01c      	b.n	80088a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fbe4 	bl	800903e <USBD_CtlError>
              break;
 8008876:	e017      	b.n	80088a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	885b      	ldrh	r3, [r3, #2]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d112      	bne.n	80088a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 f857 	bl	8009942 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fc9a 	bl	80091ce <USBD_CtlSendStatus>
              }
              break;
 800889a:	e004      	b.n	80088a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fbcd 	bl	800903e <USBD_CtlError>
              break;
 80088a4:	e000      	b.n	80088a8 <USBD_StdEPReq+0x158>
              break;
 80088a6:	bf00      	nop
          }
          break;
 80088a8:	e0aa      	b.n	8008a00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d002      	beq.n	80088ba <USBD_StdEPReq+0x16a>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d032      	beq.n	800891e <USBD_StdEPReq+0x1ce>
 80088b8:	e097      	b.n	80089ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <USBD_StdEPReq+0x180>
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b80      	cmp	r3, #128	; 0x80
 80088c4:	d004      	beq.n	80088d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fbb8 	bl	800903e <USBD_CtlError>
                break;
 80088ce:	e091      	b.n	80089f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da0b      	bge.n	80088f0 <USBD_StdEPReq+0x1a0>
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	3310      	adds	r3, #16
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	4413      	add	r3, r2
 80088ec:	3304      	adds	r3, #4
 80088ee:	e00b      	b.n	8008908 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	3304      	adds	r3, #4
 8008908:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2202      	movs	r2, #2
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fbfb 	bl	8009112 <USBD_CtlSendData>
              break;
 800891c:	e06a      	b.n	80089f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800891e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008922:	2b00      	cmp	r3, #0
 8008924:	da11      	bge.n	800894a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	f003 020f 	and.w	r2, r3, #15
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	3318      	adds	r3, #24
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d117      	bne.n	8008970 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fb7b 	bl	800903e <USBD_CtlError>
                  break;
 8008948:	e054      	b.n	80089f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	f003 020f 	and.w	r2, r3, #15
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	4613      	mov	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	440b      	add	r3, r1
 800895c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb68 	bl	800903e <USBD_CtlError>
                  break;
 800896e:	e041      	b.n	80089f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da0b      	bge.n	8008990 <USBD_StdEPReq+0x240>
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	3310      	adds	r3, #16
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	3304      	adds	r3, #4
 800898e:	e00b      	b.n	80089a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	3304      	adds	r3, #4
 80089a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <USBD_StdEPReq+0x266>
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b80      	cmp	r3, #128	; 0x80
 80089b4:	d103      	bne.n	80089be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	e00e      	b.n	80089dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 ffdc 	bl	8009980 <USBD_LL_IsStallEP>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2201      	movs	r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e002      	b.n	80089dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2202      	movs	r2, #2
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fb95 	bl	8009112 <USBD_CtlSendData>
              break;
 80089e8:	e004      	b.n	80089f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fb26 	bl	800903e <USBD_CtlError>
              break;
 80089f2:	bf00      	nop
          }
          break;
 80089f4:	e004      	b.n	8008a00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fb20 	bl	800903e <USBD_CtlError>
          break;
 80089fe:	bf00      	nop
      }
      break;
 8008a00:	e004      	b.n	8008a0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fb1a 	bl	800903e <USBD_CtlError>
      break;
 8008a0a:	bf00      	nop
  }

  return ret;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b06      	cmp	r3, #6
 8008a3a:	f200 8128 	bhi.w	8008c8e <USBD_GetDescriptor+0x276>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <USBD_GetDescriptor+0x2c>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a61 	.word	0x08008a61
 8008a48:	08008a79 	.word	0x08008a79
 8008a4c:	08008ab9 	.word	0x08008ab9
 8008a50:	08008c8f 	.word	0x08008c8f
 8008a54:	08008c8f 	.word	0x08008c8f
 8008a58:	08008c2f 	.word	0x08008c2f
 8008a5c:	08008c5b 	.word	0x08008c5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
      break;
 8008a76:	e112      	b.n	8008c9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	7c1b      	ldrb	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10d      	bne.n	8008a9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	f107 0208 	add.w	r2, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3301      	adds	r3, #1
 8008a96:	2202      	movs	r2, #2
 8008a98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a9a:	e100      	b.n	8008c9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	f107 0208 	add.w	r2, r7, #8
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4798      	blx	r3
 8008aac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	701a      	strb	r2, [r3, #0]
      break;
 8008ab6:	e0f2      	b.n	8008c9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	885b      	ldrh	r3, [r3, #2]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b05      	cmp	r3, #5
 8008ac0:	f200 80ac 	bhi.w	8008c1c <USBD_GetDescriptor+0x204>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <USBD_GetDescriptor+0xb4>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008ae5 	.word	0x08008ae5
 8008ad0:	08008b19 	.word	0x08008b19
 8008ad4:	08008b4d 	.word	0x08008b4d
 8008ad8:	08008b81 	.word	0x08008b81
 8008adc:	08008bb5 	.word	0x08008bb5
 8008ae0:	08008be9 	.word	0x08008be9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7c12      	ldrb	r2, [r2, #16]
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b06:	e091      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa97 	bl	800903e <USBD_CtlError>
            err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
          break;
 8008b16:	e089      	b.n	8008c2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	7c12      	ldrb	r2, [r2, #16]
 8008b30:	f107 0108 	add.w	r1, r7, #8
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3a:	e077      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa7d 	bl	800903e <USBD_CtlError>
            err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4a:	e06f      	b.n	8008c2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	7c12      	ldrb	r2, [r2, #16]
 8008b64:	f107 0108 	add.w	r1, r7, #8
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b6e:	e05d      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa63 	bl	800903e <USBD_CtlError>
            err++;
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b7e:	e055      	b.n	8008c2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00b      	beq.n	8008ba4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	7c12      	ldrb	r2, [r2, #16]
 8008b98:	f107 0108 	add.w	r1, r7, #8
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	4798      	blx	r3
 8008ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ba2:	e043      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa49 	bl	800903e <USBD_CtlError>
            err++;
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bb2:	e03b      	b.n	8008c2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7c12      	ldrb	r2, [r2, #16]
 8008bcc:	f107 0108 	add.w	r1, r7, #8
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
 8008bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bd6:	e029      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa2f 	bl	800903e <USBD_CtlError>
            err++;
 8008be0:	7afb      	ldrb	r3, [r7, #11]
 8008be2:	3301      	adds	r3, #1
 8008be4:	72fb      	strb	r3, [r7, #11]
          break;
 8008be6:	e021      	b.n	8008c2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	7c12      	ldrb	r2, [r2, #16]
 8008c00:	f107 0108 	add.w	r1, r7, #8
 8008c04:	4610      	mov	r0, r2
 8008c06:	4798      	blx	r3
 8008c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0a:	e00f      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa15 	bl	800903e <USBD_CtlError>
            err++;
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	3301      	adds	r3, #1
 8008c18:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1a:	e007      	b.n	8008c2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa0d 	bl	800903e <USBD_CtlError>
          err++;
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	3301      	adds	r3, #1
 8008c28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c2a:	e038      	b.n	8008c9e <USBD_GetDescriptor+0x286>
 8008c2c:	e037      	b.n	8008c9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7c1b      	ldrb	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3e:	f107 0208 	add.w	r2, r7, #8
 8008c42:	4610      	mov	r0, r2
 8008c44:	4798      	blx	r3
 8008c46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c48:	e029      	b.n	8008c9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f9f6 	bl	800903e <USBD_CtlError>
        err++;
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	3301      	adds	r3, #1
 8008c56:	72fb      	strb	r3, [r7, #11]
      break;
 8008c58:	e021      	b.n	8008c9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7c1b      	ldrb	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10d      	bne.n	8008c7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	f107 0208 	add.w	r2, r7, #8
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4798      	blx	r3
 8008c72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	2207      	movs	r2, #7
 8008c7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c7c:	e00f      	b.n	8008c9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9dc 	bl	800903e <USBD_CtlError>
        err++;
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c8c:	e007      	b.n	8008c9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f9d4 	bl	800903e <USBD_CtlError>
      err++;
 8008c96:	7afb      	ldrb	r3, [r7, #11]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c9c:	bf00      	nop
  }

  if (err != 0U)
 8008c9e:	7afb      	ldrb	r3, [r7, #11]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d11c      	bne.n	8008cde <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ca4:	893b      	ldrh	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d011      	beq.n	8008cce <USBD_GetDescriptor+0x2b6>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	88db      	ldrh	r3, [r3, #6]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00d      	beq.n	8008cce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	88da      	ldrh	r2, [r3, #6]
 8008cb6:	893b      	ldrh	r3, [r7, #8]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	bf28      	it	cs
 8008cbc:	4613      	movcs	r3, r2
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cc2:	893b      	ldrh	r3, [r7, #8]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	68f9      	ldr	r1, [r7, #12]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa22 	bl	8009112 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	88db      	ldrh	r3, [r3, #6]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa79 	bl	80091ce <USBD_CtlSendStatus>
 8008cdc:	e000      	b.n	8008ce0 <USBD_GetDescriptor+0x2c8>
    return;
 8008cde:	bf00      	nop
    }
  }
}
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop

08008ce8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	889b      	ldrh	r3, [r3, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d130      	bne.n	8008d5c <USBD_SetAddress+0x74>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	88db      	ldrh	r3, [r3, #6]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d12c      	bne.n	8008d5c <USBD_SetAddress+0x74>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	885b      	ldrh	r3, [r3, #2]
 8008d06:	2b7f      	cmp	r3, #127	; 0x7f
 8008d08:	d828      	bhi.n	8008d5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d104      	bne.n	8008d2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f98b 	bl	800903e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d28:	e01d      	b.n	8008d66 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7bfa      	ldrb	r2, [r7, #15]
 8008d2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fe4e 	bl	80099d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa46 	bl	80091ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d50:	e009      	b.n	8008d66 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5a:	e004      	b.n	8008d66 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f96d 	bl	800903e <USBD_CtlError>
  }
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	4b41      	ldr	r3, [pc, #260]	; (8008e88 <USBD_SetConfig+0x118>)
 8008d82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d84:	4b40      	ldr	r3, [pc, #256]	; (8008e88 <USBD_SetConfig+0x118>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d904      	bls.n	8008d96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f955 	bl	800903e <USBD_CtlError>
 8008d94:	e075      	b.n	8008e82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d002      	beq.n	8008da6 <USBD_SetConfig+0x36>
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d023      	beq.n	8008dec <USBD_SetConfig+0x7c>
 8008da4:	e062      	b.n	8008e6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008da6:	4b38      	ldr	r3, [pc, #224]	; (8008e88 <USBD_SetConfig+0x118>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01a      	beq.n	8008de4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008dae:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <USBD_SetConfig+0x118>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2203      	movs	r2, #3
 8008dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dc0:	4b31      	ldr	r3, [pc, #196]	; (8008e88 <USBD_SetConfig+0x118>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff f9e7 	bl	800819a <USBD_SetClassConfig>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d104      	bne.n	8008ddc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f932 	bl	800903e <USBD_CtlError>
            return;
 8008dda:	e052      	b.n	8008e82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9f6 	bl	80091ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008de2:	e04e      	b.n	8008e82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f9f2 	bl	80091ce <USBD_CtlSendStatus>
        break;
 8008dea:	e04a      	b.n	8008e82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008dec:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <USBD_SetConfig+0x118>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d112      	bne.n	8008e1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <USBD_SetConfig+0x118>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e06:	4b20      	ldr	r3, [pc, #128]	; (8008e88 <USBD_SetConfig+0x118>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff f9e3 	bl	80081d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f9db 	bl	80091ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e18:	e033      	b.n	8008e82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e1a:	4b1b      	ldr	r3, [pc, #108]	; (8008e88 <USBD_SetConfig+0x118>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d01d      	beq.n	8008e64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff f9d1 	bl	80081d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <USBD_SetConfig+0x118>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e40:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <USBD_SetConfig+0x118>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff f9a7 	bl	800819a <USBD_SetClassConfig>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d104      	bne.n	8008e5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f8f2 	bl	800903e <USBD_CtlError>
            return;
 8008e5a:	e012      	b.n	8008e82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f9b6 	bl	80091ce <USBD_CtlSendStatus>
        break;
 8008e62:	e00e      	b.n	8008e82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f9b2 	bl	80091ce <USBD_CtlSendStatus>
        break;
 8008e6a:	e00a      	b.n	8008e82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f8e5 	bl	800903e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e74:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <USBD_SetConfig+0x118>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff f9ac 	bl	80081d8 <USBD_ClrClassConfig>
        break;
 8008e80:	bf00      	nop
    }
  }
}
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000364 	.word	0x20000364

08008e8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	88db      	ldrh	r3, [r3, #6]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d004      	beq.n	8008ea8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f8cc 	bl	800903e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ea6:	e022      	b.n	8008eee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	dc02      	bgt.n	8008eb8 <USBD_GetConfig+0x2c>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dc03      	bgt.n	8008ebe <USBD_GetConfig+0x32>
 8008eb6:	e015      	b.n	8008ee4 <USBD_GetConfig+0x58>
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d00b      	beq.n	8008ed4 <USBD_GetConfig+0x48>
 8008ebc:	e012      	b.n	8008ee4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	2201      	movs	r2, #1
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f920 	bl	8009112 <USBD_CtlSendData>
        break;
 8008ed2:	e00c      	b.n	8008eee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	2201      	movs	r2, #1
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f918 	bl	8009112 <USBD_CtlSendData>
        break;
 8008ee2:	e004      	b.n	8008eee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f8a9 	bl	800903e <USBD_CtlError>
        break;
 8008eec:	bf00      	nop
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f06:	3b01      	subs	r3, #1
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d81e      	bhi.n	8008f4a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d004      	beq.n	8008f1e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f891 	bl	800903e <USBD_CtlError>
        break;
 8008f1c:	e01a      	b.n	8008f54 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f043 0202 	orr.w	r2, r3, #2
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	2202      	movs	r2, #2
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f8e5 	bl	8009112 <USBD_CtlSendData>
      break;
 8008f48:	e004      	b.n	8008f54 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f876 	bl	800903e <USBD_CtlError>
      break;
 8008f52:	bf00      	nop
  }
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	885b      	ldrh	r3, [r3, #2]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d106      	bne.n	8008f7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f929 	bl	80091ce <USBD_CtlSendStatus>
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	3b01      	subs	r3, #1
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d80b      	bhi.n	8008fb2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d10c      	bne.n	8008fbc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f90f 	bl	80091ce <USBD_CtlSendStatus>
      }
      break;
 8008fb0:	e004      	b.n	8008fbc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f842 	bl	800903e <USBD_CtlError>
      break;
 8008fba:	e000      	b.n	8008fbe <USBD_ClrFeature+0x3a>
      break;
 8008fbc:	bf00      	nop
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	785a      	ldrb	r2, [r3, #1]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	3302      	adds	r3, #2
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	3303      	adds	r3, #3
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	4413      	add	r3, r2
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	3304      	adds	r3, #4
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	b29a      	uxth	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	3305      	adds	r3, #5
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	b29b      	uxth	r3, r3
 8009010:	4413      	add	r3, r2
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	3306      	adds	r3, #6
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	b29a      	uxth	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	3307      	adds	r3, #7
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	b29b      	uxth	r3, r3
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	b29b      	uxth	r3, r3
 800902c:	4413      	add	r3, r2
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	80da      	strh	r2, [r3, #6]

}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr

0800903e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009048:	2180      	movs	r1, #128	; 0x80
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fc5a 	bl	8009904 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc56 	bl	8009904 <USBD_LL_StallEP>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d032      	beq.n	80090dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f834 	bl	80090e4 <USBD_GetLen>
 800907c:	4603      	mov	r3, r0
 800907e:	3301      	adds	r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	75fa      	strb	r2, [r7, #23]
 8009090:	461a      	mov	r2, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	4413      	add	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	75fa      	strb	r2, [r7, #23]
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4413      	add	r3, r2
 80090a8:	2203      	movs	r2, #3
 80090aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090ac:	e012      	b.n	80090d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	60fa      	str	r2, [r7, #12]
 80090b4:	7dfa      	ldrb	r2, [r7, #23]
 80090b6:	1c51      	adds	r1, r2, #1
 80090b8:	75f9      	strb	r1, [r7, #23]
 80090ba:	4611      	mov	r1, r2
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	440a      	add	r2, r1
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	75fa      	strb	r2, [r7, #23]
 80090ca:	461a      	mov	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4413      	add	r3, r2
 80090d0:	2200      	movs	r2, #0
 80090d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e8      	bne.n	80090ae <USBD_GetString+0x4e>
    }
  }
}
 80090dc:	bf00      	nop
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80090f0:	e005      	b.n	80090fe <USBD_GetLen+0x1a>
  {
    len++;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	3301      	adds	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3301      	adds	r3, #1
 80090fc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1f5      	bne.n	80090f2 <USBD_GetLen+0xe>
  }

  return len;
 8009106:	7bfb      	ldrb	r3, [r7, #15]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	bc80      	pop	{r7}
 8009110:	4770      	bx	lr

08009112 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	4613      	mov	r3, r2
 800911e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2202      	movs	r2, #2
 8009124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009128:	88fa      	ldrh	r2, [r7, #6]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	2100      	movs	r1, #0
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fc6b 	bl	8009a16 <USBD_LL_Transmit>

  return USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	4613      	mov	r3, r2
 8009156:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009158:	88fb      	ldrh	r3, [r7, #6]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	2100      	movs	r1, #0
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fc59 	bl	8009a16 <USBD_LL_Transmit>

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	4613      	mov	r3, r2
 800917a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2203      	movs	r2, #3
 8009180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009184:	88fa      	ldrh	r2, [r7, #6]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	2100      	movs	r1, #0
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fc5e 	bl	8009a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	4613      	mov	r3, r2
 80091b6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	2100      	movs	r1, #0
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fc4c 	bl	8009a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2204      	movs	r2, #4
 80091da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091de:	2300      	movs	r3, #0
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fc16 	bl	8009a16 <USBD_LL_Transmit>

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2205      	movs	r2, #5
 8009200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009204:	2300      	movs	r3, #0
 8009206:	2200      	movs	r2, #0
 8009208:	2100      	movs	r1, #0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fc26 	bl	8009a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009220:	2200      	movs	r2, #0
 8009222:	4912      	ldr	r1, [pc, #72]	; (800926c <MX_USB_DEVICE_Init+0x50>)
 8009224:	4812      	ldr	r0, [pc, #72]	; (8009270 <MX_USB_DEVICE_Init+0x54>)
 8009226:	f7fe ff5e 	bl	80080e6 <USBD_Init>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009230:	f7f7 fdfc 	bl	8000e2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009234:	490f      	ldr	r1, [pc, #60]	; (8009274 <MX_USB_DEVICE_Init+0x58>)
 8009236:	480e      	ldr	r0, [pc, #56]	; (8009270 <MX_USB_DEVICE_Init+0x54>)
 8009238:	f7fe ff80 	bl	800813c <USBD_RegisterClass>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009242:	f7f7 fdf3 	bl	8000e2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009246:	490c      	ldr	r1, [pc, #48]	; (8009278 <MX_USB_DEVICE_Init+0x5c>)
 8009248:	4809      	ldr	r0, [pc, #36]	; (8009270 <MX_USB_DEVICE_Init+0x54>)
 800924a:	f7fe feb1 	bl	8007fb0 <USBD_CDC_RegisterInterface>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009254:	f7f7 fdea 	bl	8000e2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <MX_USB_DEVICE_Init+0x54>)
 800925a:	f7fe ff88 	bl	800816e <USBD_Start>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009264:	f7f7 fde2 	bl	8000e2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009268:	bf00      	nop
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000130 	.word	0x20000130
 8009270:	20000368 	.word	0x20000368
 8009274:	2000001c 	.word	0x2000001c
 8009278:	20000120 	.word	0x20000120

0800927c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009280:	2200      	movs	r2, #0
 8009282:	4905      	ldr	r1, [pc, #20]	; (8009298 <CDC_Init_FS+0x1c>)
 8009284:	4805      	ldr	r0, [pc, #20]	; (800929c <CDC_Init_FS+0x20>)
 8009286:	f7fe fea9 	bl	8007fdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800928a:	4905      	ldr	r1, [pc, #20]	; (80092a0 <CDC_Init_FS+0x24>)
 800928c:	4803      	ldr	r0, [pc, #12]	; (800929c <CDC_Init_FS+0x20>)
 800928e:	f7fe febe 	bl	800800e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009292:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009294:	4618      	mov	r0, r3
 8009296:	bd80      	pop	{r7, pc}
 8009298:	200006ac 	.word	0x200006ac
 800929c:	20000368 	.word	0x20000368
 80092a0:	2000062c 	.word	0x2000062c

080092a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bc80      	pop	{r7}
 80092b0:	4770      	bx	lr
	...

080092b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	71fb      	strb	r3, [r7, #7]
 80092c0:	4613      	mov	r3, r2
 80092c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b23      	cmp	r3, #35	; 0x23
 80092c8:	d84a      	bhi.n	8009360 <CDC_Control_FS+0xac>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <CDC_Control_FS+0x1c>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	08009361 	.word	0x08009361
 80092d4:	08009361 	.word	0x08009361
 80092d8:	08009361 	.word	0x08009361
 80092dc:	08009361 	.word	0x08009361
 80092e0:	08009361 	.word	0x08009361
 80092e4:	08009361 	.word	0x08009361
 80092e8:	08009361 	.word	0x08009361
 80092ec:	08009361 	.word	0x08009361
 80092f0:	08009361 	.word	0x08009361
 80092f4:	08009361 	.word	0x08009361
 80092f8:	08009361 	.word	0x08009361
 80092fc:	08009361 	.word	0x08009361
 8009300:	08009361 	.word	0x08009361
 8009304:	08009361 	.word	0x08009361
 8009308:	08009361 	.word	0x08009361
 800930c:	08009361 	.word	0x08009361
 8009310:	08009361 	.word	0x08009361
 8009314:	08009361 	.word	0x08009361
 8009318:	08009361 	.word	0x08009361
 800931c:	08009361 	.word	0x08009361
 8009320:	08009361 	.word	0x08009361
 8009324:	08009361 	.word	0x08009361
 8009328:	08009361 	.word	0x08009361
 800932c:	08009361 	.word	0x08009361
 8009330:	08009361 	.word	0x08009361
 8009334:	08009361 	.word	0x08009361
 8009338:	08009361 	.word	0x08009361
 800933c:	08009361 	.word	0x08009361
 8009340:	08009361 	.word	0x08009361
 8009344:	08009361 	.word	0x08009361
 8009348:	08009361 	.word	0x08009361
 800934c:	08009361 	.word	0x08009361
 8009350:	08009361 	.word	0x08009361
 8009354:	08009361 	.word	0x08009361
 8009358:	08009361 	.word	0x08009361
 800935c:	08009361 	.word	0x08009361
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009360:	bf00      	nop
  }

  return (USBD_OK);
 8009362:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop

08009370 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4805      	ldr	r0, [pc, #20]	; (8009394 <CDC_Receive_FS+0x24>)
 800937e:	f7fe fe46 	bl	800800e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009382:	4804      	ldr	r0, [pc, #16]	; (8009394 <CDC_Receive_FS+0x24>)
 8009384:	f7fe fe85 	bl	8008092 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009388:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000368 	.word	0x20000368

08009398 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093a8:	4b10      	ldr	r3, [pc, #64]	; (80093ec <CDC_Transmit_FS+0x54>)
 80093aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e012      	b.n	80093e4 <CDC_Transmit_FS+0x4c>
  }
  else if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80093be:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <CDC_Transmit_FS+0x54>)
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d001      	beq.n	80093cc <CDC_Transmit_FS+0x34>
  {
    return USBD_FAIL;
 80093c8:	2302      	movs	r3, #2
 80093ca:	e00b      	b.n	80093e4 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80093cc:	887b      	ldrh	r3, [r7, #2]
 80093ce:	461a      	mov	r2, r3
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4806      	ldr	r0, [pc, #24]	; (80093ec <CDC_Transmit_FS+0x54>)
 80093d4:	f7fe fe02 	bl	8007fdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093d8:	4804      	ldr	r0, [pc, #16]	; (80093ec <CDC_Transmit_FS+0x54>)
 80093da:	f7fe fe2b 	bl	8008034 <USBD_CDC_TransmitPacket>
 80093de:	4603      	mov	r3, r0
 80093e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20000368 	.word	0x20000368

080093f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	6039      	str	r1, [r7, #0]
 80093fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2212      	movs	r2, #18
 8009400:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009402:	4b03      	ldr	r3, [pc, #12]	; (8009410 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	2000014c 	.word	0x2000014c

08009414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2204      	movs	r2, #4
 8009424:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009426:	4b03      	ldr	r3, [pc, #12]	; (8009434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009428:	4618      	mov	r0, r3
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	bc80      	pop	{r7}
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000160 	.word	0x20000160

08009438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d105      	bne.n	8009456 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4907      	ldr	r1, [pc, #28]	; (800946c <USBD_FS_ProductStrDescriptor+0x34>)
 800944e:	4808      	ldr	r0, [pc, #32]	; (8009470 <USBD_FS_ProductStrDescriptor+0x38>)
 8009450:	f7ff fe06 	bl	8009060 <USBD_GetString>
 8009454:	e004      	b.n	8009460 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4904      	ldr	r1, [pc, #16]	; (800946c <USBD_FS_ProductStrDescriptor+0x34>)
 800945a:	4805      	ldr	r0, [pc, #20]	; (8009470 <USBD_FS_ProductStrDescriptor+0x38>)
 800945c:	f7ff fe00 	bl	8009060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	2000072c 	.word	0x2000072c
 8009470:	0800a654 	.word	0x0800a654

08009474 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	6039      	str	r1, [r7, #0]
 800947e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	4904      	ldr	r1, [pc, #16]	; (8009494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009484:	4804      	ldr	r0, [pc, #16]	; (8009498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009486:	f7ff fdeb 	bl	8009060 <USBD_GetString>
  return USBD_StrDesc;
 800948a:	4b02      	ldr	r3, [pc, #8]	; (8009494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	2000072c 	.word	0x2000072c
 8009498:	0800a660 	.word	0x0800a660

0800949c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	221a      	movs	r2, #26
 80094ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094ae:	f000 f843 	bl	8009538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094b2:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000164 	.word	0x20000164

080094c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4907      	ldr	r1, [pc, #28]	; (80094f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094d6:	4808      	ldr	r0, [pc, #32]	; (80094f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094d8:	f7ff fdc2 	bl	8009060 <USBD_GetString>
 80094dc:	e004      	b.n	80094e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4904      	ldr	r1, [pc, #16]	; (80094f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094e2:	4805      	ldr	r0, [pc, #20]	; (80094f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094e4:	f7ff fdbc 	bl	8009060 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	2000072c 	.word	0x2000072c
 80094f8:	0800a668 	.word	0x0800a668

080094fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	6039      	str	r1, [r7, #0]
 8009506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d105      	bne.n	800951a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4907      	ldr	r1, [pc, #28]	; (8009530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009512:	4808      	ldr	r0, [pc, #32]	; (8009534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009514:	f7ff fda4 	bl	8009060 <USBD_GetString>
 8009518:	e004      	b.n	8009524 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	4904      	ldr	r1, [pc, #16]	; (8009530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800951e:	4805      	ldr	r0, [pc, #20]	; (8009534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009520:	f7ff fd9e 	bl	8009060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009524:	4b02      	ldr	r3, [pc, #8]	; (8009530 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	2000072c 	.word	0x2000072c
 8009534:	0800a674 	.word	0x0800a674

08009538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <Get_SerialNum+0x44>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009544:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <Get_SerialNum+0x48>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800954a:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <Get_SerialNum+0x4c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4413      	add	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d009      	beq.n	8009572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800955e:	2208      	movs	r2, #8
 8009560:	4909      	ldr	r1, [pc, #36]	; (8009588 <Get_SerialNum+0x50>)
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f814 	bl	8009590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009568:	2204      	movs	r2, #4
 800956a:	4908      	ldr	r1, [pc, #32]	; (800958c <Get_SerialNum+0x54>)
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f000 f80f 	bl	8009590 <IntToUnicode>
  }
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	1ffff7e8 	.word	0x1ffff7e8
 8009580:	1ffff7ec 	.word	0x1ffff7ec
 8009584:	1ffff7f0 	.word	0x1ffff7f0
 8009588:	20000166 	.word	0x20000166
 800958c:	20000176 	.word	0x20000176

08009590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095a2:	2300      	movs	r3, #0
 80095a4:	75fb      	strb	r3, [r7, #23]
 80095a6:	e027      	b.n	80095f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	0f1b      	lsrs	r3, r3, #28
 80095ac:	2b09      	cmp	r3, #9
 80095ae:	d80b      	bhi.n	80095c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	0f1b      	lsrs	r3, r3, #28
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	4619      	mov	r1, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	440b      	add	r3, r1
 80095c0:	3230      	adds	r2, #48	; 0x30
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]
 80095c6:	e00a      	b.n	80095de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	0f1b      	lsrs	r3, r3, #28
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	4619      	mov	r1, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	440b      	add	r3, r1
 80095d8:	3237      	adds	r2, #55	; 0x37
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	3301      	adds	r3, #1
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	4413      	add	r3, r2
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	3301      	adds	r3, #1
 80095f6:	75fb      	strb	r3, [r7, #23]
 80095f8:	7dfa      	ldrb	r2, [r7, #23]
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d3d3      	bcc.n	80095a8 <IntToUnicode+0x18>
  }
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr

0800960c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a0d      	ldr	r2, [pc, #52]	; (8009650 <HAL_PCD_MspInit+0x44>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d113      	bne.n	8009646 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <HAL_PCD_MspInit+0x48>)
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <HAL_PCD_MspInit+0x48>)
 8009624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009628:	61d3      	str	r3, [r2, #28]
 800962a:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <HAL_PCD_MspInit+0x48>)
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	2014      	movs	r0, #20
 800963c:	f7f7 ffa1 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009640:	2014      	movs	r0, #20
 8009642:	f7f7 ffba 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	40005c00 	.word	0x40005c00
 8009654:	40021000 	.word	0x40021000

08009658 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe fdc5 	bl	80081fe <USBD_LL_SetupStage>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	440b      	add	r3, r1
 800969c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7fe fdf7 	bl	8008298 <USBD_LL_DataOutStage>
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4613      	mov	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	440b      	add	r3, r1
 80096d2:	333c      	adds	r3, #60	; 0x3c
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	4619      	mov	r1, r3
 80096da:	f7fe fe4e 	bl	800837a <USBD_LL_DataInStage>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe ff5e 	bl	80085b6 <USBD_LL_SOF>
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800970a:	2301      	movs	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	2b02      	cmp	r3, #2
 8009714:	d001      	beq.n	800971a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009716:	f7f7 fb89 	bl	8000e2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009720:	7bfa      	ldrb	r2, [r7, #15]
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe ff0e 	bl	8008546 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fec7 	bl	80084c4 <USBD_LL_Reset>
}
 8009736:	bf00      	nop
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe ff08 	bl	8008564 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800975c:	4b04      	ldr	r3, [pc, #16]	; (8009770 <HAL_PCD_SuspendCallback+0x30>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	4a03      	ldr	r2, [pc, #12]	; (8009770 <HAL_PCD_SuspendCallback+0x30>)
 8009762:	f043 0306 	orr.w	r3, r3, #6
 8009766:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	e000ed00 	.word	0xe000ed00

08009774 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe ff02 	bl	800858c <USBD_LL_Resume>
}
 8009788:	bf00      	nop
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009798:	4a28      	ldr	r2, [pc, #160]	; (800983c <USBD_LL_Init+0xac>)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a26      	ldr	r2, [pc, #152]	; (800983c <USBD_LL_Init+0xac>)
 80097a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80097a8:	4b24      	ldr	r3, [pc, #144]	; (800983c <USBD_LL_Init+0xac>)
 80097aa:	4a25      	ldr	r2, [pc, #148]	; (8009840 <USBD_LL_Init+0xb0>)
 80097ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097ae:	4b23      	ldr	r3, [pc, #140]	; (800983c <USBD_LL_Init+0xac>)
 80097b0:	2208      	movs	r2, #8
 80097b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097b4:	4b21      	ldr	r3, [pc, #132]	; (800983c <USBD_LL_Init+0xac>)
 80097b6:	2202      	movs	r2, #2
 80097b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097ba:	4b20      	ldr	r3, [pc, #128]	; (800983c <USBD_LL_Init+0xac>)
 80097bc:	2200      	movs	r2, #0
 80097be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097c0:	4b1e      	ldr	r3, [pc, #120]	; (800983c <USBD_LL_Init+0xac>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097c6:	4b1d      	ldr	r3, [pc, #116]	; (800983c <USBD_LL_Init+0xac>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097cc:	481b      	ldr	r0, [pc, #108]	; (800983c <USBD_LL_Init+0xac>)
 80097ce:	f7f8 f8c2 	bl	8001956 <HAL_PCD_Init>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80097d8:	f7f7 fb28 	bl	8000e2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097e2:	2318      	movs	r3, #24
 80097e4:	2200      	movs	r2, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	f7f9 fd36 	bl	8003258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097f2:	2358      	movs	r3, #88	; 0x58
 80097f4:	2200      	movs	r2, #0
 80097f6:	2180      	movs	r1, #128	; 0x80
 80097f8:	f7f9 fd2e 	bl	8003258 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009802:	23c0      	movs	r3, #192	; 0xc0
 8009804:	2200      	movs	r2, #0
 8009806:	2181      	movs	r1, #129	; 0x81
 8009808:	f7f9 fd26 	bl	8003258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009812:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009816:	2200      	movs	r2, #0
 8009818:	2101      	movs	r1, #1
 800981a:	f7f9 fd1d 	bl	8003258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009828:	2200      	movs	r2, #0
 800982a:	2182      	movs	r1, #130	; 0x82
 800982c:	f7f9 fd14 	bl	8003258 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	2000092c 	.word	0x2000092c
 8009840:	40005c00 	.word	0x40005c00

08009844 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800985a:	4618      	mov	r0, r3
 800985c:	f7f8 f986 	bl	8001b6c <HAL_PCD_Start>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f94e 	bl	8009b08 <USBD_Get_USB_Status>
 800986c:	4603      	mov	r3, r0
 800986e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	461a      	mov	r2, r3
 8009888:	4603      	mov	r3, r0
 800988a:	70fb      	strb	r3, [r7, #3]
 800988c:	460b      	mov	r3, r1
 800988e:	70bb      	strb	r3, [r7, #2]
 8009890:	4613      	mov	r3, r2
 8009892:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098a2:	78bb      	ldrb	r3, [r7, #2]
 80098a4:	883a      	ldrh	r2, [r7, #0]
 80098a6:	78f9      	ldrb	r1, [r7, #3]
 80098a8:	f7f8 fafe 	bl	8001ea8 <HAL_PCD_EP_Open>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f928 	bl	8009b08 <USBD_Get_USB_Status>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7f8 fb45 	bl	8001f74 <HAL_PCD_EP_Close>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f909 	bl	8009b08 <USBD_Get_USB_Status>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7f8 fc05 	bl	8002132 <HAL_PCD_EP_SetStall>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f8ea 	bl	8009b08 <USBD_Get_USB_Status>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009938:	7bbb      	ldrb	r3, [r7, #14]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7f8 fc46 	bl	80021f2 <HAL_PCD_EP_ClrStall>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f8cb 	bl	8009b08 <USBD_Get_USB_Status>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009976:	7bbb      	ldrb	r3, [r7, #14]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009992:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009998:	2b00      	cmp	r3, #0
 800999a:	da0c      	bge.n	80099b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	440b      	add	r3, r1
 80099b0:	3302      	adds	r3, #2
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	e00b      	b.n	80099ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099bc:	68f9      	ldr	r1, [r7, #12]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	440b      	add	r3, r1
 80099c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bc80      	pop	{r7}
 80099d6:	4770      	bx	lr

080099d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f2:	78fa      	ldrb	r2, [r7, #3]
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f8 fa31 	bl	8001e5e <HAL_PCD_SetAddress>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 f880 	bl	8009b08 <USBD_Get_USB_Status>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	461a      	mov	r2, r3
 8009a22:	460b      	mov	r3, r1
 8009a24:	72fb      	strb	r3, [r7, #11]
 8009a26:	4613      	mov	r3, r2
 8009a28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a38:	893b      	ldrh	r3, [r7, #8]
 8009a3a:	7af9      	ldrb	r1, [r7, #11]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	f7f8 fb35 	bl	80020ac <HAL_PCD_EP_Transmit>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f85d 	bl	8009b08 <USBD_Get_USB_Status>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a52:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	461a      	mov	r2, r3
 8009a68:	460b      	mov	r3, r1
 8009a6a:	72fb      	strb	r3, [r7, #11]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a7e:	893b      	ldrh	r3, [r7, #8]
 8009a80:	7af9      	ldrb	r1, [r7, #11]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	f7f8 fabe 	bl	8002004 <HAL_PCD_EP_Receive>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f83a 	bl	8009b08 <USBD_Get_USB_Status>
 8009a94:	4603      	mov	r3, r0
 8009a96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a98:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ab4:	78fa      	ldrb	r2, [r7, #3]
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7f8 fae0 	bl	800207e <HAL_PCD_EP_GetRxCount>
 8009abe:	4603      	mov	r3, r0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <USBD_static_malloc+0x14>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr
 8009adc:	20000c18 	.word	0x20000c18

08009ae0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]

}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr

08009af2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bc80      	pop	{r7}
 8009b06:	4770      	bx	lr

08009b08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d817      	bhi.n	8009b4c <USBD_Get_USB_Status+0x44>
 8009b1c:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <USBD_Get_USB_Status+0x1c>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b3b 	.word	0x08009b3b
 8009b2c:	08009b41 	.word	0x08009b41
 8009b30:	08009b47 	.word	0x08009b47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
    break;
 8009b38:	e00b      	b.n	8009b52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3e:	e008      	b.n	8009b52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b40:	2301      	movs	r3, #1
 8009b42:	73fb      	strb	r3, [r7, #15]
    break;
 8009b44:	e005      	b.n	8009b52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b46:	2302      	movs	r3, #2
 8009b48:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4a:	e002      	b.n	8009b52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b50:	bf00      	nop
  }
  return usb_status;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bc80      	pop	{r7}
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop

08009b60 <arm_sqrt_q31>:
 8009b60:	2800      	cmp	r0, #0
 8009b62:	dd71      	ble.n	8009c48 <arm_sqrt_q31+0xe8>
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	fab0 f780 	clz	r7, r0
 8009b6c:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8009b70:	f018 0a01 	ands.w	sl, r8, #1
 8009b74:	bf16      	itet	ne
 8009b76:	1ebe      	subne	r6, r7, #2
 8009b78:	fa00 f608 	lsleq.w	r6, r0, r8
 8009b7c:	fa00 f606 	lslne.w	r6, r0, r6
 8009b80:	4630      	mov	r0, r6
 8009b82:	4689      	mov	r9, r1
 8009b84:	f7f6 fba4 	bl	80002d0 <__aeabi_i2f>
 8009b88:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8009b8c:	f7f6 fbf4 	bl	8000378 <__aeabi_fmul>
 8009b90:	1043      	asrs	r3, r0, #1
 8009b92:	4830      	ldr	r0, [pc, #192]	; (8009c54 <arm_sqrt_q31+0xf4>)
 8009b94:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8009b98:	1ac0      	subs	r0, r0, r3
 8009b9a:	f7f6 fbed 	bl	8000378 <__aeabi_fmul>
 8009b9e:	f7f6 fd3b 	bl	8000618 <__aeabi_f2iz>
 8009ba2:	fb80 2300 	smull	r2, r3, r0, r0
 8009ba6:	0fd4      	lsrs	r4, r2, #31
 8009ba8:	1071      	asrs	r1, r6, #1
 8009baa:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8009bae:	fb84 4501 	smull	r4, r5, r4, r1
 8009bb2:	0fe3      	lsrs	r3, r4, #31
 8009bb4:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8009bb8:	f1c3 5340 	rsb	r3, r3, #805306368	; 0x30000000
 8009bbc:	fb80 2303 	smull	r2, r3, r0, r3
 8009bc0:	0fd4      	lsrs	r4, r2, #31
 8009bc2:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8009bc6:	00a0      	lsls	r0, r4, #2
 8009bc8:	fb80 2300 	smull	r2, r3, r0, r0
 8009bcc:	0fd2      	lsrs	r2, r2, #31
 8009bce:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8009bd2:	fb81 2302 	smull	r2, r3, r1, r2
 8009bd6:	0fd4      	lsrs	r4, r2, #31
 8009bd8:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8009bdc:	f1c4 5440 	rsb	r4, r4, #805306368	; 0x30000000
 8009be0:	fb80 4504 	smull	r4, r5, r0, r4
 8009be4:	0fe2      	lsrs	r2, r4, #31
 8009be6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8009bea:	0093      	lsls	r3, r2, #2
 8009bec:	fb83 4503 	smull	r4, r5, r3, r3
 8009bf0:	0fe0      	lsrs	r0, r4, #31
 8009bf2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8009bf6:	fb81 0100 	smull	r0, r1, r1, r0
 8009bfa:	0fc2      	lsrs	r2, r0, #31
 8009bfc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8009c00:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8009c04:	fb83 2302 	smull	r2, r3, r3, r2
 8009c08:	0fd0      	lsrs	r0, r2, #31
 8009c0a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009c0e:	0080      	lsls	r0, r0, #2
 8009c10:	fb86 0100 	smull	r0, r1, r6, r0
 8009c14:	0fc3      	lsrs	r3, r0, #31
 8009c16:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	f1ba 0f00 	cmp.w	sl, #0
 8009c20:	d009      	beq.n	8009c36 <arm_sqrt_q31+0xd6>
 8009c22:	3f02      	subs	r7, #2
 8009c24:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8009c28:	107f      	asrs	r7, r7, #1
 8009c2a:	413b      	asrs	r3, r7
 8009c2c:	f8c9 3000 	str.w	r3, [r9]
 8009c30:	2000      	movs	r0, #0
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c3a:	fa43 f308 	asr.w	r3, r3, r8
 8009c3e:	f8c9 3000 	str.w	r3, [r9]
 8009c42:	2000      	movs	r0, #0
 8009c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c48:	2300      	movs	r3, #0
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	5f3759df 	.word	0x5f3759df

08009c58 <arm_cos_q31>:
 8009c58:	f110 5300 	adds.w	r3, r0, #536870912	; 0x20000000
 8009c5c:	bf48      	it	mi
 8009c5e:	f100 4320 	addmi.w	r3, r0, #2684354560	; 0xa0000000
 8009c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c64:	0d9a      	lsrs	r2, r3, #22
 8009c66:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8009c94 <arm_cos_q31+0x3c>
 8009c6a:	eba3 5382 	sub.w	r3, r3, r2, lsl #22
 8009c6e:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 8009c72:	025b      	lsls	r3, r3, #9
 8009c74:	f1c3 4600 	rsb	r6, r3, #2147483648	; 0x80000000
 8009c78:	17e7      	asrs	r7, r4, #31
 8009c7a:	fba6 4504 	umull	r4, r5, r6, r4
 8009c7e:	fb06 5107 	mla	r1, r6, r7, r5
 8009c82:	3201      	adds	r2, #1
 8009c84:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8009c88:	2000      	movs	r0, #0
 8009c8a:	fbc2 0103 	smlal	r0, r1, r2, r3
 8009c8e:	0048      	lsls	r0, r1, #1
 8009c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c92:	bf00      	nop
 8009c94:	0800a694 	.word	0x0800a694

08009c98 <__errno>:
 8009c98:	4b01      	ldr	r3, [pc, #4]	; (8009ca0 <__errno+0x8>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20000180 	.word	0x20000180

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	2600      	movs	r6, #0
 8009ca8:	4d0c      	ldr	r5, [pc, #48]	; (8009cdc <__libc_init_array+0x38>)
 8009caa:	4c0d      	ldr	r4, [pc, #52]	; (8009ce0 <__libc_init_array+0x3c>)
 8009cac:	1b64      	subs	r4, r4, r5
 8009cae:	10a4      	asrs	r4, r4, #2
 8009cb0:	42a6      	cmp	r6, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	f000 fc9c 	bl	800a5f0 <_init>
 8009cb8:	2600      	movs	r6, #0
 8009cba:	4d0a      	ldr	r5, [pc, #40]	; (8009ce4 <__libc_init_array+0x40>)
 8009cbc:	4c0a      	ldr	r4, [pc, #40]	; (8009ce8 <__libc_init_array+0x44>)
 8009cbe:	1b64      	subs	r4, r4, r5
 8009cc0:	10a4      	asrs	r4, r4, #2
 8009cc2:	42a6      	cmp	r6, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ccc:	4798      	blx	r3
 8009cce:	3601      	adds	r6, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd6:	4798      	blx	r3
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800af2c 	.word	0x0800af2c
 8009ce0:	0800af2c 	.word	0x0800af2c
 8009ce4:	0800af2c 	.word	0x0800af2c
 8009ce8:	0800af30 	.word	0x0800af30

08009cec <memset>:
 8009cec:	4603      	mov	r3, r0
 8009cee:	4402      	add	r2, r0
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d100      	bne.n	8009cf6 <memset+0xa>
 8009cf4:	4770      	bx	lr
 8009cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cfa:	e7f9      	b.n	8009cf0 <memset+0x4>

08009cfc <_free_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4605      	mov	r5, r0
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d040      	beq.n	8009d86 <_free_r+0x8a>
 8009d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d08:	1f0c      	subs	r4, r1, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bfb8      	it	lt
 8009d0e:	18e4      	addlt	r4, r4, r3
 8009d10:	f000 f902 	bl	8009f18 <__malloc_lock>
 8009d14:	4a1c      	ldr	r2, [pc, #112]	; (8009d88 <_free_r+0x8c>)
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	b933      	cbnz	r3, 8009d28 <_free_r+0x2c>
 8009d1a:	6063      	str	r3, [r4, #4]
 8009d1c:	6014      	str	r4, [r2, #0]
 8009d1e:	4628      	mov	r0, r5
 8009d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d24:	f000 b8fe 	b.w	8009f24 <__malloc_unlock>
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d908      	bls.n	8009d3e <_free_r+0x42>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	1821      	adds	r1, r4, r0
 8009d30:	428b      	cmp	r3, r1
 8009d32:	bf01      	itttt	eq
 8009d34:	6819      	ldreq	r1, [r3, #0]
 8009d36:	685b      	ldreq	r3, [r3, #4]
 8009d38:	1809      	addeq	r1, r1, r0
 8009d3a:	6021      	streq	r1, [r4, #0]
 8009d3c:	e7ed      	b.n	8009d1a <_free_r+0x1e>
 8009d3e:	461a      	mov	r2, r3
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	b10b      	cbz	r3, 8009d48 <_free_r+0x4c>
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d9fa      	bls.n	8009d3e <_free_r+0x42>
 8009d48:	6811      	ldr	r1, [r2, #0]
 8009d4a:	1850      	adds	r0, r2, r1
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	d10b      	bne.n	8009d68 <_free_r+0x6c>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	4401      	add	r1, r0
 8009d54:	1850      	adds	r0, r2, r1
 8009d56:	4283      	cmp	r3, r0
 8009d58:	6011      	str	r1, [r2, #0]
 8009d5a:	d1e0      	bne.n	8009d1e <_free_r+0x22>
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	4401      	add	r1, r0
 8009d62:	6011      	str	r1, [r2, #0]
 8009d64:	6053      	str	r3, [r2, #4]
 8009d66:	e7da      	b.n	8009d1e <_free_r+0x22>
 8009d68:	d902      	bls.n	8009d70 <_free_r+0x74>
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	e7d6      	b.n	8009d1e <_free_r+0x22>
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	1821      	adds	r1, r4, r0
 8009d74:	428b      	cmp	r3, r1
 8009d76:	bf01      	itttt	eq
 8009d78:	6819      	ldreq	r1, [r3, #0]
 8009d7a:	685b      	ldreq	r3, [r3, #4]
 8009d7c:	1809      	addeq	r1, r1, r0
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	6063      	str	r3, [r4, #4]
 8009d82:	6054      	str	r4, [r2, #4]
 8009d84:	e7cb      	b.n	8009d1e <_free_r+0x22>
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20000e38 	.word	0x20000e38

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0e      	ldr	r6, [pc, #56]	; (8009dc8 <sbrk_aligned+0x3c>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f000 f88c 	bl	8009eb4 <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f887 	bl	8009eb4 <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <sbrk_aligned+0x34>
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d007      	beq.n	8009dc4 <sbrk_aligned+0x38>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f87c 	bl	8009eb4 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d101      	bne.n	8009dc4 <sbrk_aligned+0x38>
 8009dc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	20000e3c 	.word	0x20000e3c

08009dcc <_malloc_r>:
 8009dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd0:	1ccd      	adds	r5, r1, #3
 8009dd2:	f025 0503 	bic.w	r5, r5, #3
 8009dd6:	3508      	adds	r5, #8
 8009dd8:	2d0c      	cmp	r5, #12
 8009dda:	bf38      	it	cc
 8009ddc:	250c      	movcc	r5, #12
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	4607      	mov	r7, r0
 8009de2:	db01      	blt.n	8009de8 <_malloc_r+0x1c>
 8009de4:	42a9      	cmp	r1, r5
 8009de6:	d905      	bls.n	8009df4 <_malloc_r+0x28>
 8009de8:	230c      	movs	r3, #12
 8009dea:	2600      	movs	r6, #0
 8009dec:	603b      	str	r3, [r7, #0]
 8009dee:	4630      	mov	r0, r6
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	4e2e      	ldr	r6, [pc, #184]	; (8009eb0 <_malloc_r+0xe4>)
 8009df6:	f000 f88f 	bl	8009f18 <__malloc_lock>
 8009dfa:	6833      	ldr	r3, [r6, #0]
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	bb34      	cbnz	r4, 8009e4e <_malloc_r+0x82>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ffc2 	bl	8009d8c <sbrk_aligned>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	d14d      	bne.n	8009eaa <_malloc_r+0xde>
 8009e0e:	6834      	ldr	r4, [r6, #0]
 8009e10:	4626      	mov	r6, r4
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	d140      	bne.n	8009e98 <_malloc_r+0xcc>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	eb04 0803 	add.w	r8, r4, r3
 8009e20:	f000 f848 	bl	8009eb4 <_sbrk_r>
 8009e24:	4580      	cmp	r8, r0
 8009e26:	d13a      	bne.n	8009e9e <_malloc_r+0xd2>
 8009e28:	6821      	ldr	r1, [r4, #0]
 8009e2a:	3503      	adds	r5, #3
 8009e2c:	1a6d      	subs	r5, r5, r1
 8009e2e:	f025 0503 	bic.w	r5, r5, #3
 8009e32:	3508      	adds	r5, #8
 8009e34:	2d0c      	cmp	r5, #12
 8009e36:	bf38      	it	cc
 8009e38:	250c      	movcc	r5, #12
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7ff ffa5 	bl	8009d8c <sbrk_aligned>
 8009e42:	3001      	adds	r0, #1
 8009e44:	d02b      	beq.n	8009e9e <_malloc_r+0xd2>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	442b      	add	r3, r5
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	e00e      	b.n	8009e6c <_malloc_r+0xa0>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	1b52      	subs	r2, r2, r5
 8009e52:	d41e      	bmi.n	8009e92 <_malloc_r+0xc6>
 8009e54:	2a0b      	cmp	r2, #11
 8009e56:	d916      	bls.n	8009e86 <_malloc_r+0xba>
 8009e58:	1961      	adds	r1, r4, r5
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	6025      	str	r5, [r4, #0]
 8009e5e:	bf18      	it	ne
 8009e60:	6059      	strne	r1, [r3, #4]
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	bf08      	it	eq
 8009e66:	6031      	streq	r1, [r6, #0]
 8009e68:	5162      	str	r2, [r4, r5]
 8009e6a:	604b      	str	r3, [r1, #4]
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f104 060b 	add.w	r6, r4, #11
 8009e72:	f000 f857 	bl	8009f24 <__malloc_unlock>
 8009e76:	f026 0607 	bic.w	r6, r6, #7
 8009e7a:	1d23      	adds	r3, r4, #4
 8009e7c:	1af2      	subs	r2, r6, r3
 8009e7e:	d0b6      	beq.n	8009dee <_malloc_r+0x22>
 8009e80:	1b9b      	subs	r3, r3, r6
 8009e82:	50a3      	str	r3, [r4, r2]
 8009e84:	e7b3      	b.n	8009dee <_malloc_r+0x22>
 8009e86:	6862      	ldr	r2, [r4, #4]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	bf0c      	ite	eq
 8009e8c:	6032      	streq	r2, [r6, #0]
 8009e8e:	605a      	strne	r2, [r3, #4]
 8009e90:	e7ec      	b.n	8009e6c <_malloc_r+0xa0>
 8009e92:	4623      	mov	r3, r4
 8009e94:	6864      	ldr	r4, [r4, #4]
 8009e96:	e7b2      	b.n	8009dfe <_malloc_r+0x32>
 8009e98:	4634      	mov	r4, r6
 8009e9a:	6876      	ldr	r6, [r6, #4]
 8009e9c:	e7b9      	b.n	8009e12 <_malloc_r+0x46>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	f000 f83e 	bl	8009f24 <__malloc_unlock>
 8009ea8:	e7a1      	b.n	8009dee <_malloc_r+0x22>
 8009eaa:	6025      	str	r5, [r4, #0]
 8009eac:	e7de      	b.n	8009e6c <_malloc_r+0xa0>
 8009eae:	bf00      	nop
 8009eb0:	20000e38 	.word	0x20000e38

08009eb4 <_sbrk_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4d05      	ldr	r5, [pc, #20]	; (8009ed0 <_sbrk_r+0x1c>)
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	602b      	str	r3, [r5, #0]
 8009ec0:	f7f7 f9c4 	bl	800124c <_sbrk>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_sbrk_r+0x1a>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_sbrk_r+0x1a>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	20000e44 	.word	0x20000e44

08009ed4 <siprintf>:
 8009ed4:	b40e      	push	{r1, r2, r3}
 8009ed6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009eda:	b500      	push	{lr}
 8009edc:	b09c      	sub	sp, #112	; 0x70
 8009ede:	ab1d      	add	r3, sp, #116	; 0x74
 8009ee0:	9002      	str	r0, [sp, #8]
 8009ee2:	9006      	str	r0, [sp, #24]
 8009ee4:	9107      	str	r1, [sp, #28]
 8009ee6:	9104      	str	r1, [sp, #16]
 8009ee8:	4808      	ldr	r0, [pc, #32]	; (8009f0c <siprintf+0x38>)
 8009eea:	4909      	ldr	r1, [pc, #36]	; (8009f10 <siprintf+0x3c>)
 8009eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef0:	9105      	str	r1, [sp, #20]
 8009ef2:	6800      	ldr	r0, [r0, #0]
 8009ef4:	a902      	add	r1, sp, #8
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	f000 f876 	bl	8009fe8 <_svfiprintf_r>
 8009efc:	2200      	movs	r2, #0
 8009efe:	9b02      	ldr	r3, [sp, #8]
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	b01c      	add	sp, #112	; 0x70
 8009f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f08:	b003      	add	sp, #12
 8009f0a:	4770      	bx	lr
 8009f0c:	20000180 	.word	0x20000180
 8009f10:	ffff0208 	.word	0xffff0208

08009f14 <__retarget_lock_acquire_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <__retarget_lock_release_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <__malloc_lock>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__malloc_lock+0x8>)
 8009f1a:	f7ff bffb 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	20000e40 	.word	0x20000e40

08009f24 <__malloc_unlock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__malloc_unlock+0x8>)
 8009f26:	f7ff bff6 	b.w	8009f16 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20000e40 	.word	0x20000e40

08009f30 <__ssputs_r>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	688e      	ldr	r6, [r1, #8]
 8009f36:	4682      	mov	sl, r0
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	4690      	mov	r8, r2
 8009f3e:	461f      	mov	r7, r3
 8009f40:	d838      	bhi.n	8009fb4 <__ssputs_r+0x84>
 8009f42:	898a      	ldrh	r2, [r1, #12]
 8009f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f48:	d032      	beq.n	8009fb0 <__ssputs_r+0x80>
 8009f4a:	6825      	ldr	r5, [r4, #0]
 8009f4c:	6909      	ldr	r1, [r1, #16]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	eba5 0901 	sub.w	r9, r5, r1
 8009f54:	6965      	ldr	r5, [r4, #20]
 8009f56:	444b      	add	r3, r9
 8009f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f60:	106d      	asrs	r5, r5, #1
 8009f62:	429d      	cmp	r5, r3
 8009f64:	bf38      	it	cc
 8009f66:	461d      	movcc	r5, r3
 8009f68:	0553      	lsls	r3, r2, #21
 8009f6a:	d531      	bpl.n	8009fd0 <__ssputs_r+0xa0>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7ff ff2d 	bl	8009dcc <_malloc_r>
 8009f72:	4606      	mov	r6, r0
 8009f74:	b950      	cbnz	r0, 8009f8c <__ssputs_r+0x5c>
 8009f76:	230c      	movs	r3, #12
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f7c:	f8ca 3000 	str.w	r3, [sl]
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f86:	81a3      	strh	r3, [r4, #12]
 8009f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8c:	464a      	mov	r2, r9
 8009f8e:	6921      	ldr	r1, [r4, #16]
 8009f90:	f000 face 	bl	800a530 <memcpy>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9e:	81a3      	strh	r3, [r4, #12]
 8009fa0:	6126      	str	r6, [r4, #16]
 8009fa2:	444e      	add	r6, r9
 8009fa4:	6026      	str	r6, [r4, #0]
 8009fa6:	463e      	mov	r6, r7
 8009fa8:	6165      	str	r5, [r4, #20]
 8009faa:	eba5 0509 	sub.w	r5, r5, r9
 8009fae:	60a5      	str	r5, [r4, #8]
 8009fb0:	42be      	cmp	r6, r7
 8009fb2:	d900      	bls.n	8009fb6 <__ssputs_r+0x86>
 8009fb4:	463e      	mov	r6, r7
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	4641      	mov	r1, r8
 8009fba:	6820      	ldr	r0, [r4, #0]
 8009fbc:	f000 fac6 	bl	800a54c <memmove>
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	1b9b      	subs	r3, r3, r6
 8009fc6:	60a3      	str	r3, [r4, #8]
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	4433      	add	r3, r6
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	e7db      	b.n	8009f88 <__ssputs_r+0x58>
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	f000 fad5 	bl	800a580 <_realloc_r>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d1e1      	bne.n	8009fa0 <__ssputs_r+0x70>
 8009fdc:	4650      	mov	r0, sl
 8009fde:	6921      	ldr	r1, [r4, #16]
 8009fe0:	f7ff fe8c 	bl	8009cfc <_free_r>
 8009fe4:	e7c7      	b.n	8009f76 <__ssputs_r+0x46>
	...

08009fe8 <_svfiprintf_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	4698      	mov	r8, r3
 8009fee:	898b      	ldrh	r3, [r1, #12]
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	061b      	lsls	r3, r3, #24
 8009ff4:	460d      	mov	r5, r1
 8009ff6:	4614      	mov	r4, r2
 8009ff8:	b09d      	sub	sp, #116	; 0x74
 8009ffa:	d50e      	bpl.n	800a01a <_svfiprintf_r+0x32>
 8009ffc:	690b      	ldr	r3, [r1, #16]
 8009ffe:	b963      	cbnz	r3, 800a01a <_svfiprintf_r+0x32>
 800a000:	2140      	movs	r1, #64	; 0x40
 800a002:	f7ff fee3 	bl	8009dcc <_malloc_r>
 800a006:	6028      	str	r0, [r5, #0]
 800a008:	6128      	str	r0, [r5, #16]
 800a00a:	b920      	cbnz	r0, 800a016 <_svfiprintf_r+0x2e>
 800a00c:	230c      	movs	r3, #12
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a014:	e0d1      	b.n	800a1ba <_svfiprintf_r+0x1d2>
 800a016:	2340      	movs	r3, #64	; 0x40
 800a018:	616b      	str	r3, [r5, #20]
 800a01a:	2300      	movs	r3, #0
 800a01c:	9309      	str	r3, [sp, #36]	; 0x24
 800a01e:	2320      	movs	r3, #32
 800a020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a024:	2330      	movs	r3, #48	; 0x30
 800a026:	f04f 0901 	mov.w	r9, #1
 800a02a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a02e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1d4 <_svfiprintf_r+0x1ec>
 800a032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a036:	4623      	mov	r3, r4
 800a038:	469a      	mov	sl, r3
 800a03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a03e:	b10a      	cbz	r2, 800a044 <_svfiprintf_r+0x5c>
 800a040:	2a25      	cmp	r2, #37	; 0x25
 800a042:	d1f9      	bne.n	800a038 <_svfiprintf_r+0x50>
 800a044:	ebba 0b04 	subs.w	fp, sl, r4
 800a048:	d00b      	beq.n	800a062 <_svfiprintf_r+0x7a>
 800a04a:	465b      	mov	r3, fp
 800a04c:	4622      	mov	r2, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	4638      	mov	r0, r7
 800a052:	f7ff ff6d 	bl	8009f30 <__ssputs_r>
 800a056:	3001      	adds	r0, #1
 800a058:	f000 80aa 	beq.w	800a1b0 <_svfiprintf_r+0x1c8>
 800a05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a05e:	445a      	add	r2, fp
 800a060:	9209      	str	r2, [sp, #36]	; 0x24
 800a062:	f89a 3000 	ldrb.w	r3, [sl]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 80a2 	beq.w	800a1b0 <_svfiprintf_r+0x1c8>
 800a06c:	2300      	movs	r3, #0
 800a06e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a076:	f10a 0a01 	add.w	sl, sl, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	9307      	str	r3, [sp, #28]
 800a07e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a082:	931a      	str	r3, [sp, #104]	; 0x68
 800a084:	4654      	mov	r4, sl
 800a086:	2205      	movs	r2, #5
 800a088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08c:	4851      	ldr	r0, [pc, #324]	; (800a1d4 <_svfiprintf_r+0x1ec>)
 800a08e:	f000 fa41 	bl	800a514 <memchr>
 800a092:	9a04      	ldr	r2, [sp, #16]
 800a094:	b9d8      	cbnz	r0, 800a0ce <_svfiprintf_r+0xe6>
 800a096:	06d0      	lsls	r0, r2, #27
 800a098:	bf44      	itt	mi
 800a09a:	2320      	movmi	r3, #32
 800a09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a0:	0711      	lsls	r1, r2, #28
 800a0a2:	bf44      	itt	mi
 800a0a4:	232b      	movmi	r3, #43	; 0x2b
 800a0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b0:	d015      	beq.n	800a0de <_svfiprintf_r+0xf6>
 800a0b2:	4654      	mov	r4, sl
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	f04f 0c0a 	mov.w	ip, #10
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c2:	3b30      	subs	r3, #48	; 0x30
 800a0c4:	2b09      	cmp	r3, #9
 800a0c6:	d94e      	bls.n	800a166 <_svfiprintf_r+0x17e>
 800a0c8:	b1b0      	cbz	r0, 800a0f8 <_svfiprintf_r+0x110>
 800a0ca:	9207      	str	r2, [sp, #28]
 800a0cc:	e014      	b.n	800a0f8 <_svfiprintf_r+0x110>
 800a0ce:	eba0 0308 	sub.w	r3, r0, r8
 800a0d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	46a2      	mov	sl, r4
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	e7d2      	b.n	800a084 <_svfiprintf_r+0x9c>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	1d19      	adds	r1, r3, #4
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	9103      	str	r1, [sp, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bfbb      	ittet	lt
 800a0ea:	425b      	neglt	r3, r3
 800a0ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f0:	9307      	strge	r3, [sp, #28]
 800a0f2:	9307      	strlt	r3, [sp, #28]
 800a0f4:	bfb8      	it	lt
 800a0f6:	9204      	strlt	r2, [sp, #16]
 800a0f8:	7823      	ldrb	r3, [r4, #0]
 800a0fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a0fc:	d10c      	bne.n	800a118 <_svfiprintf_r+0x130>
 800a0fe:	7863      	ldrb	r3, [r4, #1]
 800a100:	2b2a      	cmp	r3, #42	; 0x2a
 800a102:	d135      	bne.n	800a170 <_svfiprintf_r+0x188>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	3402      	adds	r4, #2
 800a108:	1d1a      	adds	r2, r3, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	9203      	str	r2, [sp, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	bfb8      	it	lt
 800a112:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a1d8 <_svfiprintf_r+0x1f0>
 800a11c:	2203      	movs	r2, #3
 800a11e:	4650      	mov	r0, sl
 800a120:	7821      	ldrb	r1, [r4, #0]
 800a122:	f000 f9f7 	bl	800a514 <memchr>
 800a126:	b140      	cbz	r0, 800a13a <_svfiprintf_r+0x152>
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	eba0 000a 	sub.w	r0, r0, sl
 800a12e:	fa03 f000 	lsl.w	r0, r3, r0
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	3401      	adds	r4, #1
 800a136:	4303      	orrs	r3, r0
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a13e:	2206      	movs	r2, #6
 800a140:	4826      	ldr	r0, [pc, #152]	; (800a1dc <_svfiprintf_r+0x1f4>)
 800a142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a146:	f000 f9e5 	bl	800a514 <memchr>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d038      	beq.n	800a1c0 <_svfiprintf_r+0x1d8>
 800a14e:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <_svfiprintf_r+0x1f8>)
 800a150:	bb1b      	cbnz	r3, 800a19a <_svfiprintf_r+0x1b2>
 800a152:	9b03      	ldr	r3, [sp, #12]
 800a154:	3307      	adds	r3, #7
 800a156:	f023 0307 	bic.w	r3, r3, #7
 800a15a:	3308      	adds	r3, #8
 800a15c:	9303      	str	r3, [sp, #12]
 800a15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a160:	4433      	add	r3, r6
 800a162:	9309      	str	r3, [sp, #36]	; 0x24
 800a164:	e767      	b.n	800a036 <_svfiprintf_r+0x4e>
 800a166:	460c      	mov	r4, r1
 800a168:	2001      	movs	r0, #1
 800a16a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a16e:	e7a5      	b.n	800a0bc <_svfiprintf_r+0xd4>
 800a170:	2300      	movs	r3, #0
 800a172:	f04f 0c0a 	mov.w	ip, #10
 800a176:	4619      	mov	r1, r3
 800a178:	3401      	adds	r4, #1
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	4620      	mov	r0, r4
 800a17e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a182:	3a30      	subs	r2, #48	; 0x30
 800a184:	2a09      	cmp	r2, #9
 800a186:	d903      	bls.n	800a190 <_svfiprintf_r+0x1a8>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d0c5      	beq.n	800a118 <_svfiprintf_r+0x130>
 800a18c:	9105      	str	r1, [sp, #20]
 800a18e:	e7c3      	b.n	800a118 <_svfiprintf_r+0x130>
 800a190:	4604      	mov	r4, r0
 800a192:	2301      	movs	r3, #1
 800a194:	fb0c 2101 	mla	r1, ip, r1, r2
 800a198:	e7f0      	b.n	800a17c <_svfiprintf_r+0x194>
 800a19a:	ab03      	add	r3, sp, #12
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	462a      	mov	r2, r5
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <_svfiprintf_r+0x1fc>)
 800a1a4:	a904      	add	r1, sp, #16
 800a1a6:	f3af 8000 	nop.w
 800a1aa:	1c42      	adds	r2, r0, #1
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	d1d6      	bne.n	800a15e <_svfiprintf_r+0x176>
 800a1b0:	89ab      	ldrh	r3, [r5, #12]
 800a1b2:	065b      	lsls	r3, r3, #25
 800a1b4:	f53f af2c 	bmi.w	800a010 <_svfiprintf_r+0x28>
 800a1b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ba:	b01d      	add	sp, #116	; 0x74
 800a1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c0:	ab03      	add	r3, sp, #12
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <_svfiprintf_r+0x1fc>)
 800a1ca:	a904      	add	r1, sp, #16
 800a1cc:	f000 f87c 	bl	800a2c8 <_printf_i>
 800a1d0:	e7eb      	b.n	800a1aa <_svfiprintf_r+0x1c2>
 800a1d2:	bf00      	nop
 800a1d4:	0800aef8 	.word	0x0800aef8
 800a1d8:	0800aefe 	.word	0x0800aefe
 800a1dc:	0800af02 	.word	0x0800af02
 800a1e0:	00000000 	.word	0x00000000
 800a1e4:	08009f31 	.word	0x08009f31

0800a1e8 <_printf_common>:
 800a1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	4699      	mov	r9, r3
 800a1f0:	688a      	ldr	r2, [r1, #8]
 800a1f2:	690b      	ldr	r3, [r1, #16]
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	bfb8      	it	lt
 800a1fa:	4613      	movlt	r3, r2
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a202:	460c      	mov	r4, r1
 800a204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a208:	b10a      	cbz	r2, 800a20e <_printf_common+0x26>
 800a20a:	3301      	adds	r3, #1
 800a20c:	6033      	str	r3, [r6, #0]
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	0699      	lsls	r1, r3, #26
 800a212:	bf42      	ittt	mi
 800a214:	6833      	ldrmi	r3, [r6, #0]
 800a216:	3302      	addmi	r3, #2
 800a218:	6033      	strmi	r3, [r6, #0]
 800a21a:	6825      	ldr	r5, [r4, #0]
 800a21c:	f015 0506 	ands.w	r5, r5, #6
 800a220:	d106      	bne.n	800a230 <_printf_common+0x48>
 800a222:	f104 0a19 	add.w	sl, r4, #25
 800a226:	68e3      	ldr	r3, [r4, #12]
 800a228:	6832      	ldr	r2, [r6, #0]
 800a22a:	1a9b      	subs	r3, r3, r2
 800a22c:	42ab      	cmp	r3, r5
 800a22e:	dc28      	bgt.n	800a282 <_printf_common+0x9a>
 800a230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a234:	1e13      	subs	r3, r2, #0
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	bf18      	it	ne
 800a23a:	2301      	movne	r3, #1
 800a23c:	0692      	lsls	r2, r2, #26
 800a23e:	d42d      	bmi.n	800a29c <_printf_common+0xb4>
 800a240:	4649      	mov	r1, r9
 800a242:	4638      	mov	r0, r7
 800a244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a248:	47c0      	blx	r8
 800a24a:	3001      	adds	r0, #1
 800a24c:	d020      	beq.n	800a290 <_printf_common+0xa8>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	68e5      	ldr	r5, [r4, #12]
 800a252:	f003 0306 	and.w	r3, r3, #6
 800a256:	2b04      	cmp	r3, #4
 800a258:	bf18      	it	ne
 800a25a:	2500      	movne	r5, #0
 800a25c:	6832      	ldr	r2, [r6, #0]
 800a25e:	f04f 0600 	mov.w	r6, #0
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	bf08      	it	eq
 800a266:	1aad      	subeq	r5, r5, r2
 800a268:	6922      	ldr	r2, [r4, #16]
 800a26a:	bf08      	it	eq
 800a26c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a270:	4293      	cmp	r3, r2
 800a272:	bfc4      	itt	gt
 800a274:	1a9b      	subgt	r3, r3, r2
 800a276:	18ed      	addgt	r5, r5, r3
 800a278:	341a      	adds	r4, #26
 800a27a:	42b5      	cmp	r5, r6
 800a27c:	d11a      	bne.n	800a2b4 <_printf_common+0xcc>
 800a27e:	2000      	movs	r0, #0
 800a280:	e008      	b.n	800a294 <_printf_common+0xac>
 800a282:	2301      	movs	r3, #1
 800a284:	4652      	mov	r2, sl
 800a286:	4649      	mov	r1, r9
 800a288:	4638      	mov	r0, r7
 800a28a:	47c0      	blx	r8
 800a28c:	3001      	adds	r0, #1
 800a28e:	d103      	bne.n	800a298 <_printf_common+0xb0>
 800a290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a298:	3501      	adds	r5, #1
 800a29a:	e7c4      	b.n	800a226 <_printf_common+0x3e>
 800a29c:	2030      	movs	r0, #48	; 0x30
 800a29e:	18e1      	adds	r1, r4, r3
 800a2a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2aa:	4422      	add	r2, r4
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2b2:	e7c5      	b.n	800a240 <_printf_common+0x58>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	47c0      	blx	r8
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d0e6      	beq.n	800a290 <_printf_common+0xa8>
 800a2c2:	3601      	adds	r6, #1
 800a2c4:	e7d9      	b.n	800a27a <_printf_common+0x92>
	...

0800a2c8 <_printf_i>:
 800a2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	7e0f      	ldrb	r7, [r1, #24]
 800a2ce:	4691      	mov	r9, r2
 800a2d0:	2f78      	cmp	r7, #120	; 0x78
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	469a      	mov	sl, r3
 800a2d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2de:	d807      	bhi.n	800a2f0 <_printf_i+0x28>
 800a2e0:	2f62      	cmp	r7, #98	; 0x62
 800a2e2:	d80a      	bhi.n	800a2fa <_printf_i+0x32>
 800a2e4:	2f00      	cmp	r7, #0
 800a2e6:	f000 80d9 	beq.w	800a49c <_printf_i+0x1d4>
 800a2ea:	2f58      	cmp	r7, #88	; 0x58
 800a2ec:	f000 80a4 	beq.w	800a438 <_printf_i+0x170>
 800a2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2f8:	e03a      	b.n	800a370 <_printf_i+0xa8>
 800a2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2fe:	2b15      	cmp	r3, #21
 800a300:	d8f6      	bhi.n	800a2f0 <_printf_i+0x28>
 800a302:	a101      	add	r1, pc, #4	; (adr r1, 800a308 <_printf_i+0x40>)
 800a304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a308:	0800a361 	.word	0x0800a361
 800a30c:	0800a375 	.word	0x0800a375
 800a310:	0800a2f1 	.word	0x0800a2f1
 800a314:	0800a2f1 	.word	0x0800a2f1
 800a318:	0800a2f1 	.word	0x0800a2f1
 800a31c:	0800a2f1 	.word	0x0800a2f1
 800a320:	0800a375 	.word	0x0800a375
 800a324:	0800a2f1 	.word	0x0800a2f1
 800a328:	0800a2f1 	.word	0x0800a2f1
 800a32c:	0800a2f1 	.word	0x0800a2f1
 800a330:	0800a2f1 	.word	0x0800a2f1
 800a334:	0800a483 	.word	0x0800a483
 800a338:	0800a3a5 	.word	0x0800a3a5
 800a33c:	0800a465 	.word	0x0800a465
 800a340:	0800a2f1 	.word	0x0800a2f1
 800a344:	0800a2f1 	.word	0x0800a2f1
 800a348:	0800a4a5 	.word	0x0800a4a5
 800a34c:	0800a2f1 	.word	0x0800a2f1
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a2f1 	.word	0x0800a2f1
 800a358:	0800a2f1 	.word	0x0800a2f1
 800a35c:	0800a46d 	.word	0x0800a46d
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	1d1a      	adds	r2, r3, #4
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	602a      	str	r2, [r5, #0]
 800a368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a370:	2301      	movs	r3, #1
 800a372:	e0a4      	b.n	800a4be <_printf_i+0x1f6>
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	6829      	ldr	r1, [r5, #0]
 800a378:	0606      	lsls	r6, r0, #24
 800a37a:	f101 0304 	add.w	r3, r1, #4
 800a37e:	d50a      	bpl.n	800a396 <_printf_i+0xce>
 800a380:	680e      	ldr	r6, [r1, #0]
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	2e00      	cmp	r6, #0
 800a386:	da03      	bge.n	800a390 <_printf_i+0xc8>
 800a388:	232d      	movs	r3, #45	; 0x2d
 800a38a:	4276      	negs	r6, r6
 800a38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a390:	230a      	movs	r3, #10
 800a392:	485e      	ldr	r0, [pc, #376]	; (800a50c <_printf_i+0x244>)
 800a394:	e019      	b.n	800a3ca <_printf_i+0x102>
 800a396:	680e      	ldr	r6, [r1, #0]
 800a398:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	bf18      	it	ne
 800a3a0:	b236      	sxthne	r6, r6
 800a3a2:	e7ef      	b.n	800a384 <_printf_i+0xbc>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	1d19      	adds	r1, r3, #4
 800a3aa:	6029      	str	r1, [r5, #0]
 800a3ac:	0601      	lsls	r1, r0, #24
 800a3ae:	d501      	bpl.n	800a3b4 <_printf_i+0xec>
 800a3b0:	681e      	ldr	r6, [r3, #0]
 800a3b2:	e002      	b.n	800a3ba <_printf_i+0xf2>
 800a3b4:	0646      	lsls	r6, r0, #25
 800a3b6:	d5fb      	bpl.n	800a3b0 <_printf_i+0xe8>
 800a3b8:	881e      	ldrh	r6, [r3, #0]
 800a3ba:	2f6f      	cmp	r7, #111	; 0x6f
 800a3bc:	bf0c      	ite	eq
 800a3be:	2308      	moveq	r3, #8
 800a3c0:	230a      	movne	r3, #10
 800a3c2:	4852      	ldr	r0, [pc, #328]	; (800a50c <_printf_i+0x244>)
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3ca:	6865      	ldr	r5, [r4, #4]
 800a3cc:	2d00      	cmp	r5, #0
 800a3ce:	bfa8      	it	ge
 800a3d0:	6821      	ldrge	r1, [r4, #0]
 800a3d2:	60a5      	str	r5, [r4, #8]
 800a3d4:	bfa4      	itt	ge
 800a3d6:	f021 0104 	bicge.w	r1, r1, #4
 800a3da:	6021      	strge	r1, [r4, #0]
 800a3dc:	b90e      	cbnz	r6, 800a3e2 <_printf_i+0x11a>
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	d04d      	beq.n	800a47e <_printf_i+0x1b6>
 800a3e2:	4615      	mov	r5, r2
 800a3e4:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3e8:	fb03 6711 	mls	r7, r3, r1, r6
 800a3ec:	5dc7      	ldrb	r7, [r0, r7]
 800a3ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3f2:	4637      	mov	r7, r6
 800a3f4:	42bb      	cmp	r3, r7
 800a3f6:	460e      	mov	r6, r1
 800a3f8:	d9f4      	bls.n	800a3e4 <_printf_i+0x11c>
 800a3fa:	2b08      	cmp	r3, #8
 800a3fc:	d10b      	bne.n	800a416 <_printf_i+0x14e>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	07de      	lsls	r6, r3, #31
 800a402:	d508      	bpl.n	800a416 <_printf_i+0x14e>
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	6861      	ldr	r1, [r4, #4]
 800a408:	4299      	cmp	r1, r3
 800a40a:	bfde      	ittt	le
 800a40c:	2330      	movle	r3, #48	; 0x30
 800a40e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a412:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a416:	1b52      	subs	r2, r2, r5
 800a418:	6122      	str	r2, [r4, #16]
 800a41a:	464b      	mov	r3, r9
 800a41c:	4621      	mov	r1, r4
 800a41e:	4640      	mov	r0, r8
 800a420:	f8cd a000 	str.w	sl, [sp]
 800a424:	aa03      	add	r2, sp, #12
 800a426:	f7ff fedf 	bl	800a1e8 <_printf_common>
 800a42a:	3001      	adds	r0, #1
 800a42c:	d14c      	bne.n	800a4c8 <_printf_i+0x200>
 800a42e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a432:	b004      	add	sp, #16
 800a434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a438:	4834      	ldr	r0, [pc, #208]	; (800a50c <_printf_i+0x244>)
 800a43a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a43e:	6829      	ldr	r1, [r5, #0]
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	f851 6b04 	ldr.w	r6, [r1], #4
 800a446:	6029      	str	r1, [r5, #0]
 800a448:	061d      	lsls	r5, r3, #24
 800a44a:	d514      	bpl.n	800a476 <_printf_i+0x1ae>
 800a44c:	07df      	lsls	r7, r3, #31
 800a44e:	bf44      	itt	mi
 800a450:	f043 0320 	orrmi.w	r3, r3, #32
 800a454:	6023      	strmi	r3, [r4, #0]
 800a456:	b91e      	cbnz	r6, 800a460 <_printf_i+0x198>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	f023 0320 	bic.w	r3, r3, #32
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	2310      	movs	r3, #16
 800a462:	e7af      	b.n	800a3c4 <_printf_i+0xfc>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	f043 0320 	orr.w	r3, r3, #32
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	2378      	movs	r3, #120	; 0x78
 800a46e:	4828      	ldr	r0, [pc, #160]	; (800a510 <_printf_i+0x248>)
 800a470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a474:	e7e3      	b.n	800a43e <_printf_i+0x176>
 800a476:	0659      	lsls	r1, r3, #25
 800a478:	bf48      	it	mi
 800a47a:	b2b6      	uxthmi	r6, r6
 800a47c:	e7e6      	b.n	800a44c <_printf_i+0x184>
 800a47e:	4615      	mov	r5, r2
 800a480:	e7bb      	b.n	800a3fa <_printf_i+0x132>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	6826      	ldr	r6, [r4, #0]
 800a486:	1d18      	adds	r0, r3, #4
 800a488:	6961      	ldr	r1, [r4, #20]
 800a48a:	6028      	str	r0, [r5, #0]
 800a48c:	0635      	lsls	r5, r6, #24
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	d501      	bpl.n	800a496 <_printf_i+0x1ce>
 800a492:	6019      	str	r1, [r3, #0]
 800a494:	e002      	b.n	800a49c <_printf_i+0x1d4>
 800a496:	0670      	lsls	r0, r6, #25
 800a498:	d5fb      	bpl.n	800a492 <_printf_i+0x1ca>
 800a49a:	8019      	strh	r1, [r3, #0]
 800a49c:	2300      	movs	r3, #0
 800a49e:	4615      	mov	r5, r2
 800a4a0:	6123      	str	r3, [r4, #16]
 800a4a2:	e7ba      	b.n	800a41a <_printf_i+0x152>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	1d1a      	adds	r2, r3, #4
 800a4aa:	602a      	str	r2, [r5, #0]
 800a4ac:	681d      	ldr	r5, [r3, #0]
 800a4ae:	6862      	ldr	r2, [r4, #4]
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 f82f 	bl	800a514 <memchr>
 800a4b6:	b108      	cbz	r0, 800a4bc <_printf_i+0x1f4>
 800a4b8:	1b40      	subs	r0, r0, r5
 800a4ba:	6060      	str	r0, [r4, #4]
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c6:	e7a8      	b.n	800a41a <_printf_i+0x152>
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	47d0      	blx	sl
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	d0ab      	beq.n	800a42e <_printf_i+0x166>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	079b      	lsls	r3, r3, #30
 800a4da:	d413      	bmi.n	800a504 <_printf_i+0x23c>
 800a4dc:	68e0      	ldr	r0, [r4, #12]
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	4298      	cmp	r0, r3
 800a4e2:	bfb8      	it	lt
 800a4e4:	4618      	movlt	r0, r3
 800a4e6:	e7a4      	b.n	800a432 <_printf_i+0x16a>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	47d0      	blx	sl
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d09b      	beq.n	800a42e <_printf_i+0x166>
 800a4f6:	3501      	adds	r5, #1
 800a4f8:	68e3      	ldr	r3, [r4, #12]
 800a4fa:	9903      	ldr	r1, [sp, #12]
 800a4fc:	1a5b      	subs	r3, r3, r1
 800a4fe:	42ab      	cmp	r3, r5
 800a500:	dcf2      	bgt.n	800a4e8 <_printf_i+0x220>
 800a502:	e7eb      	b.n	800a4dc <_printf_i+0x214>
 800a504:	2500      	movs	r5, #0
 800a506:	f104 0619 	add.w	r6, r4, #25
 800a50a:	e7f5      	b.n	800a4f8 <_printf_i+0x230>
 800a50c:	0800af09 	.word	0x0800af09
 800a510:	0800af1a 	.word	0x0800af1a

0800a514 <memchr>:
 800a514:	4603      	mov	r3, r0
 800a516:	b510      	push	{r4, lr}
 800a518:	b2c9      	uxtb	r1, r1
 800a51a:	4402      	add	r2, r0
 800a51c:	4293      	cmp	r3, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	d101      	bne.n	800a526 <memchr+0x12>
 800a522:	2000      	movs	r0, #0
 800a524:	e003      	b.n	800a52e <memchr+0x1a>
 800a526:	7804      	ldrb	r4, [r0, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	428c      	cmp	r4, r1
 800a52c:	d1f6      	bne.n	800a51c <memchr+0x8>
 800a52e:	bd10      	pop	{r4, pc}

0800a530 <memcpy>:
 800a530:	440a      	add	r2, r1
 800a532:	4291      	cmp	r1, r2
 800a534:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a538:	d100      	bne.n	800a53c <memcpy+0xc>
 800a53a:	4770      	bx	lr
 800a53c:	b510      	push	{r4, lr}
 800a53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a542:	4291      	cmp	r1, r2
 800a544:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a548:	d1f9      	bne.n	800a53e <memcpy+0xe>
 800a54a:	bd10      	pop	{r4, pc}

0800a54c <memmove>:
 800a54c:	4288      	cmp	r0, r1
 800a54e:	b510      	push	{r4, lr}
 800a550:	eb01 0402 	add.w	r4, r1, r2
 800a554:	d902      	bls.n	800a55c <memmove+0x10>
 800a556:	4284      	cmp	r4, r0
 800a558:	4623      	mov	r3, r4
 800a55a:	d807      	bhi.n	800a56c <memmove+0x20>
 800a55c:	1e43      	subs	r3, r0, #1
 800a55e:	42a1      	cmp	r1, r4
 800a560:	d008      	beq.n	800a574 <memmove+0x28>
 800a562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a56a:	e7f8      	b.n	800a55e <memmove+0x12>
 800a56c:	4601      	mov	r1, r0
 800a56e:	4402      	add	r2, r0
 800a570:	428a      	cmp	r2, r1
 800a572:	d100      	bne.n	800a576 <memmove+0x2a>
 800a574:	bd10      	pop	{r4, pc}
 800a576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a57e:	e7f7      	b.n	800a570 <memmove+0x24>

0800a580 <_realloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	4680      	mov	r8, r0
 800a586:	4614      	mov	r4, r2
 800a588:	460e      	mov	r6, r1
 800a58a:	b921      	cbnz	r1, 800a596 <_realloc_r+0x16>
 800a58c:	4611      	mov	r1, r2
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f7ff bc1b 	b.w	8009dcc <_malloc_r>
 800a596:	b92a      	cbnz	r2, 800a5a4 <_realloc_r+0x24>
 800a598:	f7ff fbb0 	bl	8009cfc <_free_r>
 800a59c:	4625      	mov	r5, r4
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	f000 f81b 	bl	800a5de <_malloc_usable_size_r>
 800a5a8:	4284      	cmp	r4, r0
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	d802      	bhi.n	800a5b4 <_realloc_r+0x34>
 800a5ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5b2:	d812      	bhi.n	800a5da <_realloc_r+0x5a>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	f7ff fc08 	bl	8009dcc <_malloc_r>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0ed      	beq.n	800a59e <_realloc_r+0x1e>
 800a5c2:	42bc      	cmp	r4, r7
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	bf28      	it	cs
 800a5ca:	463a      	movcs	r2, r7
 800a5cc:	f7ff ffb0 	bl	800a530 <memcpy>
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7ff fb92 	bl	8009cfc <_free_r>
 800a5d8:	e7e1      	b.n	800a59e <_realloc_r+0x1e>
 800a5da:	4635      	mov	r5, r6
 800a5dc:	e7df      	b.n	800a59e <_realloc_r+0x1e>

0800a5de <_malloc_usable_size_r>:
 800a5de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e2:	1f18      	subs	r0, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bfbc      	itt	lt
 800a5e8:	580b      	ldrlt	r3, [r1, r0]
 800a5ea:	18c0      	addlt	r0, r0, r3
 800a5ec:	4770      	bx	lr
	...

0800a5f0 <_init>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	bf00      	nop
 800a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f6:	bc08      	pop	{r3}
 800a5f8:	469e      	mov	lr, r3
 800a5fa:	4770      	bx	lr

0800a5fc <_fini>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	bf00      	nop
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr
