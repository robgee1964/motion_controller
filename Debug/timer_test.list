
timer_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  0800b180  0800b180  0001b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae4  0800bae4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bae4  0800bae4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bae4  0800bae4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae8  0800bae8  0001bae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800baec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c0c  200001e0  0800bccc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  0800bccc  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e7e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b0  00000000  00000000  00034087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00037638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00038780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001befd  00000000  00000000  000397a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a78  00000000  00000000  000556a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe3a  00000000  00000000  0006a11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  000f9f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f80  00000000  00000000  000fa018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000dc6  00000000  00000000  000fef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b168 	.word	0x0800b168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800b168 	.word	0x0800b168

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	; 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2iz>:
 80004e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004e8:	d30f      	bcc.n	800050a <__aeabi_f2iz+0x2a>
 80004ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d90d      	bls.n	8000510 <__aeabi_f2iz+0x30>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	bf18      	it	ne
 8000506:	4240      	negne	r0, r0
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr
 8000510:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000514:	d101      	bne.n	800051a <__aeabi_f2iz+0x3a>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d105      	bne.n	8000526 <__aeabi_f2iz+0x46>
 800051a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800051e:	bf08      	it	eq
 8000520:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


  set_led_rate(LED_FREQ, LED_DUTY);
 8000532:	2114      	movs	r1, #20
 8000534:	2003      	movs	r0, #3
 8000536:	f000 fad5 	bl	8000ae4 <set_led_rate>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	483d      	ldr	r0, [pc, #244]	; (8000638 <main+0x10c>)
 8000542:	f001 f9b8 	bl	80018b6 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 feab 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f881 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f9ef 	bl	8000930 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000552:	f000 f8d7 	bl	8000704 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000556:	f000 f975 	bl	8000844 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800055a:	f008 ff0f 	bl	800937c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  spwm.psc = htim1.Init.Prescaler;
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <main+0x110>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <main+0x114>)
 8000564:	6093      	str	r3, [r2, #8]
  spwm.ccr1 = htim1.Instance->CCR1;
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <main+0x110>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056c:	4a34      	ldr	r2, [pc, #208]	; (8000640 <main+0x114>)
 800056e:	60d3      	str	r3, [r2, #12]
  HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4830      	ldr	r0, [pc, #192]	; (8000638 <main+0x10c>)
 8000578:	f001 f99d 	bl	80018b6 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	2019      	movs	r0, #25
 8000582:	f000 ffc6 	bl	8001512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000586:	2019      	movs	r0, #25
 8000588:	f000 ffdf 	bl	800154a <HAL_NVIC_EnableIRQ>



  // Prepare accel steps
  uint32_t psc = spwm.psc;
 800058c:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <main+0x114>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	607b      	str	r3, [r7, #4]
  for (uint32_t i = 0; i < ACCEL_STEPS ; i++)
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	e00d      	b.n	80005b4 <main+0x88>
  {
    psc = (psc * ACCEL_K) >> 8;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	22dc      	movs	r2, #220	; 0xdc
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	607b      	str	r3, [r7, #4]
    a_psc[i] = psc;
 80005a4:	4927      	ldr	r1, [pc, #156]	; (8000644 <main+0x118>)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uint32_t i = 0; i < ACCEL_STEPS ; i++)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b09      	cmp	r3, #9
 80005b8:	d9ee      	bls.n	8000598 <main+0x6c>
  }

  motion_test();
 80005ba:	f000 fb2f 	bl	8000c1c <motion_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  static uint32_t bg_tick;
  bg_tick = HAL_GetTick() + BGLOOP_RATE;
 80005be:	f000 fec7 	bl	8001350 <HAL_GetTick>
 80005c2:	4603      	mov	r3, r0
 80005c4:	3314      	adds	r3, #20
 80005c6:	4a20      	ldr	r2, [pc, #128]	; (8000648 <main+0x11c>)
 80005c8:	6013      	str	r3, [r2, #0]
  while (1)
  {
    if (HAL_GetTick() >= bg_tick)
 80005ca:	f000 fec1 	bl	8001350 <HAL_GetTick>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <main+0x11c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d306      	bcc.n	80005e6 <main+0xba>
    {
      bg_tick += BGLOOP_RATE;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <main+0x11c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3314      	adds	r3, #20
 80005de:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <main+0x11c>)
 80005e0:	6013      	str	r3, [r2, #0]
      bg_proc();
 80005e2:	f000 fab7 	bl	8000b54 <bg_proc>
    }

    if (HAL_GetTick() >= sled.next_change)
 80005e6:	f000 feb3 	bl	8001350 <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <main+0x120>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3ea      	bcc.n	80005ca <main+0x9e>
    {
      if (sled.state == GPIO_PIN_SET)
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0x120>)
 80005f6:	7b1b      	ldrb	r3, [r3, #12]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d10a      	bne.n	8000612 <main+0xe6>
      {
        sled.state = GPIO_PIN_RESET;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0x120>)
 80005fe:	2200      	movs	r2, #0
 8000600:	731a      	strb	r2, [r3, #12]
        sled.next_change += sled.on_ticks;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <main+0x120>)
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <main+0x120>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0x120>)
 800060e:	6093      	str	r3, [r2, #8]
 8000610:	e009      	b.n	8000626 <main+0xfa>
      }
      else
      {
        sled.state = GPIO_PIN_SET;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <main+0x120>)
 8000614:	2201      	movs	r2, #1
 8000616:	731a      	strb	r2, [r3, #12]
        sled.next_change += sled.off_ticks;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <main+0x120>)
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <main+0x120>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <main+0x120>)
 8000624:	6093      	str	r3, [r2, #8]
      }
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, sled.state);
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <main+0x120>)
 8000628:	7b1b      	ldrb	r3, [r3, #12]
 800062a:	461a      	mov	r2, r3
 800062c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000630:	4801      	ldr	r0, [pc, #4]	; (8000638 <main+0x10c>)
 8000632:	f001 f940 	bl	80018b6 <HAL_GPIO_WritePin>
    if (HAL_GetTick() >= bg_tick)
 8000636:	e7c8      	b.n	80005ca <main+0x9e>
 8000638:	40011000 	.word	0x40011000
 800063c:	200001fc 	.word	0x200001fc
 8000640:	2000029c 	.word	0x2000029c
 8000644:	200002ac 	.word	0x200002ac
 8000648:	200002d4 	.word	0x200002d4
 800064c:	2000028c 	.word	0x2000028c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 fc0a 	bl	8009e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800069c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fde0 	bl	800326c <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006b2:	f000 faf9 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f84c 	bl	8003770 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006de:	f000 fae3 	bl	8000ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006e2:	2310      	movs	r3, #16
 80006e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 f9a5 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006f8:	f000 fad6 	bl	8000ca8 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	; 0x58
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f009 fb9b 	bl	8009e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000742:	4b3e      	ldr	r3, [pc, #248]	; (800083c <MX_TIM1_Init+0x138>)
 8000744:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <MX_TIM1_Init+0x13c>)
 8000746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000748:	4b3c      	ldr	r3, [pc, #240]	; (800083c <MX_TIM1_Init+0x138>)
 800074a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800074e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <MX_TIM1_Init+0x138>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <MX_TIM1_Init+0x138>)
 8000758:	2209      	movs	r2, #9
 800075a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_TIM1_Init+0x138>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <MX_TIM1_Init+0x138>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_TIM1_Init+0x138>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076e:	4833      	ldr	r0, [pc, #204]	; (800083c <MX_TIM1_Init+0x138>)
 8000770:	f003 fa1a 	bl	8003ba8 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800077a:	f000 fa95 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000788:	4619      	mov	r1, r3
 800078a:	482c      	ldr	r0, [pc, #176]	; (800083c <MX_TIM1_Init+0x138>)
 800078c:	f003 ffa4 	bl	80046d8 <HAL_TIM_ConfigClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000796:	f000 fa87 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079a:	4828      	ldr	r0, [pc, #160]	; (800083c <MX_TIM1_Init+0x138>)
 800079c:	f003 fb94 	bl	8003ec8 <HAL_TIM_PWM_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007a6:	f000 fa7f 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80007aa:	2330      	movs	r3, #48	; 0x30
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b6:	4619      	mov	r1, r3
 80007b8:	4820      	ldr	r0, [pc, #128]	; (800083c <MX_TIM1_Init+0x138>)
 80007ba:	f004 fbe1 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007c4:	f000 fa70 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5;
 80007cc:	2305      	movs	r3, #5
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_TIM1_Init+0x138>)
 80007ee:	f003 feb5 	bl	800455c <HAL_TIM_PWM_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007f8:	f000 fa56 	bl	8000ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM1_Init+0x138>)
 8000820:	f004 fc0c 	bl	800503c <HAL_TIMEx_ConfigBreakDeadTime>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800082a:	f000 fa3d 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM1_Init+0x138>)
 8000830:	f000 fbf0 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3758      	adds	r7, #88	; 0x58
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200001fc 	.word	0x200001fc
 8000840:	40012c00 	.word	0x40012c00

08000844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_TIM3_Init+0xe4>)
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <MX_TIM3_Init+0xe8>)
 800087a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_TIM3_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_TIM3_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_TIM3_Init+0xe4>)
 800088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_TIM3_Init+0xe4>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_TIM3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089c:	4822      	ldr	r0, [pc, #136]	; (8000928 <MX_TIM3_Init+0xe4>)
 800089e:	f003 f983 	bl	8003ba8 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008a8:	f000 f9fe 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008ac:	481e      	ldr	r0, [pc, #120]	; (8000928 <MX_TIM3_Init+0xe4>)
 80008ae:	f003 f9ca 	bl	8003c46 <HAL_TIM_OC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008b8:	f000 f9f6 	bl	8000ca8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008bc:	2307      	movs	r3, #7
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4817      	ldr	r0, [pc, #92]	; (8000928 <MX_TIM3_Init+0xe4>)
 80008cc:	f003 ffc8 	bl	8004860 <HAL_TIM_SlaveConfigSynchro>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008d6:	f000 f9e7 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <MX_TIM3_Init+0xe4>)
 80008ea:	f004 fb49 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80008f4:	f000 f9d8 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80008fc:	230a      	movs	r3, #10
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_TIM3_Init+0xe4>)
 8000910:	f003 fdcc 	bl	80044ac <HAL_TIM_OC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800091a:	f000 f9c5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	; 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000244 	.word	0x20000244
 800092c:	40000400 	.word	0x40000400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, pin_debug_Pin|USB_DISC_Pin|LED_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0xc4>)
 80009ac:	f000 ff83 	bl	80018b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pin_debug_Pin USB_DISC_Pin LED_Pin */
  GPIO_InitStruct.Pin = pin_debug_Pin|USB_DISC_Pin|LED_Pin;
 80009b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <MX_GPIO_Init+0xc4>)
 80009ca:	f000 fdd9 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_GPIO_Init+0xc8>)
 80009e2:	f000 fdcd 	bl	8001580 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40010800 	.word	0x40010800

080009fc <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  // TODO: Don't use the HAL as it combines the **individual** timer IRQs into
  // unified callback, as a result I have to check the timer instance
  if (htim->Instance == TIM3)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d13e      	bne.n	8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x90>
  {
//    __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
    htim1.Instance->CCER &= ~TIM_CCER_CC1E;
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6a1a      	ldr	r2, [r3, #32]
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0201 	bic.w	r2, r2, #1
 8000a1c:	621a      	str	r2, [r3, #32]
    htim1.Instance->CR1 &= ~(TIM_CR1_CEN);
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0201 	bic.w	r2, r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
    htim3.Instance->CNT = 0;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
    htim1.Instance->CNT = 0;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
    htim1.Instance->CCR1 = spwm.ccr1;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000a44:	68d2      	ldr	r2, [r2, #12]
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
    htim1.Instance->PSC = spwm.psc;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000a4e:	6892      	ldr	r2, [r2, #8]
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
    htim1.Instance->EGR |= TIM_EGR_UG;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f042 0201 	orr.w	r2, r2, #1
 8000a60:	615a      	str	r2, [r3, #20]
    set_led_rate(LED_FREQ*2, 50);
 8000a62:	2132      	movs	r1, #50	; 0x32
 8000a64:	2006      	movs	r0, #6
 8000a66:	f000 f83d 	bl	8000ae4 <set_led_rate>
    HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000a72:	f000 ff20 	bl	80018b6 <HAL_GPIO_WritePin>
    spwm.running = false;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
    htim1.Init.Prescaler = spwm.psc;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a82:	6053      	str	r3, [r2, #4]
    HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a88:	f003 fb5e 	bl	8004148 <HAL_TIM_PWM_Stop_IT>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40000400 	.word	0x40000400
 8000a98:	200001fc 	.word	0x200001fc
 8000a9c:	20000244 	.word	0x20000244
 8000aa0:	2000029c 	.word	0x2000029c
 8000aa4:	40011000 	.word	0x40011000

08000aa8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  // See comment in OC delay callback
  if (htim->Instance == TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10d      	bne.n	8000ad6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
  {
    //HAL_GPIO_TogglePin(pin_debug_GPIO_Port, pin_debug_Pin);
    uint32_t psc_new = (htim->Init.Prescaler * 7) >> 3;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	1a9b      	subs	r3, r3, r2
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	60fb      	str	r3, [r7, #12]
    htim->Instance->PSC = psc_new;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
    htim->Init.Prescaler = psc_new;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	605a      	str	r2, [r3, #4]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40012c00 	.word	0x40012c00

08000ae4 <set_led_rate>:

static void set_led_rate(uint32_t freq, uint32_t dr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t period_ticks = uwTickFreq * 1000U / freq;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <set_led_rate+0x64>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	fb03 f202 	mul.w	r2, r3, r2
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	60fb      	str	r3, [r7, #12]
  sled.on_ticks = (period_ticks * dr) / 100;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <set_led_rate+0x68>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <set_led_rate+0x6c>)
 8000b16:	6013      	str	r3, [r2, #0]
  sled.off_ticks = (period_ticks * (100 - dr) / 100);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	fb02 f303 	mul.w	r3, r2, r3
 8000b24:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <set_led_rate+0x68>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <set_led_rate+0x6c>)
 8000b2e:	6053      	str	r3, [r2, #4]
  sled.next_change = HAL_GetTick() + sled.off_ticks;
 8000b30:	f000 fc0e 	bl	8001350 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <set_led_rate+0x6c>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <set_led_rate+0x6c>)
 8000b3e:	6093      	str	r3, [r2, #8]
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	51eb851f 	.word	0x51eb851f
 8000b50:	2000028c 	.word	0x2000028c

08000b54 <bg_proc>:

static void bg_proc(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  // Check for button press
  static GPIO_PinState btn_prev = GPIO_PIN_RESET;
  static uint8_t buff[30];
  GPIO_PinState btn_state = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4827      	ldr	r0, [pc, #156]	; (8000bfc <bg_proc+0xa8>)
 8000b5e:	f000 fe93 	bl	8001888 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	71bb      	strb	r3, [r7, #6]
  bool btn_press = false;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if (btn_state != btn_prev)
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <bg_proc+0xac>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	79ba      	ldrb	r2, [r7, #6]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d008      	beq.n	8000b86 <bg_proc+0x32>
  {
    if (btn_prev == GPIO_PIN_RESET)
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <bg_proc+0xac>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <bg_proc+0x2c>
    {
      btn_press = true;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
    }
    btn_prev = btn_state;
 8000b80:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <bg_proc+0xac>)
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	7013      	strb	r3, [r2, #0]
  }

  if (!spwm.running)
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <bg_proc+0xb0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d02d      	beq.n	8000bf2 <bg_proc+0x9e>
  {
    if (btn_press)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d02a      	beq.n	8000bf2 <bg_proc+0x9e>
    {
      sprintf((void*)buff, "Starting pulses\r\n");
 8000b9c:	491a      	ldr	r1, [pc, #104]	; (8000c08 <bg_proc+0xb4>)
 8000b9e:	481b      	ldr	r0, [pc, #108]	; (8000c0c <bg_proc+0xb8>)
 8000ba0:	f009 fa76 	bl	800a090 <siprintf>
      (void)CDC_Transmit_FS(buff, strlen((void*)buff));
 8000ba4:	4819      	ldr	r0, [pc, #100]	; (8000c0c <bg_proc+0xb8>)
 8000ba6:	f7ff fad1 	bl	800014c <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <bg_proc+0xb8>)
 8000bb2:	f008 fca7 	bl	8009504 <CDC_Transmit_FS>
      htim3.Instance->CNT = 0;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <bg_proc+0xbc>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <bg_proc+0xc0>)
 8000bc6:	f000 fe76 	bl	80018b6 <HAL_GPIO_WritePin>
      HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <bg_proc+0xbc>)
 8000bce:	f003 f893 	bl	8003cf8 <HAL_TIM_OC_Start_IT>
      htim1.Init.Prescaler = spwm.psc;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <bg_proc+0xb0>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <bg_proc+0xc4>)
 8000bd8:	6053      	str	r3, [r2, #4]
      __HAL_TIM_CLEAR_FLAG(&htim1, TIM_IT_CC1);
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <bg_proc+0xc4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f06f 0202 	mvn.w	r2, #2
 8000be2:	611a      	str	r2, [r3, #16]
//      HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, a_psc, ACCEL_STEPS);
      HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000be4:	2100      	movs	r1, #0
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <bg_proc+0xc4>)
 8000be8:	f003 f9c6 	bl	8003f78 <HAL_TIM_PWM_Start_IT>
      spwm.running = true;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <bg_proc+0xb0>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
    }
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	200002d8 	.word	0x200002d8
 8000c04:	2000029c 	.word	0x2000029c
 8000c08:	0800b180 	.word	0x0800b180
 8000c0c:	200002dc 	.word	0x200002dc
 8000c10:	20000244 	.word	0x20000244
 8000c14:	40011000 	.word	0x40011000
 8000c18:	200001fc 	.word	0x200001fc

08000c1c <motion_test>:
#define NUM_STEPS       600
#define ACCEL           2000
#define MAX_SPEED       500

static void motion_test(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <motion_test+0x84>)
 8000c2a:	f000 fe44 	bl	80018b6 <HAL_GPIO_WritePin>
  uint32_t *p_motion = motion_plan_fp(NUM_STEPS, ACCEL, MAX_SPEED);
 8000c2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c36:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000c3a:	f000 f83b 	bl	8000cb4 <motion_plan_fp>
 8000c3e:	6038      	str	r0, [r7, #0]
  HAL_GPIO_WritePin(pin_debug_GPIO_Port, pin_debug_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c46:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <motion_test+0x84>)
 8000c48:	f000 fe35 	bl	80018b6 <HAL_GPIO_WritePin>
  p_motion = motion_plan_fp(5, ACCEL, MAX_SPEED);
 8000c4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c54:	2005      	movs	r0, #5
 8000c56:	f000 f82d 	bl	8000cb4 <motion_plan_fp>
 8000c5a:	6038      	str	r0, [r7, #0]
  p_motion = motion_plan_fp(10, ACCEL, MAX_SPEED);
 8000c5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c64:	200a      	movs	r0, #10
 8000c66:	f000 f825 	bl	8000cb4 <motion_plan_fp>
 8000c6a:	6038      	str	r0, [r7, #0]

  for (uint32_t i = 0; i < NUM_STEPS; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	e00c      	b.n	8000c8c <motion_test+0x70>
  {
    printf("step %lu, speed %lu\n\r", i, p_motion[i]);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <motion_test+0x88>)
 8000c82:	f009 f9dd 	bl	800a040 <iprintf>
  for (uint32_t i = 0; i < NUM_STEPS; i++)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000c92:	d3ee      	bcc.n	8000c72 <motion_test+0x56>
  }

  motion_complete();
 8000c94:	f000 f926 	bl	8000ee4 <motion_complete>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	0800b194 	.word	0x0800b194

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <motion_plan_fp>:
 * @param max_accel
 * @param max_speed
 * @return
 */
uint32_t* motion_plan_fp(uint16_t s_target, uint16_t max_accel, uint16_t max_speed)
{
 8000cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb8:	4614      	mov	r4, r2
 8000cba:	4607      	mov	r7, r0
 8000cbc:	b085      	sub	sp, #20

  p_motion_buff = malloc(s_target*sizeof(uint32_t));
 8000cbe:	0080      	lsls	r0, r0, #2
{
 8000cc0:	4688      	mov	r8, r1
  p_motion_buff = malloc(s_target*sizeof(uint32_t));
 8000cc2:	f009 f8c9 	bl	8009e58 <malloc>

  // See if are enough steps to acheive the specified speed (113/710 is pi/2))
  uint32_t temp = (uint32_t)max_speed;
  temp *= (uint32_t)temp;

  uint32_t s_min = (temp * 355)/
 8000cc6:	f240 1163 	movw	r1, #355	; 0x163
                    ((uint32_t)max_accel * 226UL);
 8000cca:	22e2      	movs	r2, #226	; 0xe2
  temp *= (uint32_t)temp;
 8000ccc:	fb04 f304 	mul.w	r3, r4, r4
                    ((uint32_t)max_accel * 226UL);
 8000cd0:	fb02 f208 	mul.w	r2, r2, r8
  uint32_t s_min = (temp * 355)/
 8000cd4:	fb01 f303 	mul.w	r3, r1, r3
 8000cd8:	fbb3 f3f2 	udiv	r3, r3, r2
  p_motion_buff = malloc(s_target*sizeof(uint32_t));
 8000cdc:	4e7c      	ldr	r6, [pc, #496]	; (8000ed0 <motion_plan_fp+0x21c>)

  uint32_t nmax;
  if (s_target < s_min)
 8000cde:	429f      	cmp	r7, r3
  p_motion_buff = malloc(s_target*sizeof(uint32_t));
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	6030      	str	r0, [r6, #0]
  if (s_target < s_min)
 8000ce4:	d306      	bcc.n	8000cf4 <motion_plan_fp+0x40>
    nmax >>= 16;
#endif
  }
  else
  {
    nmax = (uint32_t)max_speed - SPEED_MIN;
 8000ce6:	3c1e      	subs	r4, #30
 8000ce8:	9403      	str	r4, [sp, #12]
  uint32_t s_idx = 0;
  uint32_t s_accel = 0;
  uint32_t n = SPEED_MIN<<8;                // q8
  bool accel_done = false;

  while(s_idx < s_target)
 8000cea:	b9af      	cbnz	r7, 8000d18 <motion_plan_fp+0x64>
  {
    s_idx++;
    *p_buff++ = ((uint32_t*)p_motion_buff)[d_step];
  }

  return (uint32_t*)p_motion_buff;
 8000cec:	6830      	ldr	r0, [r6, #0]

}
 8000cee:	b005      	add	sp, #20
 8000cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    temp = (452UL * (uint32_t)max_accel * (uint32_t)s_target)/355UL;
 8000cf4:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8000cf8:	fb08 f007 	mul.w	r0, r8, r7
 8000cfc:	fb03 f000 	mul.w	r0, r3, r0
 8000d00:	4b74      	ldr	r3, [pc, #464]	; (8000ed4 <motion_plan_fp+0x220>)
    arm_sqrt_q31(temp, (q31_t*)&nmax);
 8000d02:	a903      	add	r1, sp, #12
    temp = (452UL * (uint32_t)max_accel * (uint32_t)s_target)/355UL;
 8000d04:	fba3 3000 	umull	r3, r0, r3, r0
    arm_sqrt_q31(temp, (q31_t*)&nmax);
 8000d08:	0a00      	lsrs	r0, r0, #8
 8000d0a:	f008 ffdf 	bl	8009ccc <arm_sqrt_q31>
    nmax >>= 16;
 8000d0e:	f8bd 400e 	ldrh.w	r4, [sp, #14]
 8000d12:	9403      	str	r4, [sp, #12]
  while(s_idx < s_target)
 8000d14:	2f00      	cmp	r7, #0
 8000d16:	d0e9      	beq.n	8000cec <motion_plan_fp+0x38>
  t_mult += (nmax * 355)/2;
 8000d18:	f240 1363 	movw	r3, #355	; 0x163
 8000d1c:	fb03 f404 	mul.w	r4, r3, r4
    *p_buff++ = n;
 8000d20:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
  uint32_t t_mult = (uint32_t)max_accel*T_TICK_NUM*113;       // pi == 355/113
 8000d24:	f244 12c5 	movw	r2, #16837	; 0x41c5
    *p_buff++ = n;
 8000d28:	f845 3b04 	str.w	r3, [r5], #4
  t_mult += (nmax * 355)/2;
 8000d2c:	0863      	lsrs	r3, r4, #1
 8000d2e:	fb02 3808 	mla	r8, r2, r8, r3
  t_mult /= (nmax * 355);
 8000d32:	fbb8 f4f4 	udiv	r4, r8, r4
    uint32_t trig_operand = ticks * t_mult;
 8000d36:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000ed8 <motion_plan_fp+0x224>
 8000d3a:	fb09 f004 	mul.w	r0, r9, r4
    if (trig_operand > 0x7fffffff)
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	db75      	blt.n	8000e2e <motion_plan_fp+0x17a>
    uint32_t temp = (uint32_t)arm_cos_q31((q31_t)trig_operand);
 8000d42:	f009 f83f 	bl	8009dc4 <arm_cos_q31>
    temp = 0x7fffffff-temp;
 8000d46:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
  uint32_t s_idx = 0;
 8000d4a:	f04f 0b00 	mov.w	fp, #0
    n = nmax/2 * temp;         // q16
 8000d4e:	9b03      	ldr	r3, [sp, #12]
    temp = 0x7fffffff-temp;
 8000d50:	ebaa 0800 	sub.w	r8, sl, r0
    temp >>= 15;      // Change scaling to q16 to prevent overflow
 8000d54:	ea4f 38d8 	mov.w	r8, r8, lsr #15
    n = nmax/2 * temp;         // q16
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	fb08 f303 	mul.w	r3, r8, r3
    n >>= 8;                           // q8
 8000d5e:	ea4f 2813 	mov.w	r8, r3, lsr #8
    n += (SPEED_MIN<<8);
 8000d62:	f508 58f0 	add.w	r8, r8, #7680	; 0x1e00
    s_idx++;
 8000d66:	f10b 0201 	add.w	r2, fp, #1
  while(s_idx < s_target)
 8000d6a:	4297      	cmp	r7, r2
 8000d6c:	d171      	bne.n	8000e52 <motion_plan_fp+0x19e>
 8000d6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  int16_t s_cv = s_target - (2 * s_accel);
 8000d72:	b239      	sxth	r1, r7
  if (s_cv > 0)
 8000d74:	2900      	cmp	r1, #0
 8000d76:	dd48      	ble.n	8000e0a <motion_plan_fp+0x156>
    printf("%d steps at constant speed of %lu\n", s_cv, n>>8);
 8000d78:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8000d7c:	4857      	ldr	r0, [pc, #348]	; (8000edc <motion_plan_fp+0x228>)
 8000d7e:	f009 f95f 	bl	800a040 <iprintf>
    while(s_cv-- > 0)
 8000d82:	1e7a      	subs	r2, r7, #1
 8000d84:	b291      	uxth	r1, r2
 8000d86:	2905      	cmp	r1, #5
 8000d88:	b212      	sxth	r2, r2
 8000d8a:	f3c5 0380 	ubfx	r3, r5, #2, #1
 8000d8e:	f240 808f 	bls.w	8000eb0 <motion_plan_fp+0x1fc>
      *p_buff++ = n;
 8000d92:	46ac      	mov	ip, r5
 8000d94:	b11b      	cbz	r3, 8000d9e <motion_plan_fp+0xea>
    while(s_cv-- > 0)
 8000d96:	1eba      	subs	r2, r7, #2
 8000d98:	b212      	sxth	r2, r2
      *p_buff++ = n;
 8000d9a:	f84c 8b04 	str.w	r8, [ip], #4
    while(s_cv-- > 0)
 8000d9e:	1af8      	subs	r0, r7, r3
 8000da0:	f3c0 014e 	ubfx	r1, r0, #1, #15
 8000da4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000da8:	b280      	uxth	r0, r0
 8000daa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
      *p_buff++ = n;
 8000dae:	e9c3 8800 	strd	r8, r8, [r3]
    while(s_cv-- > 0)
 8000db2:	3308      	adds	r3, #8
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d1fa      	bne.n	8000dae <motion_plan_fp+0xfa>
 8000db8:	f020 0301 	bic.w	r3, r0, #1
 8000dbc:	1ad2      	subs	r2, r2, r3
 8000dbe:	4283      	cmp	r3, r0
 8000dc0:	eb0c 0183 	add.w	r1, ip, r3, lsl #2
 8000dc4:	b212      	sxth	r2, r2
 8000dc6:	d01e      	beq.n	8000e06 <motion_plan_fp+0x152>
 8000dc8:	b293      	uxth	r3, r2
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	2a00      	cmp	r2, #0
      *p_buff++ = n;
 8000dce:	f8c1 8000 	str.w	r8, [r1]
    while(s_cv-- > 0)
 8000dd2:	b200      	sxth	r0, r0
 8000dd4:	dd17      	ble.n	8000e06 <motion_plan_fp+0x152>
 8000dd6:	1e9a      	subs	r2, r3, #2
 8000dd8:	2800      	cmp	r0, #0
      *p_buff++ = n;
 8000dda:	f8c1 8004 	str.w	r8, [r1, #4]
    while(s_cv-- > 0)
 8000dde:	b212      	sxth	r2, r2
 8000de0:	dd11      	ble.n	8000e06 <motion_plan_fp+0x152>
 8000de2:	1ed8      	subs	r0, r3, #3
 8000de4:	2a00      	cmp	r2, #0
      *p_buff++ = n;
 8000de6:	f8c1 8008 	str.w	r8, [r1, #8]
    while(s_cv-- > 0)
 8000dea:	b200      	sxth	r0, r0
 8000dec:	dd0b      	ble.n	8000e06 <motion_plan_fp+0x152>
 8000dee:	3b04      	subs	r3, #4
 8000df0:	2800      	cmp	r0, #0
      *p_buff++ = n;
 8000df2:	f8c1 800c 	str.w	r8, [r1, #12]
    while(s_cv-- > 0)
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	dd05      	ble.n	8000e06 <motion_plan_fp+0x152>
 8000dfa:	2b00      	cmp	r3, #0
      *p_buff++ = n;
 8000dfc:	f8c1 8010 	str.w	r8, [r1, #16]
 8000e00:	bfc8      	it	gt
 8000e02:	f8c1 8014 	strgt.w	r8, [r1, #20]
 8000e06:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  for (int16_t d_step = s_accel-1; d_step >= 0; d_step--)
 8000e0a:	2c00      	cmp	r4, #0
 8000e0c:	f6ff af6e 	blt.w	8000cec <motion_plan_fp+0x38>
    *p_buff++ = ((uint32_t*)p_motion_buff)[d_step];
 8000e10:	6830      	ldr	r0, [r6, #0]
 8000e12:	1f2b      	subs	r3, r5, #4
 8000e14:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8000e18:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
 8000e1c:	f852 1904 	ldr.w	r1, [r2], #-4
 8000e20:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int16_t d_step = s_accel-1; d_step >= 0; d_step--)
 8000e24:	4563      	cmp	r3, ip
 8000e26:	d1f9      	bne.n	8000e1c <motion_plan_fp+0x168>
}
 8000e28:	b005      	add	sp, #20
 8000e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (trig_operand > 0x7fffffff)
 8000e2e:	2400      	movs	r4, #0
 8000e30:	f04f 0902 	mov.w	r9, #2
 8000e34:	f04f 0b01 	mov.w	fp, #1
 8000e38:	46a2      	mov	sl, r4
  uint32_t n_prev = 0;
 8000e3a:	46a0      	mov	r8, r4
    uint32_t temp = (uint32_t)arm_cos_q31((q31_t)trig_operand);
 8000e3c:	f008 ffc2 	bl	8009dc4 <arm_cos_q31>
      printf("Peak speed %lu detected at %u steps\n", n>>8, s_accel);
 8000e40:	465a      	mov	r2, fp
 8000e42:	4651      	mov	r1, sl
 8000e44:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <motion_plan_fp+0x22c>)
  int16_t s_cv = s_target - (2 * s_accel);
 8000e46:	eba7 0709 	sub.w	r7, r7, r9
      printf("Peak speed %lu detected at %u steps\n", n>>8, s_accel);
 8000e4a:	f009 f8f9 	bl	800a040 <iprintf>
  int16_t s_cv = s_target - (2 * s_accel);
 8000e4e:	b2bf      	uxth	r7, r7
      break;
 8000e50:	e78f      	b.n	8000d72 <motion_plan_fp+0xbe>
    uint32_t dticks = (((T_TICK_DIV)<<8) + (n>>1))/n;
 8000e52:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8000e56:	f103 435b 	add.w	r3, r3, #3674210304	; 0xdb000000
 8000e5a:	f503 033a 	add.w	r3, r3, #12189696	; 0xba0000
 8000e5e:	fbb3 f3f8 	udiv	r3, r3, r8
    ticks += dticks;
 8000e62:	4499      	add	r9, r3
    uint32_t trig_operand = ticks * t_mult;
 8000e64:	fb09 f004 	mul.w	r0, r9, r4
    if (trig_operand > 0x7fffffff)
 8000e68:	2800      	cmp	r0, #0
    *p_buff++ = n;
 8000e6a:	f845 8b04 	str.w	r8, [r5], #4
    if (trig_operand > 0x7fffffff)
 8000e6e:	db12      	blt.n	8000e96 <motion_plan_fp+0x1e2>
 8000e70:	9201      	str	r2, [sp, #4]
    uint32_t temp = (uint32_t)arm_cos_q31((q31_t)trig_operand);
 8000e72:	f008 ffa7 	bl	8009dc4 <arm_cos_q31>
    n = nmax/2 * temp;         // q16
 8000e76:	9b03      	ldr	r3, [sp, #12]
    temp = 0x7fffffff-temp;
 8000e78:	ebaa 0100 	sub.w	r1, sl, r0
    n = nmax/2 * temp;         // q16
 8000e7c:	085b      	lsrs	r3, r3, #1
    temp >>= 15;      // Change scaling to q16 to prevent overflow
 8000e7e:	0bc9      	lsrs	r1, r1, #15
    n = nmax/2 * temp;         // q16
 8000e80:	fb01 f303 	mul.w	r3, r1, r3
    n >>= 8;                           // q8
 8000e84:	0a1b      	lsrs	r3, r3, #8
    n += (SPEED_MIN<<8);
 8000e86:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
    if ((n < n_prev) || (accel_done))
 8000e8a:	4543      	cmp	r3, r8
 8000e8c:	d312      	bcc.n	8000eb4 <motion_plan_fp+0x200>
 8000e8e:	9a01      	ldr	r2, [sp, #4]
 8000e90:	4698      	mov	r8, r3
 8000e92:	4693      	mov	fp, r2
 8000e94:	e767      	b.n	8000d66 <motion_plan_fp+0xb2>
      s_accel = s_idx+1;
 8000e96:	f10b 0b02 	add.w	fp, fp, #2
  int16_t s_cv = s_target - (2 * s_accel);
 8000e9a:	fa1f f38b 	uxth.w	r3, fp
 8000e9e:	ea4f 0943 	mov.w	r9, r3, lsl #1
  for (int16_t d_step = s_accel-1; d_step >= 0; d_step--)
 8000ea2:	3b01      	subs	r3, #1
  int16_t s_cv = s_target - (2 * s_accel);
 8000ea4:	fa1f f989 	uxth.w	r9, r9
  for (int16_t d_step = s_accel-1; d_step >= 0; d_step--)
 8000ea8:	b21c      	sxth	r4, r3
      printf("Peak speed %lu detected at %u steps\n", n>>8, s_accel);
 8000eaa:	ea4f 2a18 	mov.w	sl, r8, lsr #8
 8000eae:	e7c5      	b.n	8000e3c <motion_plan_fp+0x188>
    while(s_cv-- > 0)
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	e789      	b.n	8000dc8 <motion_plan_fp+0x114>
      s_accel = s_idx+1;
 8000eb4:	f10b 0b02 	add.w	fp, fp, #2
  int16_t s_cv = s_target - (2 * s_accel);
 8000eb8:	fa1f f38b 	uxth.w	r3, fp
 8000ebc:	ea4f 0943 	mov.w	r9, r3, lsl #1
  for (int16_t d_step = s_accel-1; d_step >= 0; d_step--)
 8000ec0:	3b01      	subs	r3, #1
  int16_t s_cv = s_target - (2 * s_accel);
 8000ec2:	fa1f f989 	uxth.w	r9, r9
  for (int16_t d_step = s_accel-1; d_step >= 0; d_step--)
 8000ec6:	b21c      	sxth	r4, r3
      printf("Peak speed %lu detected at %u steps\n", n>>8, s_accel);
 8000ec8:	ea4f 2a18 	mov.w	sl, r8, lsr #8
 8000ecc:	e7b8      	b.n	8000e40 <motion_plan_fp+0x18c>
 8000ece:	bf00      	nop
 8000ed0:	200002fc 	.word	0x200002fc
 8000ed4:	b89bc36d 	.word	0xb89bc36d
 8000ed8:	00075300 	.word	0x00075300
 8000edc:	0800b214 	.word	0x0800b214
 8000ee0:	0800b1ec 	.word	0x0800b1ec

08000ee4 <motion_complete>:

void motion_complete(void)
{
  if (p_motion_buff != NULL)
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <motion_complete+0xc>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	b108      	cbz	r0, 8000eee <motion_complete+0xa>
  {
    free(p_motion_buff);
 8000eea:	f008 bfbd 	b.w	8009e68 <free>
  }
}
 8000eee:	4770      	bx	lr
 8000ef0:	200002fc 	.word	0x200002fc

08000ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_MspInit+0x54>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_MspInit+0x54>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_MspInit+0x54>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_MspInit+0x54>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_MspInit+0x54>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_MspInit+0x54>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_MspInit+0x58>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_MspInit+0x58>)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <HAL_TIM_Base_MspInit+0xb4>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d114      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a24      	ldr	r2, [pc, #144]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	201b      	movs	r0, #27
 8000f8e:	f000 fac0 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f92:	201b      	movs	r0, #27
 8000f94:	f000 fad9 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f98:	e030      	b.n	8000ffc <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1b      	ldr	r2, [pc, #108]	; (800100c <HAL_TIM_Base_MspInit+0xbc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d12b      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	61d3      	str	r3, [r2, #28]
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_TIM_Base_MspInit+0xb8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe8:	f000 faca 	bl	8001580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	201d      	movs	r0, #29
 8000ff2:	f000 fa8e 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ff6:	201d      	movs	r0, #29
 8000ff8:	f000 faa7 	bl	800154a <HAL_NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40012c00 	.word	0x40012c00
 8001008:	40021000 	.word	0x40021000
 800100c:	40000400 	.word	0x40000400
 8001010:	40011400 	.word	0x40011400

08001014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_TIM_MspPostInit+0x5c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d118      	bne.n	8001066 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_TIM_MspPostInit+0x60>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_TIM_MspPostInit+0x60>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_TIM_MspPostInit+0x60>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_TIM_MspPostInit+0x64>)
 8001062:	f000 fa8d 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012c00 	.word	0x40012c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c2:	f000 f933 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010d2:	f000 fd39 	bl	8001b48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200008d0 	.word	0x200008d0

080010e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM1_CC_IRQHandler+0x10>)
 80010e6:	f003 f8d9 	bl	800429c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001fc 	.word	0x200001fc

080010f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM3_IRQHandler+0x10>)
 80010fa:	f003 f8cf 	bl	800429c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000244 	.word	0x20000244

08001108 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e00a      	b.n	8001130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800111a:	f3af 8000 	nop.w
 800111e:	4601      	mov	r1, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	b2ca      	uxtb	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dbf0      	blt.n	800111a <_read+0x12>
  }

  return len;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e009      	b.n	8001168 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf1      	blt.n	8001154 <_write+0x12>
  }
  return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_close>:

int _close(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a0:	605a      	str	r2, [r3, #4]
  return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <_isatty>:

int _isatty(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f008 fdfa 	bl	8009e04 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20005000 	.word	0x20005000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000300 	.word	0x20000300
 8001244:	20000df0 	.word	0x20000df0

08001248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127a:	f7ff ffe5 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f008 fdc7 	bl	8009e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff f953 	bl	800052c <main>
  bx lr
 8001286:	4770      	bx	lr
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001290:	0800baec 	.word	0x0800baec
  ldr r2, =_sbss
 8001294:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001298:	20000dec 	.word	0x20000dec

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_Init+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_Init+0x28>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f923 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b6:	200f      	movs	r0, #15
 80012b8:	f000 f808 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012bc:	f7ff fe1a 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x54>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x58>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f93b 	bl	8001566 <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001308:	f000 f903 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x5c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000000 	.word	0x20000000
 8001324:	20000008 	.word	0x20000008
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x1c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x20>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a03      	ldr	r2, [pc, #12]	; (800134c <HAL_IncTick+0x20>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000008 	.word	0x20000008
 800134c:	20000304 	.word	0x20000304

08001350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_GetTick+0x10>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000304 	.word	0x20000304

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4906      	ldr	r1, [pc, #24]	; (80013fc <__NVIC_EnableIRQ+0x34>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014dc:	f7ff ff90 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff2d 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff42 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff35 	bl	80013c8 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b08b      	sub	sp, #44	; 0x2c
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	e169      	b.n	8001868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001594:	2201      	movs	r2, #1
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8158 	bne.w	8001862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a9a      	ldr	r2, [pc, #616]	; (8001820 <HAL_GPIO_Init+0x2a0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d05e      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015bc:	4a98      	ldr	r2, [pc, #608]	; (8001820 <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d875      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015c2:	4a98      	ldr	r2, [pc, #608]	; (8001824 <HAL_GPIO_Init+0x2a4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d058      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015c8:	4a96      	ldr	r2, [pc, #600]	; (8001824 <HAL_GPIO_Init+0x2a4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d86f      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015ce:	4a96      	ldr	r2, [pc, #600]	; (8001828 <HAL_GPIO_Init+0x2a8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d052      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015d4:	4a94      	ldr	r2, [pc, #592]	; (8001828 <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d869      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015da:	4a94      	ldr	r2, [pc, #592]	; (800182c <HAL_GPIO_Init+0x2ac>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d04c      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015e0:	4a92      	ldr	r2, [pc, #584]	; (800182c <HAL_GPIO_Init+0x2ac>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d863      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015e6:	4a92      	ldr	r2, [pc, #584]	; (8001830 <HAL_GPIO_Init+0x2b0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d046      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015ec:	4a90      	ldr	r2, [pc, #576]	; (8001830 <HAL_GPIO_Init+0x2b0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d85d      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d82a      	bhi.n	800164c <HAL_GPIO_Init+0xcc>
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d859      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <HAL_GPIO_Init+0x80>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	0800167b 	.word	0x0800167b
 8001604:	08001655 	.word	0x08001655
 8001608:	08001667 	.word	0x08001667
 800160c:	080016a9 	.word	0x080016a9
 8001610:	080016af 	.word	0x080016af
 8001614:	080016af 	.word	0x080016af
 8001618:	080016af 	.word	0x080016af
 800161c:	080016af 	.word	0x080016af
 8001620:	080016af 	.word	0x080016af
 8001624:	080016af 	.word	0x080016af
 8001628:	080016af 	.word	0x080016af
 800162c:	080016af 	.word	0x080016af
 8001630:	080016af 	.word	0x080016af
 8001634:	080016af 	.word	0x080016af
 8001638:	080016af 	.word	0x080016af
 800163c:	080016af 	.word	0x080016af
 8001640:	080016af 	.word	0x080016af
 8001644:	0800165d 	.word	0x0800165d
 8001648:	08001671 	.word	0x08001671
 800164c:	4a79      	ldr	r2, [pc, #484]	; (8001834 <HAL_GPIO_Init+0x2b4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001652:	e02c      	b.n	80016ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e029      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	3304      	adds	r3, #4
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e024      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	3308      	adds	r3, #8
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e01f      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	330c      	adds	r3, #12
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e01a      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001682:	2304      	movs	r3, #4
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e013      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001690:	2308      	movs	r3, #8
 8001692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	611a      	str	r2, [r3, #16]
          break;
 800169a:	e009      	b.n	80016b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800169c:	2308      	movs	r3, #8
 800169e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	615a      	str	r2, [r3, #20]
          break;
 80016a6:	e003      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          break;
 80016ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2bff      	cmp	r3, #255	; 0xff
 80016b4:	d801      	bhi.n	80016ba <HAL_GPIO_Init+0x13a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_Init+0x13e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3304      	adds	r3, #4
 80016be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d802      	bhi.n	80016cc <HAL_GPIO_Init+0x14c>
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x152>
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	3b08      	subs	r3, #8
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	210f      	movs	r1, #15
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	6a39      	ldr	r1, [r7, #32]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80b1 	beq.w	8001862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001718:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2bc>)
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a40      	ldr	r2, [pc, #256]	; (8001840 <HAL_GPIO_Init+0x2c0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <HAL_GPIO_Init+0x1ec>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <HAL_GPIO_Init+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00d      	beq.n	8001768 <HAL_GPIO_Init+0x1e8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <HAL_GPIO_Init+0x2c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_GPIO_Init+0x1e4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3d      	ldr	r2, [pc, #244]	; (800184c <HAL_GPIO_Init+0x2cc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_GPIO_Init+0x1e0>
 800175c:	2303      	movs	r3, #3
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001760:	2304      	movs	r3, #4
 8001762:	e004      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 800176c:	2300      	movs	r3, #0
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	f002 0203 	and.w	r2, r2, #3
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	4093      	lsls	r3, r2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177e:	492f      	ldr	r1, [pc, #188]	; (800183c <HAL_GPIO_Init+0x2bc>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	492c      	ldr	r1, [pc, #176]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4928      	ldr	r1, [pc, #160]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4922      	ldr	r1, [pc, #136]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	491e      	ldr	r1, [pc, #120]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4918      	ldr	r1, [pc, #96]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4914      	ldr	r1, [pc, #80]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001800:	4013      	ands	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d021      	beq.n	8001854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e021      	b.n	8001862 <HAL_GPIO_Init+0x2e2>
 800181e:	bf00      	nop
 8001820:	10320000 	.word	0x10320000
 8001824:	10310000 	.word	0x10310000
 8001828:	10220000 	.word	0x10220000
 800182c:	10210000 	.word	0x10210000
 8001830:	10120000 	.word	0x10120000
 8001834:	10110000 	.word	0x10110000
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00
 8001848:	40011000 	.word	0x40011000
 800184c:	40011400 	.word	0x40011400
 8001850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_GPIO_Init+0x304>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	43db      	mvns	r3, r3
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <HAL_GPIO_Init+0x304>)
 800185e:	4013      	ands	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae8e 	bne.w	8001594 <HAL_GPIO_Init+0x14>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	611a      	str	r2, [r3, #16]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e8:	b08b      	sub	sp, #44	; 0x2c
 80018ea:	af06      	add	r7, sp, #24
 80018ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0fd      	b.n	8001af4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d106      	bne.n	8001912 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f007 ff33 	bl	8009778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fc15 	bl	800514e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	687e      	ldr	r6, [r7, #4]
 800192c:	466d      	mov	r5, sp
 800192e:	f106 0410 	add.w	r4, r6, #16
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	602b      	str	r3, [r5, #0]
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f003 fbdf 	bl	8005102 <USB_CoreInit>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0ce      	b.n	8001af4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fc10 	bl	8005182 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e04c      	b.n	8001a02 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3301      	adds	r3, #1
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	b298      	uxth	r0, r3
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3336      	adds	r3, #54	; 0x36
 80019a6:	4602      	mov	r2, r0
 80019a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3303      	adds	r3, #3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	333c      	adds	r3, #60	; 0x3c
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3340      	adds	r3, #64	; 0x40
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3301      	adds	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3ad      	bcc.n	8001968 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e044      	b.n	8001a9c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3b5      	bcc.n	8001a12 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	687e      	ldr	r6, [r7, #4]
 8001aae:	466d      	mov	r5, sp
 8001ab0:	f106 0410 	add.w	r4, r6, #16
 8001ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	602b      	str	r3, [r5, #0]
 8001abc:	1d33      	adds	r3, r6, #4
 8001abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f003 fb6a 	bl	800519a <USB_DevInit>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e00d      	b.n	8001af4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f006 f81d 	bl	8007b2c <USB_DevDisconnect>

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001afc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_PCD_Start+0x16>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e016      	b.n	8001b40 <HAL_PCD_Start+0x44>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 faff 	bl	8005122 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b24:	2101      	movs	r1, #1
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f008 f899 	bl	8009c5e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f005 fff1 	bl	8007b18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f005 fff3 	bl	8007b40 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b64:	d102      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fb5f 	bl	800222a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f005 ffe5 	bl	8007b40 <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d112      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	b292      	uxth	r2, r2
 8001b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f007 fe67 	bl	800986e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f923 	bl	8001dee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 ffc7 	bl	8007b40 <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f005 ffb0 	bl	8007b40 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bea:	d10b      	bne.n	8001c04 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 ff99 	bl	8007b40 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c18:	d126      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0204 	bic.w	r2, r2, #4
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	b292      	uxth	r2, r2
 8001c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f007 fe48 	bl	80098e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 ff67 	bl	8007b40 <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c7c:	f040 8082 	bne.w	8001d84 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	77fb      	strb	r3, [r7, #31]
 8001c84:	e010      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	7ffb      	ldrb	r3, [r7, #31]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	441a      	add	r2, r3
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	8812      	ldrh	r2, [r2, #0]
 8001c96:	b292      	uxth	r2, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	3320      	adds	r3, #32
 8001c9c:	443b      	add	r3, r7
 8001c9e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	77fb      	strb	r3, [r7, #31]
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	2b07      	cmp	r3, #7
 8001cac:	d9eb      	bls.n	8001c86 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	b292      	uxth	r2, r2
 8001cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cde:	bf00      	nop
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f6      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d04:	b292      	uxth	r2, r2
 8001d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	77fb      	strb	r3, [r7, #31]
 8001d0e:	e00f      	b.n	8001d30 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4611      	mov	r1, r2
 8001d18:	7ffa      	ldrb	r2, [r7, #31]
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	440a      	add	r2, r1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	3320      	adds	r3, #32
 8001d22:	443b      	add	r3, r7
 8001d24:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d28:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	2b07      	cmp	r3, #7
 8001d34:	d9ec      	bls.n	8001d10 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0208 	orr.w	r2, r2, #8
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d60:	b292      	uxth	r2, r2
 8001d62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0204 	orr.w	r2, r2, #4
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f007 fd94 	bl	80098ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 fed9 	bl	8007b40 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d98:	d10e      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f007 fd4d 	bl	8009852 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 febf 	bl	8007b40 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dcc:	d10b      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	b292      	uxth	r2, r2
 8001de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_SetAddress+0x1a>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e013      	b.n	8001e30 <HAL_PCD_SetAddress+0x42>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 fe66 	bl	8007af2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	70fb      	strb	r3, [r7, #3]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	803b      	strh	r3, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0e      	bge.n	8001e7c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00e      	b.n	8001e9a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ea6:	883a      	ldrh	r2, [r7, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	78ba      	ldrb	r2, [r7, #2]
 8001eb0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec4:	78bb      	ldrb	r3, [r7, #2]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Open+0xa6>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Open+0xc4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 f975 	bl	80051dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da0e      	bge.n	8001f36 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00e      	b.n	8001f54 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 0207 	and.w	r2, r3, #7
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_PCD_EP_Close+0x6a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e00e      	b.n	8001f8c <HAL_PCD_EP_Close+0x88>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68f9      	ldr	r1, [r7, #12]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fc97 	bl	80058b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	f003 0207 	and.w	r2, r3, #7
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fe49 	bl	8005c88 <USB_EPStartXfer>
 8001ff6:	e005      	b.n	8002004 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fe42 	bl	8005c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 0207 	and.w	r2, r3, #7
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002030:	681b      	ldr	r3, [r3, #0]
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	b2da      	uxtb	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fdef 	bl	8005c88 <USB_EPStartXfer>
 80020aa:	e005      	b.n	80020b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6979      	ldr	r1, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fde8 	bl	8005c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d901      	bls.n	80020e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e04c      	b.n	800217a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da0e      	bge.n	8002106 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
 8002104:	e00c      	b.n	8002120 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_PCD_EP_SetStall+0x7e>
 800213c:	2302      	movs	r3, #2
 800213e:	e01c      	b.n	800217a <HAL_PCD_EP_SetStall+0xb8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f005 fbd2 	bl	80078f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f005 fcf7 	bl	8007b5e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d901      	bls.n	80021a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e040      	b.n	8002222 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da0e      	bge.n	80021c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	705a      	strb	r2, [r3, #1]
 80021c4:	e00e      	b.n	80021e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 0207 	and.w	r2, r3, #7
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_EP_ClrStall+0x82>
 8002200:	2302      	movs	r3, #2
 8002202:	e00e      	b.n	8002222 <HAL_PCD_EP_ClrStall+0xa0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	f005 fbc0 	bl	8007998 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08e      	sub	sp, #56	; 0x38
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002232:	e2ec      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800223c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800223e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800224a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8161 	bne.w	8002516 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d152      	bne.n	8002304 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	81fb      	strh	r3, [r7, #14]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227e:	b29b      	uxth	r3, r3
 8002280:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3328      	adds	r3, #40	; 0x28
 8002286:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	3302      	adds	r3, #2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	441a      	add	r2, r3
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022c2:	2100      	movs	r1, #0
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f007 faaa 	bl	800981e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 829b 	beq.w	800280e <PCD_EP_ISR_Handler+0x5e4>
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8296 	bne.w	800280e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b292      	uxth	r2, r2
 80022f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002302:	e284      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002314:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231a:	2b00      	cmp	r3, #0
 800231c:	d034      	beq.n	8002388 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	3306      	adds	r3, #6
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800235c:	b29b      	uxth	r3, r3
 800235e:	f005 fc4e 	bl	8007bfe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29a      	uxth	r2, r3
 800236a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800236e:	4013      	ands	r3, r2
 8002370:	823b      	strh	r3, [r7, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	8a3a      	ldrh	r2, [r7, #16]
 8002378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800237c:	b292      	uxth	r2, r2
 800237e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f007 fa1f 	bl	80097c4 <HAL_PCD_SetupStageCallback>
 8002386:	e242      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002388:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800238c:	2b00      	cmp	r3, #0
 800238e:	f280 823e 	bge.w	800280e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29a      	uxth	r2, r3
 800239a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800239e:	4013      	ands	r3, r2
 80023a0:	83bb      	strh	r3, [r7, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	8bba      	ldrh	r2, [r7, #28]
 80023a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ac:	b292      	uxth	r2, r2
 80023ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	3306      	adds	r3, #6
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d019      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1ee>
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f005 fbfe 	bl	8007bfe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	441a      	add	r2, r3
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f007 f9e8 	bl	80097e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 81f2 	bne.w	800280e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d112      	bne.n	8002478 <PCD_EP_ISR_Handler+0x24e>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800245c:	b29a      	uxth	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002470:	b29a      	uxth	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	e02f      	b.n	80024d8 <PCD_EP_ISR_Handler+0x2ae>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b3e      	cmp	r3, #62	; 0x3e
 800247e:	d813      	bhi.n	80024a8 <PCD_EP_ISR_Handler+0x27e>
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <PCD_EP_ISR_Handler+0x270>
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	3301      	adds	r3, #1
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	b29b      	uxth	r3, r3
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	e017      	b.n	80024d8 <PCD_EP_ISR_Handler+0x2ae>
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <PCD_EP_ISR_Handler+0x298>
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	3b01      	subs	r3, #1
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	827b      	strh	r3, [r7, #18]
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f0:	827b      	strh	r3, [r7, #18]
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024f8:	827b      	strh	r3, [r7, #18]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	b29b      	uxth	r3, r3
 8002512:	8013      	strh	r3, [r2, #0]
 8002514:	e17b      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002528:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800252c:	2b00      	cmp	r3, #0
 800252e:	f280 80ea 	bge.w	8002706 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	853b      	strh	r3, [r7, #40]	; 0x28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800255c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002560:	b292      	uxth	r2, r2
 8002562:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002564:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	7b1b      	ldrb	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d122      	bne.n	80025c8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	3306      	adds	r3, #6
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025aa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	6959      	ldr	r1, [r3, #20]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	88da      	ldrh	r2, [r3, #6]
 80025c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c2:	f005 fb1c 	bl	8007bfe <USB_ReadPMA>
 80025c6:	e07c      	b.n	80026c2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d108      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d2:	461a      	mov	r2, r3
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f927 	bl	800282a <HAL_PCD_EP_DB_Receive>
 80025dc:	4603      	mov	r3, r0
 80025de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025e0:	e06f      	b.n	80026c2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3302      	adds	r3, #2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02a      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	891a      	ldrh	r2, [r3, #8]
 8002678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267a:	f005 fac0 	bl	8007bfe <USB_ReadPMA>
 800267e:	e020      	b.n	80026c2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	3306      	adds	r3, #6
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	895a      	ldrh	r2, [r3, #10]
 80026bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026be:	f005 fa9e 	bl	8007bfe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c8:	441a      	add	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d4:	441a      	add	r2, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <PCD_EP_ISR_Handler+0x4c2>
 80026e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d206      	bcs.n	80026fa <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f007 f878 	bl	80097e8 <HAL_PCD_DataOutStageCallback>
 80026f8:	e005      	b.n	8002706 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fac1 	bl	8005c88 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d07e      	beq.n	800280e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002710:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	843b      	strh	r3, [r7, #32]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	8c3b      	ldrh	r3, [r7, #32]
 8002750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002758:	b29b      	uxth	r3, r3
 800275a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d00c      	beq.n	800277e <PCD_EP_ISR_Handler+0x554>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	78db      	ldrb	r3, [r3, #3]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002770:	2b02      	cmp	r3, #2
 8002772:	d146      	bne.n	8002802 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002774:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d141      	bne.n	8002802 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3302      	adds	r3, #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	8bfb      	ldrh	r3, [r7, #30]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d906      	bls.n	80027c0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	8bfb      	ldrh	r3, [r7, #30]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	e002      	b.n	80027c6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f007 f822 	bl	800981e <HAL_PCD_DataInStageCallback>
 80027da:	e018      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	8bfb      	ldrh	r3, [r7, #30]
 80027e2:	441a      	add	r2, r3
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	8bfb      	ldrh	r3, [r7, #30]
 80027ee:	441a      	add	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fa44 	bl	8005c88 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002800:	e005      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002804:	461a      	mov	r2, r3
 8002806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f91b 	bl	8002a44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002816:	b29b      	uxth	r3, r3
 8002818:	b21b      	sxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f6ff ad0a 	blt.w	8002234 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3738      	adds	r7, #56	; 0x38
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b088      	sub	sp, #32
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07e      	beq.n	8002940 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	3302      	adds	r3, #2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	8b7b      	ldrh	r3, [r7, #26]
 8002872:	429a      	cmp	r2, r3
 8002874:	d306      	bcc.n	8002884 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	8b7b      	ldrh	r3, [r7, #26]
 800287c:	1ad2      	subs	r2, r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	e002      	b.n	800288a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d123      	bne.n	80028da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	833b      	strh	r3, [r7, #24]
 80028ae:	8b3b      	ldrh	r3, [r7, #24]
 80028b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028b4:	833b      	strh	r3, [r7, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	8b3b      	ldrh	r3, [r7, #24]
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01f      	beq.n	8002924 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	82fb      	strh	r3, [r7, #22]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	8afb      	ldrh	r3, [r7, #22]
 8002910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002924:	8b7b      	ldrh	r3, [r7, #26]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8087 	beq.w	8002a3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	891a      	ldrh	r2, [r3, #8]
 8002938:	8b7b      	ldrh	r3, [r7, #26]
 800293a:	f005 f960 	bl	8007bfe <USB_ReadPMA>
 800293e:	e07c      	b.n	8002a3a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	3306      	adds	r3, #6
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	8b7b      	ldrh	r3, [r7, #26]
 8002970:	429a      	cmp	r2, r3
 8002972:	d306      	bcc.n	8002982 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	8b7b      	ldrh	r3, [r7, #26]
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	619a      	str	r2, [r3, #24]
 8002980:	e002      	b.n	8002988 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d123      	bne.n	80029d8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	83fb      	strh	r3, [r7, #30]
 80029ac:	8bfb      	ldrh	r3, [r7, #30]
 80029ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029b2:	83fb      	strh	r3, [r7, #30]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	8bfb      	ldrh	r3, [r7, #30]
 80029c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11f      	bne.n	8002a22 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fc:	83bb      	strh	r3, [r7, #28]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	441a      	add	r2, r3
 8002a0c:	8bbb      	ldrh	r3, [r7, #28]
 8002a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a22:	8b7b      	ldrh	r3, [r7, #26]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6959      	ldr	r1, [r3, #20]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	895a      	ldrh	r2, [r3, #10]
 8002a34:	8b7b      	ldrh	r3, [r7, #26]
 8002a36:	f005 f8e2 	bl	8007bfe <USB_ReadPMA>
    }
  }

  return count;
 8002a3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0a2      	sub	sp, #136	; 0x88
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 81c7 	beq.w	8002dec <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	3302      	adds	r3, #2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d907      	bls.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	619a      	str	r2, [r3, #24]
 8002aa4:	e002      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f040 80b9 	bne.w	8002c28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d126      	bne.n	8002b0c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	4413      	add	r3, r2
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	011a      	lsls	r2, r3, #4
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	e01a      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d116      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	4413      	add	r3, r2
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	011a      	lsls	r2, r3, #4
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	4413      	add	r3, r2
 8002b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d126      	bne.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	011a      	lsls	r2, r3, #4
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e017      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d113      	bne.n	8002bce <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	011a      	lsls	r2, r3, #4
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f006 fe22 	bl	800981e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 82d4 	beq.w	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	827b      	strh	r3, [r7, #18]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	8a7b      	ldrh	r3, [r7, #18]
 8002c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	8013      	strh	r3, [r2, #0]
 8002c26:	e2b2      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d021      	beq.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	441a      	add	r2, r3
 8002c5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	f040 8286 	bne.w	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c98:	441a      	add	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d309      	bcc.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6a1a      	ldr	r2, [r3, #32]
 8002cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb6:	1ad2      	subs	r2, r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	621a      	str	r2, [r3, #32]
 8002cbc:	e015      	b.n	8002cea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cd4:	e009      	b.n	8002cea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d155      	bne.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	4413      	add	r3, r2
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	011a      	lsls	r2, r3, #4
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	4413      	add	r3, r2
 8002d14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d112      	bne.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x302>
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	e047      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	2b3e      	cmp	r3, #62	; 0x3e
 8002d4a:	d811      	bhi.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	3301      	adds	r3, #1
 8002d60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	029b      	lsls	r3, r3, #10
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	e032      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x342>
 8002d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d82:	3b01      	subs	r3, #1
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	e01b      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d117      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	643b      	str	r3, [r7, #64]	; 0x40
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dba:	4413      	add	r3, r2
 8002dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	011a      	lsls	r2, r3, #4
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6959      	ldr	r1, [r3, #20]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	891a      	ldrh	r2, [r3, #8]
 8002de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f004 fec5 	bl	8007b74 <USB_WritePMA>
 8002dea:	e1d0      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3306      	adds	r3, #6
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d307      	bcc.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e002      	b.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 80c4 	bne.w	8002fcc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	785b      	ldrb	r3, [r3, #1]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d126      	bne.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x456>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	4413      	add	r3, r2
 8002e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	011a      	lsls	r2, r3, #4
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	e01a      	b.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d116      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	4413      	add	r3, r2
 8002eb8:	677b      	str	r3, [r7, #116]	; 0x74
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	011a      	lsls	r2, r3, #4
 8002ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ec8:	673b      	str	r3, [r7, #112]	; 0x70
 8002eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12f      	bne.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f06:	4413      	add	r3, r2
 8002f08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f3a:	801a      	strh	r2, [r3, #0]
 8002f3c:	e017      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d113      	bne.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f54:	4413      	add	r3, r2
 8002f56:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	011a      	lsls	r2, r3, #4
 8002f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f60:	4413      	add	r3, r2
 8002f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f006 fc52 	bl	800981e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8104 	bne.w	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]
 8002fca:	e0e0      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d121      	bne.n	800301a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800300a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003016:	b29b      	uxth	r3, r3
 8003018:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003020:	2b01      	cmp	r3, #1
 8003022:	f040 80b4 	bne.w	800318e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800302e:	441a      	add	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800303c:	441a      	add	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d309      	bcc.n	8003062 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305a:	1ad2      	subs	r2, r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	621a      	str	r2, [r3, #32]
 8003060:	e015      	b.n	800308e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800306a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003078:	e009      	b.n	800308e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	667b      	str	r3, [r7, #100]	; 0x64
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d155      	bne.n	8003148 <HAL_PCD_EP_DB_Transmit+0x704>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b0:	4413      	add	r3, r2
 80030b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	011a      	lsls	r2, r3, #4
 80030ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030bc:	4413      	add	r3, r2
 80030be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d112      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80030ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d8:	801a      	strh	r2, [r3, #0]
 80030da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	e044      	b.n	800317a <HAL_PCD_EP_DB_Transmit+0x736>
 80030f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f2:	2b3e      	cmp	r3, #62	; 0x3e
 80030f4:	d811      	bhi.n	800311a <HAL_PCD_EP_DB_Transmit+0x6d6>
 80030f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	657b      	str	r3, [r7, #84]	; 0x54
 80030fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003108:	3301      	adds	r3, #1
 800310a:	657b      	str	r3, [r7, #84]	; 0x54
 800310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310e:	b29b      	uxth	r3, r3
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	b29a      	uxth	r2, r3
 8003114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	e02f      	b.n	800317a <HAL_PCD_EP_DB_Transmit+0x736>
 800311a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	657b      	str	r3, [r7, #84]	; 0x54
 8003120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800312a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312c:	3b01      	subs	r3, #1
 800312e:	657b      	str	r3, [r7, #84]	; 0x54
 8003130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003132:	b29b      	uxth	r3, r3
 8003134:	029b      	lsls	r3, r3, #10
 8003136:	b29b      	uxth	r3, r3
 8003138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003140:	b29a      	uxth	r2, r3
 8003142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	e018      	b.n	800317a <HAL_PCD_EP_DB_Transmit+0x736>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	785b      	ldrb	r3, [r3, #1]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d114      	bne.n	800317a <HAL_PCD_EP_DB_Transmit+0x736>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800315e:	4413      	add	r3, r2
 8003160:	667b      	str	r3, [r7, #100]	; 0x64
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	011a      	lsls	r2, r3, #4
 8003168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316a:	4413      	add	r3, r2
 800316c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003170:	663b      	str	r3, [r7, #96]	; 0x60
 8003172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003174:	b29a      	uxth	r2, r3
 8003176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003178:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6959      	ldr	r1, [r3, #20]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	895a      	ldrh	r2, [r3, #10]
 8003186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	f004 fcf3 	bl	8007b74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a8:	823b      	strh	r3, [r7, #16]
 80031aa:	8a3b      	ldrh	r3, [r7, #16]
 80031ac:	f083 0310 	eor.w	r3, r3, #16
 80031b0:	823b      	strh	r3, [r7, #16]
 80031b2:	8a3b      	ldrh	r3, [r7, #16]
 80031b4:	f083 0320 	eor.w	r3, r3, #32
 80031b8:	823b      	strh	r3, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	441a      	add	r2, r3
 80031c8:	8a3b      	ldrh	r3, [r7, #16]
 80031ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3788      	adds	r7, #136	; 0x88
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	4613      	mov	r3, r2
 80031f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e009      	b.n	8003232 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800321e:	897a      	ldrh	r2, [r7, #10]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003232:	893b      	ldrh	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2200      	movs	r2, #0
 800323c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	b29a      	uxth	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	80da      	strh	r2, [r3, #6]
 8003246:	e00b      	b.n	8003260 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2201      	movs	r2, #1
 800324c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	b29a      	uxth	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	b29a      	uxth	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e272      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8087 	beq.w	800339a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800328c:	4b92      	ldr	r3, [pc, #584]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b04      	cmp	r3, #4
 8003296:	d00c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003298:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d112      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e>
 80032a4:	4b8c      	ldr	r3, [pc, #560]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d10b      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06c      	beq.n	8003398 <HAL_RCC_OscConfig+0x12c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d168      	bne.n	8003398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e24c      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x76>
 80032d4:	4b80      	ldr	r3, [pc, #512]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a7f      	ldr	r2, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e02e      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x98>
 80032ea:	4b7b      	ldr	r3, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7a      	ldr	r2, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0xbc>
 800330e:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 8003328:	4b6b      	ldr	r3, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6a      	ldr	r2, [pc, #424]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe f802 	bl	8001350 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fd fffe 	bl	8001350 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e200      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xe4>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd ffee 	bl	8001350 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fd ffea 	bl	8001350 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1ec      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x10c>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d063      	beq.n	800346e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x18c>
 80033be:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1c0      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4939      	ldr	r1, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	e03a      	b.n	800346e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fd ffa3 	bl	8001350 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7fd ff9f 	bl	8001350 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1a1      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4927      	ldr	r1, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fd ff82 	bl	8001350 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fd ff7e 	bl	8001350 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e180      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03a      	beq.n	80034f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fd ff62 	bl	8001350 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7fd ff5e 	bl	8001350 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e160      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f000 faa6 	bl	8003a00 <RCC_Delay>
 80034b4:	e01c      	b.n	80034f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fd ff48 	bl	8001350 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd ff44 	bl	8001350 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d908      	bls.n	80034e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e146      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	42420000 	.word	0x42420000
 80034e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e9      	bne.n	80034c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a6 	beq.w	800364a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4a87      	ldr	r2, [pc, #540]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	61d3      	str	r3, [r2, #28]
 800351a:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d118      	bne.n	8003568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b7f      	ldr	r3, [pc, #508]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7e      	ldr	r2, [pc, #504]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7fd ff05 	bl	8001350 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7fd ff01 	bl	8001350 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e103      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b75      	ldr	r3, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x312>
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a6e      	ldr	r2, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e02d      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x334>
 8003586:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a69      	ldr	r2, [pc, #420]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a66      	ldr	r2, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6213      	str	r3, [r2, #32]
 800359e:	e01c      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x356>
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a60      	ldr	r2, [pc, #384]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	e00b      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d015      	beq.n	800360e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fd feb5 	bl	8001350 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fd feb1 	bl	8001350 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0b1      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ee      	beq.n	80035ea <HAL_RCC_OscConfig+0x37e>
 800360c:	e014      	b.n	8003638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7fd fe9f 	bl	8001350 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7fd fe9b 	bl	8001350 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e09b      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	4b40      	ldr	r3, [pc, #256]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ee      	bne.n	8003616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8087 	beq.w	8003762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d061      	beq.n	8003724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d146      	bne.n	80036f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_RCC_OscConfig+0x4cc>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7fd fe6f 	bl	8001350 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fd fe6b 	bl	8001350 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e06d      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d108      	bne.n	80036b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4921      	ldr	r1, [pc, #132]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a19      	ldr	r1, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	430b      	orrs	r3, r1
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fe3f 	bl	8001350 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fd fe3b 	bl	8001350 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e03d      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46a>
 80036f4:	e035      	b.n	8003762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fe28 	bl	8001350 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd fe24 	bl	8001350 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e026      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x498>
 8003722:	e01e      	b.n	8003762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e019      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
 8003738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x500>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0d0      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d910      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 0207 	bic.w	r2, r3, #7
 800379a:	4965      	ldr	r1, [pc, #404]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0b8      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037cc:	4b59      	ldr	r3, [pc, #356]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e4:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a52      	ldr	r2, [pc, #328]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b50      	ldr	r3, [pc, #320]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	494d      	ldr	r1, [pc, #308]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d040      	beq.n	8003890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d115      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e073      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06b      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b39      	ldr	r3, [pc, #228]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4936      	ldr	r1, [pc, #216]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fd fd76 	bl	8001350 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fd fd72 	bl	8001350 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e053      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d210      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0207 	bic.w	r2, r3, #7
 80038a6:	4922      	ldr	r1, [pc, #136]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e032      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4916      	ldr	r1, [pc, #88]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	490e      	ldr	r1, [pc, #56]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fe:	f000 f821 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	490a      	ldr	r1, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	5ccb      	ldrb	r3, [r1, r3]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1cc>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1d0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fcd4 	bl	80012cc <HAL_InitTick>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40022000 	.word	0x40022000
 8003934:	40021000 	.word	0x40021000
 8003938:	0800b238 	.word	0x0800b238
 800393c:	20000000 	.word	0x20000000
 8003940:	20000004 	.word	0x20000004

08003944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b490      	push	{r4, r7}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800394c:	1d3c      	adds	r4, r7, #4
 800394e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003954:	f240 2301 	movw	r3, #513	; 0x201
 8003958:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	2300      	movs	r3, #0
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x40>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x46>
 8003982:	e02b      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003986:	623b      	str	r3, [r7, #32]
      break;
 8003988:	e02b      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	0c9b      	lsrs	r3, r3, #18
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3328      	adds	r3, #40	; 0x28
 8003994:	443b      	add	r3, r7
 8003996:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800399a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d012      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0c5b      	lsrs	r3, r3, #17
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	3328      	adds	r3, #40	; 0x28
 80039b2:	443b      	add	r3, r7
 80039b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	623b      	str	r3, [r7, #32]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039de:	623b      	str	r3, [r7, #32]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6a3b      	ldr	r3, [r7, #32]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc90      	pop	{r4, r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	0800b1ac 	.word	0x0800b1ac
 80039f4:	40021000 	.word	0x40021000
 80039f8:	007a1200 	.word	0x007a1200
 80039fc:	003d0900 	.word	0x003d0900

08003a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <RCC_Delay+0x34>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <RCC_Delay+0x38>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0a5b      	lsrs	r3, r3, #9
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a1c:	bf00      	nop
  }
  while (Delay --);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e5a      	subs	r2, r3, #1
 8003a22:	60fa      	str	r2, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <RCC_Delay+0x1c>
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	20000000 	.word	0x20000000
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d07d      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4a4b      	ldr	r2, [pc, #300]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	61d3      	str	r3, [r2, #28]
 8003a74:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d118      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a90:	4b43      	ldr	r3, [pc, #268]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a42      	ldr	r2, [pc, #264]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fc58 	bl	8001350 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa4:	f7fd fc54 	bl	8001350 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e06d      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02e      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d027      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003af6:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d014      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fd fc23 	bl	8001350 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fc1f 	bl	8001350 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e036      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ee      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4917      	ldr	r1, [pc, #92]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	490b      	ldr	r1, [pc, #44]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42420440 	.word	0x42420440

08003ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e041      	b.n	8003c3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd f9be 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f000 fe98 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e041      	b.n	8003cdc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f839 	bl	8003ce4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f000 fe49 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_OC_Start_IT+0x24>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e022      	b.n	8003d62 <HAL_TIM_OC_Start_IT+0x6a>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d109      	bne.n	8003d36 <HAL_TIM_OC_Start_IT+0x3e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e015      	b.n	8003d62 <HAL_TIM_OC_Start_IT+0x6a>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d109      	bne.n	8003d50 <HAL_TIM_OC_Start_IT+0x58>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e008      	b.n	8003d62 <HAL_TIM_OC_Start_IT+0x6a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0a4      	b.n	8003eb4 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_OC_Start_IT+0x82>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	e013      	b.n	8003da2 <HAL_TIM_OC_Start_IT+0xaa>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_OC_Start_IT+0x92>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d88:	e00b      	b.n	8003da2 <HAL_TIM_OC_Start_IT+0xaa>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_OC_Start_IT+0xa2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	e003      	b.n	8003da2 <HAL_TIM_OC_Start_IT+0xaa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d841      	bhi.n	8003e2c <HAL_TIM_OC_Start_IT+0x134>
 8003da8:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <HAL_TIM_OC_Start_IT+0xb8>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003de5 	.word	0x08003de5
 8003db4:	08003e2d 	.word	0x08003e2d
 8003db8:	08003e2d 	.word	0x08003e2d
 8003dbc:	08003e2d 	.word	0x08003e2d
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003e2d 	.word	0x08003e2d
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	08003e2d 	.word	0x08003e2d
 8003dd0:	08003e09 	.word	0x08003e09
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003e2d 	.word	0x08003e2d
 8003de0:	08003e1b 	.word	0x08003e1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0202 	orr.w	r2, r2, #2
 8003df2:	60da      	str	r2, [r3, #12]
      break;
 8003df4:	e01b      	b.n	8003e2e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0204 	orr.w	r2, r2, #4
 8003e04:	60da      	str	r2, [r3, #12]
      break;
 8003e06:	e012      	b.n	8003e2e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0208 	orr.w	r2, r2, #8
 8003e16:	60da      	str	r2, [r3, #12]
      break;
 8003e18:	e009      	b.n	8003e2e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0210 	orr.w	r2, r2, #16
 8003e28:	60da      	str	r2, [r3, #12]
      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003e2c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2201      	movs	r2, #1
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 f87e 	bl	8004f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_TIM_OC_Start_IT+0x1c4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIM_OC_Start_IT+0x1c4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_TIM_OC_Start_IT+0x186>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d009      	beq.n	8003e7e <HAL_TIM_OC_Start_IT+0x186>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <HAL_TIM_OC_Start_IT+0x1c8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIM_OC_Start_IT+0x186>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <HAL_TIM_OC_Start_IT+0x1cc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d010      	beq.n	8003eb2 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	e007      	b.n	8003eb2 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f839 	bl	8003f66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fd08 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_TIM_PWM_Start_IT+0x24>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e022      	b.n	8003fe2 <HAL_TIM_PWM_Start_IT+0x6a>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d109      	bne.n	8003fb6 <HAL_TIM_PWM_Start_IT+0x3e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e015      	b.n	8003fe2 <HAL_TIM_PWM_Start_IT+0x6a>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d109      	bne.n	8003fd0 <HAL_TIM_PWM_Start_IT+0x58>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_PWM_Start_IT+0x6a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0a4      	b.n	8004134 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start_IT+0x82>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	e013      	b.n	8004022 <HAL_TIM_PWM_Start_IT+0xaa>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start_IT+0x92>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	e00b      	b.n	8004022 <HAL_TIM_PWM_Start_IT+0xaa>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start_IT+0xa2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	e003      	b.n	8004022 <HAL_TIM_PWM_Start_IT+0xaa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d841      	bhi.n	80040ac <HAL_TIM_PWM_Start_IT+0x134>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_TIM_PWM_Start_IT+0xb8>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004065 	.word	0x08004065
 8004034:	080040ad 	.word	0x080040ad
 8004038:	080040ad 	.word	0x080040ad
 800403c:	080040ad 	.word	0x080040ad
 8004040:	08004077 	.word	0x08004077
 8004044:	080040ad 	.word	0x080040ad
 8004048:	080040ad 	.word	0x080040ad
 800404c:	080040ad 	.word	0x080040ad
 8004050:	08004089 	.word	0x08004089
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040ad 	.word	0x080040ad
 800405c:	080040ad 	.word	0x080040ad
 8004060:	0800409b 	.word	0x0800409b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0202 	orr.w	r2, r2, #2
 8004072:	60da      	str	r2, [r3, #12]
      break;
 8004074:	e01b      	b.n	80040ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0204 	orr.w	r2, r2, #4
 8004084:	60da      	str	r2, [r3, #12]
      break;
 8004086:	e012      	b.n	80040ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	60da      	str	r2, [r3, #12]
      break;
 8004098:	e009      	b.n	80040ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0210 	orr.w	r2, r2, #16
 80040a8:	60da      	str	r2, [r3, #12]
      break;
 80040aa:	e000      	b.n	80040ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80040ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 ff3e 	bl	8004f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1e      	ldr	r2, [pc, #120]	; (800413c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_TIM_PWM_Start_IT+0x186>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d009      	beq.n	80040fe <HAL_TIM_PWM_Start_IT+0x186>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a14      	ldr	r2, [pc, #80]	; (8004140 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_PWM_Start_IT+0x186>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d111      	bne.n	8004122 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d010      	beq.n	8004132 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004120:	e007      	b.n	8004132 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800

08004148 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d841      	bhi.n	80041dc <HAL_TIM_PWM_Stop_IT+0x94>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_TIM_PWM_Stop_IT+0x18>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004195 	.word	0x08004195
 8004164:	080041dd 	.word	0x080041dd
 8004168:	080041dd 	.word	0x080041dd
 800416c:	080041dd 	.word	0x080041dd
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041dd 	.word	0x080041dd
 8004178:	080041dd 	.word	0x080041dd
 800417c:	080041dd 	.word	0x080041dd
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041dd 	.word	0x080041dd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041cb 	.word	0x080041cb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0202 	bic.w	r2, r2, #2
 80041a2:	60da      	str	r2, [r3, #12]
      break;
 80041a4:	e01b      	b.n	80041de <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0204 	bic.w	r2, r2, #4
 80041b4:	60da      	str	r2, [r3, #12]
      break;
 80041b6:	e012      	b.n	80041de <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0208 	bic.w	r2, r2, #8
 80041c6:	60da      	str	r2, [r3, #12]
      break;
 80041c8:	e009      	b.n	80041de <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0210 	bic.w	r2, r2, #16
 80041d8:	60da      	str	r2, [r3, #12]
      break;
 80041da:	e000      	b.n	80041de <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80041dc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fea6 	bl	8004f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a29      	ldr	r2, [pc, #164]	; (8004298 <HAL_TIM_PWM_Stop_IT+0x150>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d117      	bne.n	8004226 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <HAL_TIM_PWM_Stop_IT+0xde>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	f240 4344 	movw	r3, #1092	; 0x444
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_TIM_PWM_Stop_IT+0xde>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_TIM_PWM_Stop_IT+0x10e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	f240 4344 	movw	r3, #1092	; 0x444
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <HAL_TIM_PWM_Stop_IT+0x10e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Stop_IT+0x11e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004264:	e013      	b.n	800428e <HAL_TIM_PWM_Stop_IT+0x146>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Stop_IT+0x12e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	e00b      	b.n	800428e <HAL_TIM_PWM_Stop_IT+0x146>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d104      	bne.n	8004286 <HAL_TIM_PWM_Stop_IT+0x13e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	e003      	b.n	800428e <HAL_TIM_PWM_Stop_IT+0x146>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40012c00 	.word	0x40012c00

0800429c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0202 	mvn.w	r2, #2
 80042c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb09 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fb88 	bl	80009fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fc fbdb 	bl	8000aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0204 	mvn.w	r2, #4
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fadf 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fb5e 	bl	80009fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fc fbb1 	bl	8000aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b08      	cmp	r3, #8
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0208 	mvn.w	r2, #8
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fab5 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc fb34 	bl	80009fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc fb87 	bl	8000aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0210 	mvn.w	r2, #16
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2208      	movs	r2, #8
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa8b 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc fb0a 	bl	80009fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fc fb5d 	bl	8000aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0201 	mvn.w	r2, #1
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa62 	bl	80048e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fe52 	bl	80050f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa48 	bl	8004908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b20      	cmp	r3, #32
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b20      	cmp	r3, #32
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0220 	mvn.w	r2, #32
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fe1d 	bl	80050de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e046      	b.n	8004554 <HAL_TIM_OC_ConfigChannel+0xa8>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d839      	bhi.n	8004548 <HAL_TIM_OC_ConfigChannel+0x9c>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <HAL_TIM_OC_ConfigChannel+0x30>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004549 	.word	0x08004549
 80044e4:	08004549 	.word	0x08004549
 80044e8:	08004549 	.word	0x08004549
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	08004549 	.word	0x08004549
 80044f4:	08004549 	.word	0x08004549
 80044f8:	08004549 	.word	0x08004549
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	08004549 	.word	0x08004549
 8004504:	08004549 	.word	0x08004549
 8004508:	08004549 	.word	0x08004549
 800450c:	0800453b 	.word	0x0800453b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fa62 	bl	80049e0 <TIM_OC1_SetConfig>
      break;
 800451c:	e015      	b.n	800454a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fac1 	bl	8004aac <TIM_OC2_SetConfig>
      break;
 800452a:	e00e      	b.n	800454a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fb24 	bl	8004b80 <TIM_OC3_SetConfig>
      break;
 8004538:	e007      	b.n	800454a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fb87 	bl	8004c54 <TIM_OC4_SetConfig>
      break;
 8004546:	e000      	b.n	800454a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004572:	2302      	movs	r3, #2
 8004574:	e0ac      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	f200 809f 	bhi.w	80046c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004586:	a201      	add	r2, pc, #4	; (adr r2, 800458c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045c1 	.word	0x080045c1
 8004590:	080046c5 	.word	0x080046c5
 8004594:	080046c5 	.word	0x080046c5
 8004598:	080046c5 	.word	0x080046c5
 800459c:	08004601 	.word	0x08004601
 80045a0:	080046c5 	.word	0x080046c5
 80045a4:	080046c5 	.word	0x080046c5
 80045a8:	080046c5 	.word	0x080046c5
 80045ac:	08004643 	.word	0x08004643
 80045b0:	080046c5 	.word	0x080046c5
 80045b4:	080046c5 	.word	0x080046c5
 80045b8:	080046c5 	.word	0x080046c5
 80045bc:	08004683 	.word	0x08004683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fa0a 	bl	80049e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0204 	bic.w	r2, r2, #4
 80045ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      break;
 80045fe:	e062      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fa50 	bl	8004aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6999      	ldr	r1, [r3, #24]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
      break;
 8004640:	e041      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fa99 	bl	8004b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0208 	orr.w	r2, r2, #8
 800465c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0204 	bic.w	r2, r2, #4
 800466c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69d9      	ldr	r1, [r3, #28]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	61da      	str	r2, [r3, #28]
      break;
 8004680:	e021      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fae3 	bl	8004c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69d9      	ldr	r1, [r3, #28]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	021a      	lsls	r2, r3, #8
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	61da      	str	r2, [r3, #28]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0b3      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x180>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800470e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d03e      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0xd0>
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	f200 8087 	bhi.w	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	f000 8085 	beq.w	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	d87f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d01a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xa2>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d87b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d050      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x116>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d877      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d03c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0xf6>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d873      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d058      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x136>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d86f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d064      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d86b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d060      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d867      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d05a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004778:	e062      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f000 fbb6 	bl	8004efa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800479c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
      break;
 80047a6:	e04e      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f000 fb9f 	bl	8004efa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ca:	609a      	str	r2, [r3, #8]
      break;
 80047cc:	e03b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fb16 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2150      	movs	r1, #80	; 0x50
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fb6d 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e02b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fb34 	bl	8004e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2160      	movs	r1, #96	; 0x60
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fb5d 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 800480c:	e01b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 faf6 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fb4d 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 800482c:	e00b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 fb44 	bl	8004ec6 <TIM_ITRx_SetConfig>
        break;
 800483e:	e002      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e031      	b.n	80048dc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004888:	6839      	ldr	r1, [r7, #0]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa30 	bl	8004cf0 <TIM_SlaveTimer_SetConfig>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e018      	b.n	80048dc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048c8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
	...

0800491c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <TIM_Base_SetConfig+0xb8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_Base_SetConfig+0x30>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d007      	beq.n	800494c <TIM_Base_SetConfig+0x30>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_Base_SetConfig+0xbc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0x30>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a25      	ldr	r2, [pc, #148]	; (80049dc <TIM_Base_SetConfig+0xc0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <TIM_Base_SetConfig+0xb8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_Base_SetConfig+0x62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d007      	beq.n	800497e <TIM_Base_SetConfig+0x62>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <TIM_Base_SetConfig+0xbc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_Base_SetConfig+0x62>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <TIM_Base_SetConfig+0xc0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <TIM_Base_SetConfig+0xb8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800

080049e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0201 	bic.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f023 0302 	bic.w	r3, r3, #2
 8004a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <TIM_OC1_SetConfig+0xc8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10c      	bne.n	8004a56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0308 	bic.w	r3, r3, #8
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <TIM_OC1_SetConfig+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d111      	bne.n	8004a82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0210 	bic.w	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <TIM_OC2_SetConfig+0xd0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <TIM_OC2_SetConfig+0xd0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d113      	bne.n	8004b58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012c00 	.word	0x40012c00

08004b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <TIM_OC3_SetConfig+0xd0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10d      	bne.n	8004bfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <TIM_OC3_SetConfig+0xd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d113      	bne.n	8004c2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	621a      	str	r2, [r3, #32]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00

08004c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	031b      	lsls	r3, r3, #12
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a0f      	ldr	r2, [pc, #60]	; (8004cec <TIM_OC4_SetConfig+0x98>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d109      	bne.n	8004cc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	019b      	lsls	r3, r3, #6
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	40012c00 	.word	0x40012c00

08004cf0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0307 	bic.w	r3, r3, #7
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b70      	cmp	r3, #112	; 0x70
 8004d34:	d01a      	beq.n	8004d6c <TIM_SlaveTimer_SetConfig+0x7c>
 8004d36:	2b70      	cmp	r3, #112	; 0x70
 8004d38:	d860      	bhi.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
 8004d3a:	2b60      	cmp	r3, #96	; 0x60
 8004d3c:	d054      	beq.n	8004de8 <TIM_SlaveTimer_SetConfig+0xf8>
 8004d3e:	2b60      	cmp	r3, #96	; 0x60
 8004d40:	d85c      	bhi.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
 8004d42:	2b50      	cmp	r3, #80	; 0x50
 8004d44:	d046      	beq.n	8004dd4 <TIM_SlaveTimer_SetConfig+0xe4>
 8004d46:	2b50      	cmp	r3, #80	; 0x50
 8004d48:	d858      	bhi.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d019      	beq.n	8004d82 <TIM_SlaveTimer_SetConfig+0x92>
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d854      	bhi.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
 8004d52:	2b30      	cmp	r3, #48	; 0x30
 8004d54:	d054      	beq.n	8004e00 <TIM_SlaveTimer_SetConfig+0x110>
 8004d56:	2b30      	cmp	r3, #48	; 0x30
 8004d58:	d850      	bhi.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d050      	beq.n	8004e00 <TIM_SlaveTimer_SetConfig+0x110>
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d84c      	bhi.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d04c      	beq.n	8004e00 <TIM_SlaveTimer_SetConfig+0x110>
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d04a      	beq.n	8004e00 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004d6a:	e047      	b.n	8004dfc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68d9      	ldr	r1, [r3, #12]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f000 f8bd 	bl	8004efa <TIM_ETR_SetConfig>
      break;
 8004d80:	e03f      	b.n	8004e02 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d101      	bne.n	8004d8e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e03a      	b.n	8004e04 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a1a      	ldr	r2, [r3, #32]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
      break;
 8004dd2:	e016      	b.n	8004e02 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	461a      	mov	r2, r3
 8004de2:	f000 f813 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      break;
 8004de6:	e00c      	b.n	8004e02 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	461a      	mov	r2, r3
 8004df6:	f000 f837 	bl	8004e68 <TIM_TI2_ConfigInputStage>
      break;
 8004dfa:	e002      	b.n	8004e02 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004e00:	bf00      	nop
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 030a 	bic.w	r3, r3, #10
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0210 	bic.w	r2, r3, #16
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f043 0307 	orr.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	021a      	lsls	r2, r3, #8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	609a      	str	r2, [r3, #8]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e046      	b.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d009      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a10      	ldr	r2, [pc, #64]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10c      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4313      	orrs	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800

0800503c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005054:	2302      	movs	r3, #2
 8005056:	e03d      	b.n	80050d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005102:	b084      	sub	sp, #16
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	f107 0014 	add.w	r0, r7, #20
 8005110:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	b004      	add	sp, #16
 8005120:	4770      	bx	lr

08005122 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005132:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005136:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005156:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800515a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	b29b      	uxth	r3, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	b29b      	uxth	r3, r3
 800516c:	4013      	ands	r3, r2
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800519a:	b084      	sub	sp, #16
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	f107 0014 	add.w	r0, r7, #20
 80051a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	b004      	add	sp, #16
 80051d8:	4770      	bx	lr
	...

080051dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051dc:	b480      	push	{r7}
 80051de:	b09b      	sub	sp, #108	; 0x6c
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d81f      	bhi.n	800524e <USB_ActivateEndpoint+0x72>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <USB_ActivateEndpoint+0x38>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005225 	.word	0x08005225
 8005218:	08005241 	.word	0x08005241
 800521c:	08005257 	.word	0x08005257
 8005220:	08005233 	.word	0x08005233
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005224:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005230:	e012      	b.n	8005258 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005232:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005236:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800523a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800523e:	e00b      	b.n	8005258 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005240:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005248:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800524c:	e004      	b.n	8005258 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005254:	e000      	b.n	8005258 <USB_ActivateEndpoint+0x7c>
      break;
 8005256:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	b29a      	uxth	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	7b1b      	ldrb	r3, [r3, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 8149 	bne.w	800555c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8084 	beq.w	80053dc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	011a      	lsls	r2, r3, #4
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	88db      	ldrh	r3, [r3, #6]
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	81fb      	strh	r3, [r7, #14]
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <USB_ActivateEndpoint+0x17c>
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	81bb      	strh	r3, [r7, #12]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	89bb      	ldrh	r3, [r7, #12]
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	78db      	ldrb	r3, [r3, #3]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d020      	beq.n	80053a2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005376:	813b      	strh	r3, [r7, #8]
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	f083 0320 	eor.w	r3, r3, #32
 800537e:	813b      	strh	r3, [r7, #8]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	893b      	ldrh	r3, [r7, #8]
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]
 80053a0:	e27f      	b.n	80058a2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	817b      	strh	r3, [r7, #10]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	897b      	ldrh	r3, [r7, #10]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
 80053da:	e262      	b.n	80058a2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	4413      	add	r3, r2
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	011a      	lsls	r2, r3, #4
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	88db      	ldrh	r3, [r3, #6]
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	b29b      	uxth	r3, r3
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	4413      	add	r3, r2
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	011a      	lsls	r2, r3, #4
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	4413      	add	r3, r2
 800542e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005432:	623b      	str	r3, [r7, #32]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d112      	bne.n	8005462 <USB_ActivateEndpoint+0x286>
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005446:	b29a      	uxth	r2, r3
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e02f      	b.n	80054c2 <USB_ActivateEndpoint+0x2e6>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b3e      	cmp	r3, #62	; 0x3e
 8005468:	d813      	bhi.n	8005492 <USB_ActivateEndpoint+0x2b6>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	663b      	str	r3, [r7, #96]	; 0x60
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <USB_ActivateEndpoint+0x2a8>
 800547e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005480:	3301      	adds	r3, #1
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
 8005484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29a      	uxth	r2, r3
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	801a      	strh	r2, [r3, #0]
 8005490:	e017      	b.n	80054c2 <USB_ActivateEndpoint+0x2e6>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	663b      	str	r3, [r7, #96]	; 0x60
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <USB_ActivateEndpoint+0x2d0>
 80054a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a8:	3b01      	subs	r3, #1
 80054aa:	663b      	str	r3, [r7, #96]	; 0x60
 80054ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29a      	uxth	r2, r3
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	83fb      	strh	r3, [r7, #30]
 80054d0:	8bfb      	ldrh	r3, [r7, #30]
 80054d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01b      	beq.n	8005512 <USB_ActivateEndpoint+0x336>
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	83bb      	strh	r3, [r7, #28]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	8bbb      	ldrh	r3, [r7, #28]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	837b      	strh	r3, [r7, #26]
 800552a:	8b7b      	ldrh	r3, [r7, #26]
 800552c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005530:	837b      	strh	r3, [r7, #26]
 8005532:	8b7b      	ldrh	r3, [r7, #26]
 8005534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005538:	837b      	strh	r3, [r7, #26]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	441a      	add	r2, r3
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]
 800555a:	e1a2      	b.n	80058a2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	65bb      	str	r3, [r7, #88]	; 0x58
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055a8:	4413      	add	r3, r2
 80055aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ba:	657b      	str	r3, [r7, #84]	; 0x54
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	891b      	ldrh	r3, [r3, #8]
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	653b      	str	r3, [r7, #80]	; 0x50
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	4413      	add	r3, r2
 80055de:	653b      	str	r3, [r7, #80]	; 0x50
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	011a      	lsls	r2, r3, #4
 80055e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	895b      	ldrh	r3, [r3, #10]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 8091 	bne.w	800572c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005618:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800561a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01b      	beq.n	800565a <USB_ActivateEndpoint+0x47e>
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	877b      	strh	r3, [r7, #58]	; 0x3a
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	873b      	strh	r3, [r7, #56]	; 0x38
 8005668:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01b      	beq.n	80056aa <USB_ActivateEndpoint+0x4ce>
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	86fb      	strh	r3, [r7, #54]	; 0x36
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005708:	867b      	strh	r3, [r7, #50]	; 0x32
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	441a      	add	r2, r3
 8005714:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]
 800572a:	e0ba      	b.n	80058a2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800573c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <USB_ActivateEndpoint+0x5a8>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005794:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01d      	beq.n	80057dc <USB_ActivateEndpoint+0x600>
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d024      	beq.n	800582e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005802:	f083 0320 	eor.w	r3, r3, #32
 8005806:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	441a      	add	r2, r3
 8005814:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005828:	b29b      	uxth	r3, r3
 800582a:	8013      	strh	r3, [r2, #0]
 800582c:	e01d      	b.n	800586a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005844:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800588e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80058a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	376c      	adds	r7, #108	; 0x6c
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b08d      	sub	sp, #52	; 0x34
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	7b1b      	ldrb	r3, [r3, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f040 808e 	bne.w	80059e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d044      	beq.n	8005956 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	81bb      	strh	r3, [r7, #12]
 80058da:	89bb      	ldrh	r3, [r7, #12]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <USB_DeactivateEndpoint+0x6c>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	817b      	strh	r3, [r7, #10]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005918:	b29b      	uxth	r3, r3
 800591a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005932:	813b      	strh	r3, [r7, #8]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]
 8005954:	e192      	b.n	8005c7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	827b      	strh	r3, [r7, #18]
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01b      	beq.n	80059a6 <USB_DeactivateEndpoint+0xf6>
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005984:	823b      	strh	r3, [r7, #16]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	8a3b      	ldrh	r3, [r7, #16]
 8005992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800599e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	81fb      	strh	r3, [r7, #14]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	89fb      	ldrh	r3, [r7, #14]
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	e14d      	b.n	8005c7c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 80a5 	bne.w	8005b34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	843b      	strh	r3, [r7, #32]
 80059f8:	8c3b      	ldrh	r3, [r7, #32]
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01b      	beq.n	8005a3a <USB_DeactivateEndpoint+0x18a>
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	83fb      	strh	r3, [r7, #30]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8bfb      	ldrh	r3, [r7, #30]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	83bb      	strh	r3, [r7, #28]
 8005a48:	8bbb      	ldrh	r3, [r7, #28]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01b      	beq.n	8005a8a <USB_DeactivateEndpoint+0x1da>
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	837b      	strh	r3, [r7, #26]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	441a      	add	r2, r3
 8005a74:	8b7b      	ldrh	r3, [r7, #26]
 8005a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa0:	833b      	strh	r3, [r7, #24]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	8b3b      	ldrh	r3, [r7, #24]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad8:	82fb      	strh	r3, [r7, #22]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	8afb      	ldrh	r3, [r7, #22]
 8005ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b10:	82bb      	strh	r3, [r7, #20]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	8abb      	ldrh	r3, [r7, #20]
 8005b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	8013      	strh	r3, [r2, #0]
 8005b32:	e0a3      	b.n	8005c7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <USB_DeactivateEndpoint+0x2d4>
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01b      	beq.n	8005bd4 <USB_DeactivateEndpoint+0x324>
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3734      	adds	r7, #52	; 0x34
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b0cc      	sub	sp, #304	; 0x130
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c96:	6018      	str	r0, [r3, #0]
 8005c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	f041 817d 	bne.w	8006fae <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699a      	ldr	r2, [r3, #24]
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d908      	bls.n	8005ce2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ce0:	e007      	b.n	8005cf2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	7b1b      	ldrb	r3, [r3, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d152      	bne.n	8005da8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	88da      	ldrh	r2, [r3, #6]
 8005d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d28:	6800      	ldr	r0, [r0, #0]
 8005d2a:	f001 ff23 	bl	8007b74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d3a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4619      	mov	r1, r3
 8005d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d60:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	440a      	add	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	011a      	lsls	r2, r3, #4
 8005d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	801a      	strh	r2, [r3, #0]
 8005da4:	f001 b8b5 	b.w	8006f12 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	f040 84c6 	bne.w	8006746 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	f240 8443 	bls.w	800665e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e28:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e44:	1ad2      	subs	r2, r2, r3
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 823e 	beq.w	80062f6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e86:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 809a 	bne.w	8005fd4 <USB_EPStartXfer+0x34c>
 8005ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ed2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	440a      	add	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	011a      	lsls	r2, r3, #4
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d122      	bne.n	8005f52 <USB_EPStartXfer+0x2ca>
 8005f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e079      	b.n	8006046 <USB_EPStartXfer+0x3be>
 8005f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f56:	2b3e      	cmp	r3, #62	; 0x3e
 8005f58:	d81b      	bhi.n	8005f92 <USB_EPStartXfer+0x30a>
 8005f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <USB_EPStartXfer+0x2f2>
 8005f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f74:	3301      	adds	r3, #1
 8005f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	029b      	lsls	r3, r3, #10
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e059      	b.n	8006046 <USB_EPStartXfer+0x3be>
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <USB_EPStartXfer+0x32a>
 8005fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fac:	3b01      	subs	r3, #1
 8005fae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e038      	b.n	8006046 <USB_EPStartXfer+0x3be>
 8005fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d130      	bne.n	8006046 <USB_EPStartXfer+0x3be>
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006002:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	440a      	add	r2, r1
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	011a      	lsls	r2, r3, #4
 800601a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4413      	add	r3, r2
 8006026:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800602a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006038:	b29a      	uxth	r2, r3
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	895b      	ldrh	r3, [r3, #10]
 8006052:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6959      	ldr	r1, [r3, #20]
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	b29b      	uxth	r3, r3
 8006068:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800606c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006070:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006074:	6800      	ldr	r0, [r0, #0]
 8006076:	f001 fd7d 	bl	8007b74 <USB_WritePMA>
            ep->xfer_buff += len;
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	441a      	add	r2, r3
 800608c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d90f      	bls.n	80060d4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	621a      	str	r2, [r3, #32]
 80060d2:	e00e      	b.n	80060f2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 809a 	bne.w	8006238 <USB_EPStartXfer+0x5b0>
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800610c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006110:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006136:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	440a      	add	r2, r1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006152:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4413      	add	r3, r2
 800615a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d122      	bne.n	80061b6 <USB_EPStartXfer+0x52e>
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006182:	b29a      	uxth	r2, r3
 8006184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006188:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e083      	b.n	80062be <USB_EPStartXfer+0x636>
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	2b3e      	cmp	r3, #62	; 0x3e
 80061bc:	d81b      	bhi.n	80061f6 <USB_EPStartXfer+0x56e>
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80061c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <USB_EPStartXfer+0x556>
 80061d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80061d8:	3301      	adds	r3, #1
 80061da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80061de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	029b      	lsls	r3, r3, #10
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e063      	b.n	80062be <USB_EPStartXfer+0x636>
 80061f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USB_EPStartXfer+0x58e>
 800620c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006210:	3b01      	subs	r3, #1
 8006212:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006216:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800621a:	b29b      	uxth	r3, r3
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e042      	b.n	80062be <USB_EPStartXfer+0x636>
 8006238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d13a      	bne.n	80062be <USB_EPStartXfer+0x636>
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006250:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006254:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626a:	b29b      	uxth	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006276:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800627a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	440a      	add	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006296:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4413      	add	r3, r2
 800629e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80062a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	891b      	ldrh	r3, [r3, #8]
 80062ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6959      	ldr	r1, [r3, #20]
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f001 fc41 	bl	8007b74 <USB_WritePMA>
 80062f2:	f000 be0e 	b.w	8006f12 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d16d      	bne.n	80063e2 <USB_EPStartXfer+0x75a>
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	64bb      	str	r3, [r7, #72]	; 0x48
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006326:	4413      	add	r3, r2
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	011a      	lsls	r2, r3, #4
 8006338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633a:	4413      	add	r3, r2
 800633c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006340:	647b      	str	r3, [r7, #68]	; 0x44
 8006342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d112      	bne.n	8006370 <USB_EPStartXfer+0x6e8>
 800634a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006354:	b29a      	uxth	r2, r3
 8006356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	e063      	b.n	8006438 <USB_EPStartXfer+0x7b0>
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006374:	2b3e      	cmp	r3, #62	; 0x3e
 8006376:	d817      	bhi.n	80063a8 <USB_EPStartXfer+0x720>
 8006378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <USB_EPStartXfer+0x710>
 800638e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006392:	3301      	adds	r3, #1
 8006394:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e047      	b.n	8006438 <USB_EPStartXfer+0x7b0>
 80063a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <USB_EPStartXfer+0x740>
 80063be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063c2:	3b01      	subs	r3, #1
 80063c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	029b      	lsls	r3, r3, #10
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063da:	b29a      	uxth	r2, r3
 80063dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e02a      	b.n	8006438 <USB_EPStartXfer+0x7b0>
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d122      	bne.n	8006438 <USB_EPStartXfer+0x7b0>
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	653b      	str	r3, [r7, #80]	; 0x50
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800640c:	b29b      	uxth	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006412:	4413      	add	r3, r2
 8006414:	653b      	str	r3, [r7, #80]	; 0x50
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	011a      	lsls	r2, r3, #4
 8006424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006426:	4413      	add	r3, r2
 8006428:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800642c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	b29a      	uxth	r2, r3
 8006434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	891b      	ldrh	r3, [r3, #8]
 8006444:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6959      	ldr	r1, [r3, #20]
 8006454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006458:	b29b      	uxth	r3, r3
 800645a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800645e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006462:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006466:	6800      	ldr	r0, [r0, #0]
 8006468:	f001 fb84 	bl	8007b74 <USB_WritePMA>
            ep->xfer_buff += len;
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647c:	441a      	add	r2, r3
 800647e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a1a      	ldr	r2, [r3, #32]
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d90f      	bls.n	80064c6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	621a      	str	r2, [r3, #32]
 80064c4:	e00e      	b.n	80064e4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80064d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2200      	movs	r2, #0
 80064e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	643b      	str	r3, [r7, #64]	; 0x40
 80064f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d16d      	bne.n	80065dc <USB_EPStartXfer+0x954>
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	63bb      	str	r3, [r7, #56]	; 0x38
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	4413      	add	r3, r2
 8006522:	63bb      	str	r3, [r7, #56]	; 0x38
 8006524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	011a      	lsls	r2, r3, #4
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	4413      	add	r3, r2
 8006536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
 800653c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d112      	bne.n	800656a <USB_EPStartXfer+0x8e2>
 8006544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800654e:	b29a      	uxth	r2, r3
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006562:	b29a      	uxth	r2, r3
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e05d      	b.n	8006626 <USB_EPStartXfer+0x99e>
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	2b3e      	cmp	r3, #62	; 0x3e
 8006570:	d817      	bhi.n	80065a2 <USB_EPStartXfer+0x91a>
 8006572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800657c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <USB_EPStartXfer+0x90a>
 8006588:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800658c:	3301      	adds	r3, #1
 800658e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006596:	b29b      	uxth	r3, r3
 8006598:	029b      	lsls	r3, r3, #10
 800659a:	b29a      	uxth	r2, r3
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e041      	b.n	8006626 <USB_EPStartXfer+0x99e>
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80065ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <USB_EPStartXfer+0x93a>
 80065b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065bc:	3b01      	subs	r3, #1
 80065be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80065c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	029b      	lsls	r3, r3, #10
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e024      	b.n	8006626 <USB_EPStartXfer+0x99e>
 80065dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d11c      	bne.n	8006626 <USB_EPStartXfer+0x99e>
 80065ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006600:	4413      	add	r3, r2
 8006602:	643b      	str	r3, [r7, #64]	; 0x40
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	011a      	lsls	r2, r3, #4
 8006612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006614:	4413      	add	r3, r2
 8006616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006620:	b29a      	uxth	r2, r3
 8006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006624:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	895b      	ldrh	r3, [r3, #10]
 8006632:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6959      	ldr	r1, [r3, #20]
 8006642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006646:	b29b      	uxth	r3, r3
 8006648:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800664c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006650:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006654:	6800      	ldr	r0, [r0, #0]
 8006656:	f001 fa8d 	bl	8007b74 <USB_WritePMA>
 800665a:	f000 bc5a 	b.w	8006f12 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	441a      	add	r2, r3
 80066b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ea:	4413      	add	r3, r2
 80066ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	011a      	lsls	r2, r3, #4
 80066fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fe:	4413      	add	r3, r2
 8006700:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006704:	65bb      	str	r3, [r7, #88]	; 0x58
 8006706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670a:	b29a      	uxth	r2, r3
 800670c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800670e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	891b      	ldrh	r3, [r3, #8]
 800671c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6959      	ldr	r1, [r3, #20]
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	b29b      	uxth	r3, r3
 8006732:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006736:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800673a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	f001 fa18 	bl	8007b74 <USB_WritePMA>
 8006744:	e3e5      	b.n	8006f12 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800678e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006796:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800679a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679e:	b29b      	uxth	r3, r3
 80067a0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 81bc 	beq.w	8006b60 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d16d      	bne.n	80068e2 <USB_EPStartXfer+0xc5a>
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	67bb      	str	r3, [r7, #120]	; 0x78
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006826:	4413      	add	r3, r2
 8006828:	67bb      	str	r3, [r7, #120]	; 0x78
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	011a      	lsls	r2, r3, #4
 8006838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683a:	4413      	add	r3, r2
 800683c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006840:	677b      	str	r3, [r7, #116]	; 0x74
 8006842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d112      	bne.n	8006870 <USB_EPStartXfer+0xbe8>
 800684a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006854:	b29a      	uxth	r2, r3
 8006856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006868:	b29a      	uxth	r2, r3
 800686a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e060      	b.n	8006932 <USB_EPStartXfer+0xcaa>
 8006870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006874:	2b3e      	cmp	r3, #62	; 0x3e
 8006876:	d817      	bhi.n	80068a8 <USB_EPStartXfer+0xc20>
 8006878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <USB_EPStartXfer+0xc10>
 800688e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006892:	3301      	adds	r3, #1
 8006894:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006898:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800689c:	b29b      	uxth	r3, r3
 800689e:	029b      	lsls	r3, r3, #10
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	e044      	b.n	8006932 <USB_EPStartXfer+0xcaa>
 80068a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80068b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <USB_EPStartXfer+0xc40>
 80068be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80068c2:	3b01      	subs	r3, #1
 80068c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80068c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068da:	b29a      	uxth	r2, r3
 80068dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	e027      	b.n	8006932 <USB_EPStartXfer+0xcaa>
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d11f      	bne.n	8006932 <USB_EPStartXfer+0xcaa>
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006900:	b29b      	uxth	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006908:	4413      	add	r3, r2
 800690a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	011a      	lsls	r2, r3, #4
 800691c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006920:	4413      	add	r3, r2
 8006922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006926:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692c:	b29a      	uxth	r2, r3
 800692e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006930:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	895b      	ldrh	r3, [r3, #10]
 800693e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6959      	ldr	r1, [r3, #20]
 800694e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006952:	b29b      	uxth	r3, r3
 8006954:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006958:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800695c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006960:	6800      	ldr	r0, [r0, #0]
 8006962:	f001 f907 	bl	8007b74 <USB_WritePMA>
          ep->xfer_buff += len;
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006976:	441a      	add	r2, r3
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	429a      	cmp	r2, r3
 800699e:	d90f      	bls.n	80069c0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	621a      	str	r2, [r3, #32]
 80069be:	e00e      	b.n	80069de <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80069d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80069de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8295 	beq.w	8006f12 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d16d      	bne.n	8006ad4 <USB_EPStartXfer+0xe4c>
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a18:	4413      	add	r3, r2
 8006a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	011a      	lsls	r2, r3, #4
 8006a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a32:	667b      	str	r3, [r7, #100]	; 0x64
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d112      	bne.n	8006a62 <USB_EPStartXfer+0xdda>
 8006a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e063      	b.n	8006b2a <USB_EPStartXfer+0xea2>
 8006a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a66:	2b3e      	cmp	r3, #62	; 0x3e
 8006a68:	d817      	bhi.n	8006a9a <USB_EPStartXfer+0xe12>
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <USB_EPStartXfer+0xe02>
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a84:	3301      	adds	r3, #1
 8006a86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	029b      	lsls	r3, r3, #10
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a96:	801a      	strh	r2, [r3, #0]
 8006a98:	e047      	b.n	8006b2a <USB_EPStartXfer+0xea2>
 8006a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <USB_EPStartXfer+0xe32>
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e02a      	b.n	8006b2a <USB_EPStartXfer+0xea2>
 8006ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d122      	bne.n	8006b2a <USB_EPStartXfer+0xea2>
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	673b      	str	r3, [r7, #112]	; 0x70
 8006af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b04:	4413      	add	r3, r2
 8006b06:	673b      	str	r3, [r7, #112]	; 0x70
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	011a      	lsls	r2, r3, #4
 8006b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	891b      	ldrh	r3, [r3, #8]
 8006b36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6959      	ldr	r1, [r3, #20]
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	f001 f80b 	bl	8007b74 <USB_WritePMA>
 8006b5e:	e1d8      	b.n	8006f12 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d178      	bne.n	8006c62 <USB_EPStartXfer+0xfda>
 8006b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b94:	4413      	add	r3, r2
 8006b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	011a      	lsls	r2, r3, #4
 8006ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d116      	bne.n	8006bec <USB_EPStartXfer+0xf64>
 8006bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e06b      	b.n	8006cc4 <USB_EPStartXfer+0x103c>
 8006bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8006bf2:	d818      	bhi.n	8006c26 <USB_EPStartXfer+0xf9e>
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <USB_EPStartXfer+0xf8c>
 8006c0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006c14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	029b      	lsls	r3, r3, #10
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e04e      	b.n	8006cc4 <USB_EPStartXfer+0x103c>
 8006c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USB_EPStartXfer+0xfbe>
 8006c3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e030      	b.n	8006cc4 <USB_EPStartXfer+0x103c>
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d128      	bne.n	8006cc4 <USB_EPStartXfer+0x103c>
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c96:	4413      	add	r3, r2
 8006c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	011a      	lsls	r2, r3, #4
 8006caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cae:	4413      	add	r3, r2
 8006cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	891b      	ldrh	r3, [r3, #8]
 8006cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6959      	ldr	r1, [r3, #20]
 8006ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	f000 ff3e 	bl	8007b74 <USB_WritePMA>
          ep->xfer_buff += len;
 8006cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d08:	441a      	add	r2, r3
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6a1a      	ldr	r2, [r3, #32]
 8006d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d90f      	bls.n	8006d52 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	621a      	str	r2, [r3, #32]
 8006d50:	e00e      	b.n	8006d70 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80cc 	beq.w	8006f12 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d178      	bne.n	8006e8a <USB_EPStartXfer+0x1202>
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	011a      	lsls	r2, r3, #4
 8006dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d116      	bne.n	8006e14 <USB_EPStartXfer+0x118c>
 8006de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	e064      	b.n	8006ede <USB_EPStartXfer+0x1256>
 8006e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e18:	2b3e      	cmp	r3, #62	; 0x3e
 8006e1a:	d818      	bhi.n	8006e4e <USB_EPStartXfer+0x11c6>
 8006e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e20:	085b      	lsrs	r3, r3, #1
 8006e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <USB_EPStartXfer+0x11b4>
 8006e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e36:	3301      	adds	r3, #1
 8006e38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	029b      	lsls	r3, r3, #10
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e047      	b.n	8006ede <USB_EPStartXfer+0x1256>
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <USB_EPStartXfer+0x11e6>
 8006e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	029b      	lsls	r3, r3, #10
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	e029      	b.n	8006ede <USB_EPStartXfer+0x1256>
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d121      	bne.n	8006ede <USB_EPStartXfer+0x1256>
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	011a      	lsls	r2, r3, #4
 8006ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec8:	4413      	add	r3, r2
 8006eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006edc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	895b      	ldrh	r3, [r3, #10]
 8006eea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6959      	ldr	r1, [r3, #20]
 8006efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f0c:	6800      	ldr	r0, [r0, #0]
 8006f0e:	f000 fe31 	bl	8007b74 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f34:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f40:	8013      	strh	r3, [r2, #0]
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006f4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f4e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006f52:	8812      	ldrh	r2, [r2, #0]
 8006f54:	f082 0210 	eor.w	r2, r2, #16
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006f62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f66:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	f082 0220 	eor.w	r2, r2, #32
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]
 8006faa:	f000 bc9f 	b.w	80078ec <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	7b1b      	ldrb	r3, [r3, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 80ae 	bne.w	800711c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d917      	bls.n	800700c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	1ad2      	subs	r2, r2, r3
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	619a      	str	r2, [r3, #24]
 800700a:	e00e      	b.n	800702a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800704e:	4413      	add	r3, r2
 8007050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	011a      	lsls	r2, r3, #4
 8007062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007066:	4413      	add	r3, r2
 8007068:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800706c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d116      	bne.n	80070a6 <USB_EPStartXfer+0x141e>
 8007078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007084:	b29a      	uxth	r2, r3
 8007086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	e3e8      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	2b3e      	cmp	r3, #62	; 0x3e
 80070ac:	d818      	bhi.n	80070e0 <USB_EPStartXfer+0x1458>
 80070ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <USB_EPStartXfer+0x1446>
 80070c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070c8:	3301      	adds	r3, #1
 80070ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	e3cb      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <USB_EPStartXfer+0x1478>
 80070f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070fa:	3b01      	subs	r3, #1
 80070fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007104:	b29b      	uxth	r3, r3
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e3ad      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800711c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	78db      	ldrb	r3, [r3, #3]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f040 8200 	bne.w	800752e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 8091 	bne.w	8007262 <USB_EPStartXfer+0x15da>
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800714e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715c:	b29b      	uxth	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007164:	4413      	add	r3, r2
 8007166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	011a      	lsls	r2, r3, #4
 8007178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800717c:	4413      	add	r3, r2
 800717e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d116      	bne.n	80071c4 <USB_EPStartXfer+0x153c>
 8007196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	e083      	b.n	80072cc <USB_EPStartXfer+0x1644>
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b3e      	cmp	r3, #62	; 0x3e
 80071d2:	d820      	bhi.n	8007216 <USB_EPStartXfer+0x158e>
 80071d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <USB_EPStartXfer+0x157c>
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fe:	3301      	adds	r3, #1
 8007200:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	b29b      	uxth	r3, r3
 800720a:	029b      	lsls	r3, r3, #10
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	e05a      	b.n	80072cc <USB_EPStartXfer+0x1644>
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <USB_EPStartXfer+0x15be>
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007240:	3b01      	subs	r3, #1
 8007242:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724a:	b29b      	uxth	r3, r3
 800724c:	029b      	lsls	r3, r3, #10
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e034      	b.n	80072cc <USB_EPStartXfer+0x1644>
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d12c      	bne.n	80072cc <USB_EPStartXfer+0x1644>
 8007272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007296:	4413      	add	r3, r2
 8007298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	011a      	lsls	r2, r3, #4
 80072aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072ae:	4413      	add	r3, r2
 80072b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f040 8091 	bne.w	800740e <USB_EPStartXfer+0x1786>
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007308:	b29b      	uxth	r3, r3
 800730a:	461a      	mov	r2, r3
 800730c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007310:	4413      	add	r3, r2
 8007312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	011a      	lsls	r2, r3, #4
 8007324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007328:	4413      	add	r3, r2
 800732a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800732e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d116      	bne.n	8007370 <USB_EPStartXfer+0x16e8>
 8007342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007366:	b29a      	uxth	r2, r3
 8007368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e07c      	b.n	800746a <USB_EPStartXfer+0x17e2>
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b3e      	cmp	r3, #62	; 0x3e
 800737e:	d820      	bhi.n	80073c2 <USB_EPStartXfer+0x173a>
 8007380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <USB_EPStartXfer+0x1728>
 80073a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073aa:	3301      	adds	r3, #1
 80073ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	029b      	lsls	r3, r3, #10
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	e053      	b.n	800746a <USB_EPStartXfer+0x17e2>
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <USB_EPStartXfer+0x176a>
 80073e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073ec:	3b01      	subs	r3, #1
 80073ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e02d      	b.n	800746a <USB_EPStartXfer+0x17e2>
 800740e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d125      	bne.n	800746a <USB_EPStartXfer+0x17e2>
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007434:	4413      	add	r3, r2
 8007436:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	011a      	lsls	r2, r3, #4
 8007448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800744c:	4413      	add	r3, r2
 800744e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007468:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 81fe 	beq.w	8007878 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800749c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80074a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <USB_EPStartXfer+0x182c>
 80074a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80074b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 81db 	bne.w	8007878 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074c2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 81d4 	bne.w	8007878 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	441a      	add	r2, r3
 8007514:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
 800752c:	e1a4      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	78db      	ldrb	r3, [r3, #3]
 800753a:	2b01      	cmp	r3, #1
 800753c:	f040 819a 	bne.w	8007874 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	429a      	cmp	r2, r3
 800755a:	d917      	bls.n	800758c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800755c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800756c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757c:	1ad2      	subs	r2, r2, r3
 800757e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	619a      	str	r2, [r3, #24]
 800758a:	e00e      	b.n	80075aa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800758c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800759c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d178      	bne.n	80076ac <USB_EPStartXfer+0x1a24>
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075de:	4413      	add	r3, r2
 80075e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d116      	bne.n	8007636 <USB_EPStartXfer+0x19ae>
 8007608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e06b      	b.n	800770e <USB_EPStartXfer+0x1a86>
 8007636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763a:	2b3e      	cmp	r3, #62	; 0x3e
 800763c:	d818      	bhi.n	8007670 <USB_EPStartXfer+0x19e8>
 800763e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d004      	beq.n	800765e <USB_EPStartXfer+0x19d6>
 8007654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007658:	3301      	adds	r3, #1
 800765a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800765e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007662:	b29b      	uxth	r3, r3
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	b29a      	uxth	r2, r3
 8007668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e04e      	b.n	800770e <USB_EPStartXfer+0x1a86>
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800767a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USB_EPStartXfer+0x1a08>
 8007686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800768a:	3b01      	subs	r3, #1
 800768c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007694:	b29b      	uxth	r3, r3
 8007696:	029b      	lsls	r3, r3, #10
 8007698:	b29b      	uxth	r3, r3
 800769a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	e030      	b.n	800770e <USB_EPStartXfer+0x1a86>
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d128      	bne.n	800770e <USB_EPStartXfer+0x1a86>
 80076bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d8:	b29b      	uxth	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e0:	4413      	add	r3, r2
 80076e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	011a      	lsls	r2, r3, #4
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	b29a      	uxth	r2, r3
 8007708:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d178      	bne.n	800781e <USB_EPStartXfer+0x1b96>
 800772c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007748:	b29b      	uxth	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007750:	4413      	add	r3, r2
 8007752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	011a      	lsls	r2, r3, #4
 8007764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007768:	4413      	add	r3, r2
 800776a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800776e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d116      	bne.n	80077a8 <USB_EPStartXfer+0x1b20>
 800777a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779e:	b29a      	uxth	r2, r3
 80077a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a4:	801a      	strh	r2, [r3, #0]
 80077a6:	e067      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
 80077a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ac:	2b3e      	cmp	r3, #62	; 0x3e
 80077ae:	d818      	bhi.n	80077e2 <USB_EPStartXfer+0x1b5a>
 80077b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <USB_EPStartXfer+0x1b48>
 80077c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ca:	3301      	adds	r3, #1
 80077cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	b29a      	uxth	r2, r3
 80077da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	e04a      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
 80077e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <USB_EPStartXfer+0x1b7a>
 80077f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077fc:	3b01      	subs	r3, #1
 80077fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007806:	b29b      	uxth	r3, r3
 8007808:	029b      	lsls	r3, r3, #10
 800780a:	b29b      	uxth	r3, r3
 800780c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800781a:	801a      	strh	r2, [r3, #0]
 800781c:	e02c      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d124      	bne.n	8007878 <USB_EPStartXfer+0x1bf0>
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783c:	b29b      	uxth	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007844:	4413      	add	r3, r2
 8007846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	011a      	lsls	r2, r3, #4
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	4413      	add	r3, r2
 800785e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786a:	b29a      	uxth	r2, r3
 800786c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e001      	b.n	8007878 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e03a      	b.n	80078ee <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800789a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80078a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80078a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80078ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80078b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80078ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80078d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d020      	beq.n	800794c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007920:	81bb      	strh	r3, [r7, #12]
 8007922:	89bb      	ldrh	r3, [r7, #12]
 8007924:	f083 0310 	eor.w	r3, r3, #16
 8007928:	81bb      	strh	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	441a      	add	r2, r3
 8007934:	89bb      	ldrh	r3, [r7, #12]
 8007936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007946:	b29b      	uxth	r3, r3
 8007948:	8013      	strh	r3, [r2, #0]
 800794a:	e01f      	b.n	800798c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	81fb      	strh	r3, [r7, #14]
 8007964:	89fb      	ldrh	r3, [r7, #14]
 8007966:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800796a:	81fb      	strh	r3, [r7, #14]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	89fb      	ldrh	r3, [r7, #14]
 8007978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	b29b      	uxth	r3, r3
 800798a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	7b1b      	ldrb	r3, [r3, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 809d 	bne.w	8007ae6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d04c      	beq.n	8007a4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	823b      	strh	r3, [r7, #16]
 80079c2:	8a3b      	ldrh	r3, [r7, #16]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <USB_EPClearStall+0x6c>
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e2:	81fb      	strh	r3, [r7, #14]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	89fb      	ldrh	r3, [r7, #14]
 80079f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d06c      	beq.n	8007ae6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a22:	81bb      	strh	r3, [r7, #12]
 8007a24:	89bb      	ldrh	r3, [r7, #12]
 8007a26:	f083 0320 	eor.w	r3, r3, #32
 8007a2a:	81bb      	strh	r3, [r7, #12]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	441a      	add	r2, r3
 8007a36:	89bb      	ldrh	r3, [r7, #12]
 8007a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	8013      	strh	r3, [r2, #0]
 8007a4c:	e04b      	b.n	8007ae6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	82fb      	strh	r3, [r7, #22]
 8007a5c:	8afb      	ldrh	r3, [r7, #22]
 8007a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01b      	beq.n	8007a9e <USB_EPClearStall+0x106>
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7c:	82bb      	strh	r3, [r7, #20]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	441a      	add	r2, r3
 8007a88:	8abb      	ldrh	r3, [r7, #20]
 8007a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab4:	827b      	strh	r3, [r7, #18]
 8007ab6:	8a7b      	ldrh	r3, [r7, #18]
 8007ab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007abc:	827b      	strh	r3, [r7, #18]
 8007abe:	8a7b      	ldrh	r3, [r7, #18]
 8007ac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ac4:	827b      	strh	r3, [r7, #18]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	441a      	add	r2, r3
 8007ad0:	8a7b      	ldrh	r3, [r7, #18]
 8007ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b52:	68fb      	ldr	r3, [r7, #12]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b08d      	sub	sp, #52	; 0x34
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	460b      	mov	r3, r1
 8007b84:	80fb      	strh	r3, [r7, #6]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b8a:	88bb      	ldrh	r3, [r7, #4]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	005a      	lsls	r2, r3, #1
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bac:	e01e      	b.n	8007bec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	3302      	adds	r3, #2
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	3302      	adds	r3, #2
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	3301      	adds	r3, #1
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	3b01      	subs	r3, #1
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1dd      	bne.n	8007bae <USB_WritePMA+0x3a>
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	3734      	adds	r7, #52	; 0x34
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b08b      	sub	sp, #44	; 0x2c
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	80fb      	strh	r3, [r7, #6]
 8007c10:	4613      	mov	r3, r2
 8007c12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c14:	88bb      	ldrh	r3, [r7, #4]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	005a      	lsls	r2, r3, #1
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c30:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
 8007c36:	e01b      	b.n	8007c70 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	3302      	adds	r3, #2
 8007c44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	3301      	adds	r3, #1
 8007c52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	3301      	adds	r3, #1
 8007c62:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	3302      	adds	r3, #2
 8007c68:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e0      	bne.n	8007c38 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007c76:	88bb      	ldrh	r3, [r7, #4]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	701a      	strb	r2, [r3, #0]
  }
}
 8007c92:	bf00      	nop
 8007c94:	372c      	adds	r7, #44	; 0x2c
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7c1b      	ldrb	r3, [r3, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d115      	bne.n	8007ce0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb8:	2202      	movs	r2, #2
 8007cba:	2181      	movs	r1, #129	; 0x81
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fe92 	bl	80099e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ccc:	2202      	movs	r2, #2
 8007cce:	2101      	movs	r1, #1
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fe88 	bl	80099e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007cde:	e012      	b.n	8007d06 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ce0:	2340      	movs	r3, #64	; 0x40
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	2181      	movs	r1, #129	; 0x81
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fe7d 	bl	80099e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cf2:	2340      	movs	r3, #64	; 0x40
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fe74 	bl	80099e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d06:	2308      	movs	r3, #8
 8007d08:	2203      	movs	r2, #3
 8007d0a:	2182      	movs	r1, #130	; 0x82
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 fe6a 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d1c:	f001 ff8a 	bl	8009c34 <USBD_static_malloc>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]
 8007d36:	e026      	b.n	8007d86 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7c1b      	ldrb	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 ff2a 	bl	8009bc8 <USBD_LL_PrepareReceive>
 8007d74:	e007      	b.n	8007d86 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 ff21 	bl	8009bc8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007da0:	2181      	movs	r1, #129	; 0x81
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fe45 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007dae:	2101      	movs	r1, #1
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fe3e 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007dbe:	2182      	movs	r1, #130	; 0x82
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fe36 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 ff30 	bl	8009c4c <USBD_static_free>
    pdev->pClassData = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d039      	beq.n	8007e9c <USBD_CDC_Setup+0x9e>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d17f      	bne.n	8007f2c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	88db      	ldrh	r3, [r3, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d029      	beq.n	8007e88 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da11      	bge.n	8007e62 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	88d2      	ldrh	r2, [r2, #6]
 8007e50:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e52:	6939      	ldr	r1, [r7, #16]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fa09 	bl	8009272 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e60:	e06b      	b.n	8007f3a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	785a      	ldrb	r2, [r3, #1]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e78:	6939      	ldr	r1, [r7, #16]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88db      	ldrh	r3, [r3, #6]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fa24 	bl	80092ce <USBD_CtlPrepareRx>
      break;
 8007e86:	e058      	b.n	8007f3a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	7850      	ldrb	r0, [r2, #1]
 8007e94:	2200      	movs	r2, #0
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	4798      	blx	r3
      break;
 8007e9a:	e04e      	b.n	8007f3a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	d02e      	beq.n	8007f02 <USBD_CDC_Setup+0x104>
 8007ea4:	2b0b      	cmp	r3, #11
 8007ea6:	dc38      	bgt.n	8007f1a <USBD_CDC_Setup+0x11c>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <USBD_CDC_Setup+0xb4>
 8007eac:	2b0a      	cmp	r3, #10
 8007eae:	d014      	beq.n	8007eda <USBD_CDC_Setup+0xdc>
 8007eb0:	e033      	b.n	8007f1a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d107      	bne.n	8007ecc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ebc:	f107 030c 	add.w	r3, r7, #12
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f9d4 	bl	8009272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eca:	e02e      	b.n	8007f2a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 f965 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed8:	e027      	b.n	8007f2a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d107      	bne.n	8007ef4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ee4:	f107 030f 	add.w	r3, r7, #15
 8007ee8:	2201      	movs	r2, #1
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f9c0 	bl	8009272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ef2:	e01a      	b.n	8007f2a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 f951 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007efc:	2302      	movs	r3, #2
 8007efe:	75fb      	strb	r3, [r7, #23]
          break;
 8007f00:	e013      	b.n	8007f2a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d00d      	beq.n	8007f28 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 f945 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f18:	e006      	b.n	8007f28 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f93e 	bl	800919e <USBD_CtlError>
          ret = USBD_FAIL;
 8007f22:	2302      	movs	r3, #2
 8007f24:	75fb      	strb	r3, [r7, #23]
          break;
 8007f26:	e000      	b.n	8007f2a <USBD_CDC_Setup+0x12c>
          break;
 8007f28:	bf00      	nop
      }
      break;
 8007f2a:	e006      	b.n	8007f3a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 f935 	bl	800919e <USBD_CtlError>
      ret = USBD_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	75fb      	strb	r3, [r7, #23]
      break;
 8007f38:	bf00      	nop
  }

  return ret;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f5e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03a      	beq.n	8007fe0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f6a:	78fa      	ldrb	r2, [r7, #3]
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	331c      	adds	r3, #28
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d029      	beq.n	8007fd4 <USBD_CDC_DataIn+0x90>
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	331c      	adds	r3, #28
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	78f9      	ldrb	r1, [r7, #3]
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	460b      	mov	r3, r1
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	4403      	add	r3, r0
 8007fa0:	3338      	adds	r3, #56	; 0x38
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d110      	bne.n	8007fd4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	331c      	adds	r3, #28
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fc6:	78f9      	ldrb	r1, [r7, #3]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fdd8 	bl	8009b82 <USBD_LL_Transmit>
 8007fd2:	e003      	b.n	8007fdc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e000      	b.n	8007fe2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007fe0:	2302      	movs	r3, #2
  }
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fe03 	bl	8009c0e <USBD_LL_GetRxDataSize>
 8008008:	4602      	mov	r2, r0
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800802e:	4611      	mov	r1, r2
 8008030:	4798      	blx	r3

    return USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008036:	2302      	movs	r3, #2
  }
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008056:	2b00      	cmp	r3, #0
 8008058:	d015      	beq.n	8008086 <USBD_CDC_EP0_RxReady+0x46>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008060:	2bff      	cmp	r3, #255	; 0xff
 8008062:	d010      	beq.n	8008086 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008072:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800807a:	b292      	uxth	r2, r2
 800807c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	22ff      	movs	r2, #255	; 0xff
 8008082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2243      	movs	r2, #67	; 0x43
 800809c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20000094 	.word	0x20000094

080080b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2243      	movs	r2, #67	; 0x43
 80080bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80080be:	4b03      	ldr	r3, [pc, #12]	; (80080cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000050 	.word	0x20000050

080080d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2243      	movs	r2, #67	; 0x43
 80080dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080de:	4b03      	ldr	r3, [pc, #12]	; (80080ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	200000d8 	.word	0x200000d8

080080f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	220a      	movs	r2, #10
 80080fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080fe:	4b03      	ldr	r3, [pc, #12]	; (800810c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	2000000c 	.word	0x2000000c

08008110 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800811a:	2302      	movs	r3, #2
 800811c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr

0800813c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr

0800816e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800816e:	b480      	push	{r7}
 8008170:	b085      	sub	sp, #20
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d01c      	beq.n	80081e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d115      	bne.n	80081e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2181      	movs	r1, #129	; 0x81
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fcd1 	bl	8009b82 <USBD_LL_Transmit>

      return USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e002      	b.n	80081ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80081e8:	2302      	movs	r3, #2
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008200:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d017      	beq.n	800823c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7c1b      	ldrb	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800821a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800821e:	2101      	movs	r1, #1
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 fcd1 	bl	8009bc8 <USBD_LL_PrepareReceive>
 8008226:	e007      	b.n	8008238 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800822e:	2340      	movs	r3, #64	; 0x40
 8008230:	2101      	movs	r1, #1
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 fcc8 	bl	8009bc8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	e000      	b.n	800823e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800823c:	2302      	movs	r3, #2
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	4613      	mov	r3, r2
 8008252:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800825a:	2302      	movs	r3, #2
 800825c:	e01a      	b.n	8008294 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	79fa      	ldrb	r2, [r7, #7]
 800828a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 fb35 	bl	80098fc <USBD_LL_Init>

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
 80082bc:	e001      	b.n	80082c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80082be:	2302      	movs	r3, #2
 80082c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fb6a 	bl	80099b0 <USBD_LL_Start>

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr

080082fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	460b      	mov	r3, r1
 8008304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008306:	2302      	movs	r3, #2
 8008308:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00c      	beq.n	800832e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	4611      	mov	r1, r2
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fed8 	bl	8009126 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008384:	461a      	mov	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	2b02      	cmp	r3, #2
 8008398:	d016      	beq.n	80083c8 <USBD_LL_SetupStage+0x6a>
 800839a:	2b02      	cmp	r3, #2
 800839c:	d81c      	bhi.n	80083d8 <USBD_LL_SetupStage+0x7a>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <USBD_LL_SetupStage+0x4a>
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d008      	beq.n	80083b8 <USBD_LL_SetupStage+0x5a>
 80083a6:	e017      	b.n	80083d8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f9cb 	bl	800874c <USBD_StdDevReq>
      break;
 80083b6:	e01a      	b.n	80083ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa2d 	bl	8008820 <USBD_StdItfReq>
      break;
 80083c6:	e012      	b.n	80083ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fa6d 	bl	80088b0 <USBD_StdEPReq>
      break;
 80083d6:	e00a      	b.n	80083ee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fb42 	bl	8009a70 <USBD_LL_StallEP>
      break;
 80083ec:	bf00      	nop
  }

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	460b      	mov	r3, r1
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d14b      	bne.n	80084a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008412:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800841a:	2b03      	cmp	r3, #3
 800841c:	d134      	bne.n	8008488 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	429a      	cmp	r2, r3
 8008428:	d919      	bls.n	800845e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008440:	429a      	cmp	r2, r3
 8008442:	d203      	bcs.n	800844c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008448:	b29b      	uxth	r3, r3
 800844a:	e002      	b.n	8008452 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008450:	b29b      	uxth	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 ff57 	bl	800930a <USBD_CtlContinueRx>
 800845c:	e038      	b.n	80084d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008470:	2b03      	cmp	r3, #3
 8008472:	d105      	bne.n	8008480 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 ff54 	bl	800932e <USBD_CtlSendStatus>
 8008486:	e023      	b.n	80084d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800848e:	2b05      	cmp	r3, #5
 8008490:	d11e      	bne.n	80084d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800849a:	2100      	movs	r1, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f001 fae7 	bl	8009a70 <USBD_LL_StallEP>
 80084a2:	e015      	b.n	80084d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d108      	bne.n	80084cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	7afa      	ldrb	r2, [r7, #11]
 80084c4:	4611      	mov	r1, r2
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	4798      	blx	r3
 80084ca:	e001      	b.n	80084d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084cc:	2302      	movs	r3, #2
 80084ce:	e000      	b.n	80084d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	460b      	mov	r3, r1
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d17f      	bne.n	80085ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3314      	adds	r3, #20
 80084f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d15c      	bne.n	80085b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	d915      	bls.n	8008536 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fec1 	bl	80092aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008528:	2300      	movs	r3, #0
 800852a:	2200      	movs	r2, #0
 800852c:	2100      	movs	r1, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f001 fb4a 	bl	8009bc8 <USBD_LL_PrepareReceive>
 8008534:	e04e      	b.n	80085d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	6912      	ldr	r2, [r2, #16]
 800853e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008542:	fb01 f202 	mul.w	r2, r1, r2
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11c      	bne.n	8008586 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008554:	429a      	cmp	r2, r3
 8008556:	d316      	bcc.n	8008586 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008562:	429a      	cmp	r2, r3
 8008564:	d20f      	bcs.n	8008586 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fe9d 	bl	80092aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008578:	2300      	movs	r3, #0
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f001 fb22 	bl	8009bc8 <USBD_LL_PrepareReceive>
 8008584:	e026      	b.n	80085d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008598:	2b03      	cmp	r3, #3
 800859a:	d105      	bne.n	80085a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80085a8:	2180      	movs	r1, #128	; 0x80
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f001 fa60 	bl	8009a70 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 fecf 	bl	8009354 <USBD_CtlReceiveStatus>
 80085b6:	e00d      	b.n	80085d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d004      	beq.n	80085cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085cc:	2180      	movs	r1, #128	; 0x80
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f001 fa4e 	bl	8009a70 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d11d      	bne.n	800861a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fe81 	bl	80082e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085ec:	e015      	b.n	800861a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008600:	2b03      	cmp	r3, #3
 8008602:	d108      	bne.n	8008616 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	7afa      	ldrb	r2, [r7, #11]
 800860e:	4611      	mov	r1, r2
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	4798      	blx	r3
 8008614:	e001      	b.n	800861a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008616:	2302      	movs	r3, #2
 8008618:	e000      	b.n	800861c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f001 f9d7 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2240      	movs	r2, #64	; 0x40
 8008644:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	2200      	movs	r2, #0
 800864c:	2180      	movs	r1, #128	; 0x80
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f9c9 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2240      	movs	r2, #64	; 0x40
 800865e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6852      	ldr	r2, [r2, #4]
 8008694:	b2d2      	uxtb	r2, r2
 8008696:	4611      	mov	r1, r2
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	4798      	blx	r3
  }

  return USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2204      	movs	r2, #4
 80086dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d105      	bne.n	800870a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	2b03      	cmp	r3, #3
 8008726:	d10b      	bne.n	8008740 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d005      	beq.n	8008772 <USBD_StdDevReq+0x26>
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d84f      	bhi.n	800880a <USBD_StdDevReq+0xbe>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <USBD_StdDevReq+0x36>
 800876e:	2b20      	cmp	r3, #32
 8008770:	d14b      	bne.n	800880a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
      break;
 8008780:	e048      	b.n	8008814 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2b09      	cmp	r3, #9
 8008788:	d839      	bhi.n	80087fe <USBD_StdDevReq+0xb2>
 800878a:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <USBD_StdDevReq+0x44>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087e1 	.word	0x080087e1
 8008794:	080087f5 	.word	0x080087f5
 8008798:	080087ff 	.word	0x080087ff
 800879c:	080087eb 	.word	0x080087eb
 80087a0:	080087ff 	.word	0x080087ff
 80087a4:	080087c3 	.word	0x080087c3
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087ff 	.word	0x080087ff
 80087b0:	080087d7 	.word	0x080087d7
 80087b4:	080087cd 	.word	0x080087cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9dc 	bl	8008b78 <USBD_GetDescriptor>
          break;
 80087c0:	e022      	b.n	8008808 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb3f 	bl	8008e48 <USBD_SetAddress>
          break;
 80087ca:	e01d      	b.n	8008808 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb7e 	bl	8008ed0 <USBD_SetConfig>
          break;
 80087d4:	e018      	b.n	8008808 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc07 	bl	8008fec <USBD_GetConfig>
          break;
 80087de:	e013      	b.n	8008808 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fc37 	bl	8009056 <USBD_GetStatus>
          break;
 80087e8:	e00e      	b.n	8008808 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc65 	bl	80090bc <USBD_SetFeature>
          break;
 80087f2:	e009      	b.n	8008808 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fc74 	bl	80090e4 <USBD_ClrFeature>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fccc 	bl	800919e <USBD_CtlError>
          break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fcc6 	bl	800919e <USBD_CtlError>
      break;
 8008812:	bf00      	nop
  }

  return ret;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop

08008820 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008836:	2b40      	cmp	r3, #64	; 0x40
 8008838:	d005      	beq.n	8008846 <USBD_StdItfReq+0x26>
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	d82e      	bhi.n	800889c <USBD_StdItfReq+0x7c>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <USBD_StdItfReq+0x26>
 8008842:	2b20      	cmp	r3, #32
 8008844:	d12a      	bne.n	800889c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	3b01      	subs	r3, #1
 800884e:	2b02      	cmp	r3, #2
 8008850:	d81d      	bhi.n	800888e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	889b      	ldrh	r3, [r3, #4]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b01      	cmp	r3, #1
 800885a:	d813      	bhi.n	8008884 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	88db      	ldrh	r3, [r3, #6]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d110      	bne.n	8008898 <USBD_StdItfReq+0x78>
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10d      	bne.n	8008898 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fd56 	bl	800932e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008882:	e009      	b.n	8008898 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fc89 	bl	800919e <USBD_CtlError>
          break;
 800888c:	e004      	b.n	8008898 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fc84 	bl	800919e <USBD_CtlError>
          break;
 8008896:	e000      	b.n	800889a <USBD_StdItfReq+0x7a>
          break;
 8008898:	bf00      	nop
      }
      break;
 800889a:	e004      	b.n	80088a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fc7d 	bl	800919e <USBD_CtlError>
      break;
 80088a4:	bf00      	nop
  }

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	889b      	ldrh	r3, [r3, #4]
 80088c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d007      	beq.n	80088e0 <USBD_StdEPReq+0x30>
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	f200 8146 	bhi.w	8008b62 <USBD_StdEPReq+0x2b2>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <USBD_StdEPReq+0x40>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	f040 8141 	bne.w	8008b62 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
      break;
 80088ee:	e13d      	b.n	8008b6c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d10a      	bne.n	8008912 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	e12d      	b.n	8008b6e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b03      	cmp	r3, #3
 8008918:	d007      	beq.n	800892a <USBD_StdEPReq+0x7a>
 800891a:	2b03      	cmp	r3, #3
 800891c:	f300 811b 	bgt.w	8008b56 <USBD_StdEPReq+0x2a6>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d072      	beq.n	8008a0a <USBD_StdEPReq+0x15a>
 8008924:	2b01      	cmp	r3, #1
 8008926:	d03a      	beq.n	800899e <USBD_StdEPReq+0xee>
 8008928:	e115      	b.n	8008b56 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	2b02      	cmp	r3, #2
 8008932:	d002      	beq.n	800893a <USBD_StdEPReq+0x8a>
 8008934:	2b03      	cmp	r3, #3
 8008936:	d015      	beq.n	8008964 <USBD_StdEPReq+0xb4>
 8008938:	e02b      	b.n	8008992 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00c      	beq.n	800895a <USBD_StdEPReq+0xaa>
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b80      	cmp	r3, #128	; 0x80
 8008944:	d009      	beq.n	800895a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 f890 	bl	8009a70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008950:	2180      	movs	r1, #128	; 0x80
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 f88c 	bl	8009a70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008958:	e020      	b.n	800899c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fc1e 	bl	800919e <USBD_CtlError>
              break;
 8008962:	e01b      	b.n	800899c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	885b      	ldrh	r3, [r3, #2]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10e      	bne.n	800898a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <USBD_StdEPReq+0xda>
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b80      	cmp	r3, #128	; 0x80
 8008976:	d008      	beq.n	800898a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	88db      	ldrh	r3, [r3, #6]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d104      	bne.n	800898a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 f873 	bl	8009a70 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fccf 	bl	800932e <USBD_CtlSendStatus>

              break;
 8008990:	e004      	b.n	800899c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc02 	bl	800919e <USBD_CtlError>
              break;
 800899a:	bf00      	nop
          }
          break;
 800899c:	e0e0      	b.n	8008b60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d002      	beq.n	80089ae <USBD_StdEPReq+0xfe>
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d015      	beq.n	80089d8 <USBD_StdEPReq+0x128>
 80089ac:	e026      	b.n	80089fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00c      	beq.n	80089ce <USBD_StdEPReq+0x11e>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b80      	cmp	r3, #128	; 0x80
 80089b8:	d009      	beq.n	80089ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 f856 	bl	8009a70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089c4:	2180      	movs	r1, #128	; 0x80
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 f852 	bl	8009a70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089cc:	e01c      	b.n	8008a08 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fbe4 	bl	800919e <USBD_CtlError>
              break;
 80089d6:	e017      	b.n	8008a08 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d112      	bne.n	8008a06 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d004      	beq.n	80089f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 f85d 	bl	8009aae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fc9a 	bl	800932e <USBD_CtlSendStatus>
              }
              break;
 80089fa:	e004      	b.n	8008a06 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fbcd 	bl	800919e <USBD_CtlError>
              break;
 8008a04:	e000      	b.n	8008a08 <USBD_StdEPReq+0x158>
              break;
 8008a06:	bf00      	nop
          }
          break;
 8008a08:	e0aa      	b.n	8008b60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d002      	beq.n	8008a1a <USBD_StdEPReq+0x16a>
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d032      	beq.n	8008a7e <USBD_StdEPReq+0x1ce>
 8008a18:	e097      	b.n	8008b4a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <USBD_StdEPReq+0x180>
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b80      	cmp	r3, #128	; 0x80
 8008a24:	d004      	beq.n	8008a30 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fbb8 	bl	800919e <USBD_CtlError>
                break;
 8008a2e:	e091      	b.n	8008b54 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da0b      	bge.n	8008a50 <USBD_StdEPReq+0x1a0>
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	3310      	adds	r3, #16
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	e00b      	b.n	8008a68 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	4413      	add	r3, r2
 8008a66:	3304      	adds	r3, #4
 8008a68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2202      	movs	r2, #2
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fbfb 	bl	8009272 <USBD_CtlSendData>
              break;
 8008a7c:	e06a      	b.n	8008b54 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da11      	bge.n	8008aaa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	f003 020f 	and.w	r2, r3, #15
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	3318      	adds	r3, #24
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d117      	bne.n	8008ad0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fb7b 	bl	800919e <USBD_CtlError>
                  break;
 8008aa8:	e054      	b.n	8008b54 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	f003 020f 	and.w	r2, r3, #15
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb68 	bl	800919e <USBD_CtlError>
                  break;
 8008ace:	e041      	b.n	8008b54 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da0b      	bge.n	8008af0 <USBD_StdEPReq+0x240>
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	3310      	adds	r3, #16
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	3304      	adds	r3, #4
 8008aee:	e00b      	b.n	8008b08 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <USBD_StdEPReq+0x266>
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d103      	bne.n	8008b1e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e00e      	b.n	8008b3c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 ffe2 	bl	8009aec <USBD_LL_IsStallEP>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2201      	movs	r2, #1
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e002      	b.n	8008b3c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fb95 	bl	8009272 <USBD_CtlSendData>
              break;
 8008b48:	e004      	b.n	8008b54 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fb26 	bl	800919e <USBD_CtlError>
              break;
 8008b52:	bf00      	nop
          }
          break;
 8008b54:	e004      	b.n	8008b60 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fb20 	bl	800919e <USBD_CtlError>
          break;
 8008b5e:	bf00      	nop
      }
      break;
 8008b60:	e004      	b.n	8008b6c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fb1a 	bl	800919e <USBD_CtlError>
      break;
 8008b6a:	bf00      	nop
  }

  return ret;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b06      	cmp	r3, #6
 8008b9a:	f200 8128 	bhi.w	8008dee <USBD_GetDescriptor+0x276>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBD_GetDescriptor+0x2c>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bd9 	.word	0x08008bd9
 8008bac:	08008c19 	.word	0x08008c19
 8008bb0:	08008def 	.word	0x08008def
 8008bb4:	08008def 	.word	0x08008def
 8008bb8:	08008d8f 	.word	0x08008d8f
 8008bbc:	08008dbb 	.word	0x08008dbb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7c12      	ldrb	r2, [r2, #16]
 8008bcc:	f107 0108 	add.w	r1, r7, #8
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
 8008bd4:	60f8      	str	r0, [r7, #12]
      break;
 8008bd6:	e112      	b.n	8008dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7c1b      	ldrb	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10d      	bne.n	8008bfc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f107 0208 	add.w	r2, r7, #8
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
 8008bf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bfa:	e100      	b.n	8008dfe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	f107 0208 	add.w	r2, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3301      	adds	r3, #1
 8008c12:	2202      	movs	r2, #2
 8008c14:	701a      	strb	r2, [r3, #0]
      break;
 8008c16:	e0f2      	b.n	8008dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	885b      	ldrh	r3, [r3, #2]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	f200 80ac 	bhi.w	8008d7c <USBD_GetDescriptor+0x204>
 8008c24:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <USBD_GetDescriptor+0xb4>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008c45 	.word	0x08008c45
 8008c30:	08008c79 	.word	0x08008c79
 8008c34:	08008cad 	.word	0x08008cad
 8008c38:	08008ce1 	.word	0x08008ce1
 8008c3c:	08008d15 	.word	0x08008d15
 8008c40:	08008d49 	.word	0x08008d49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7c12      	ldrb	r2, [r2, #16]
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c66:	e091      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa97 	bl	800919e <USBD_CtlError>
            err++;
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	3301      	adds	r3, #1
 8008c74:	72fb      	strb	r3, [r7, #11]
          break;
 8008c76:	e089      	b.n	8008d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9a:	e077      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa7d 	bl	800919e <USBD_CtlError>
            err++;
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8008caa:	e06f      	b.n	8008d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7c12      	ldrb	r2, [r2, #16]
 8008cc4:	f107 0108 	add.w	r1, r7, #8
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cce:	e05d      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa63 	bl	800919e <USBD_CtlError>
            err++;
 8008cd8:	7afb      	ldrb	r3, [r7, #11]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cde:	e055      	b.n	8008d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7c12      	ldrb	r2, [r2, #16]
 8008cf8:	f107 0108 	add.w	r1, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d02:	e043      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa49 	bl	800919e <USBD_CtlError>
            err++;
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	72fb      	strb	r3, [r7, #11]
          break;
 8008d12:	e03b      	b.n	8008d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	7c12      	ldrb	r2, [r2, #16]
 8008d2c:	f107 0108 	add.w	r1, r7, #8
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d36:	e029      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa2f 	bl	800919e <USBD_CtlError>
            err++;
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	3301      	adds	r3, #1
 8008d44:	72fb      	strb	r3, [r7, #11]
          break;
 8008d46:	e021      	b.n	8008d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	7c12      	ldrb	r2, [r2, #16]
 8008d60:	f107 0108 	add.w	r1, r7, #8
 8008d64:	4610      	mov	r0, r2
 8008d66:	4798      	blx	r3
 8008d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6a:	e00f      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa15 	bl	800919e <USBD_CtlError>
            err++;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	3301      	adds	r3, #1
 8008d78:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7a:	e007      	b.n	8008d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa0d 	bl	800919e <USBD_CtlError>
          err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d8a:	e038      	b.n	8008dfe <USBD_GetDescriptor+0x286>
 8008d8c:	e037      	b.n	8008dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7c1b      	ldrb	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d109      	bne.n	8008daa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9e:	f107 0208 	add.w	r2, r7, #8
 8008da2:	4610      	mov	r0, r2
 8008da4:	4798      	blx	r3
 8008da6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008da8:	e029      	b.n	8008dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9f6 	bl	800919e <USBD_CtlError>
        err++;
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	3301      	adds	r3, #1
 8008db6:	72fb      	strb	r3, [r7, #11]
      break;
 8008db8:	e021      	b.n	8008dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7c1b      	ldrb	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10d      	bne.n	8008dde <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	f107 0208 	add.w	r2, r7, #8
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4798      	blx	r3
 8008dd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	2207      	movs	r2, #7
 8008dda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ddc:	e00f      	b.n	8008dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9dc 	bl	800919e <USBD_CtlError>
        err++;
 8008de6:	7afb      	ldrb	r3, [r7, #11]
 8008de8:	3301      	adds	r3, #1
 8008dea:	72fb      	strb	r3, [r7, #11]
      break;
 8008dec:	e007      	b.n	8008dfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f9d4 	bl	800919e <USBD_CtlError>
      err++;
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8008dfc:	bf00      	nop
  }

  if (err != 0U)
 8008dfe:	7afb      	ldrb	r3, [r7, #11]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d11c      	bne.n	8008e3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e04:	893b      	ldrh	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d011      	beq.n	8008e2e <USBD_GetDescriptor+0x2b6>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	88db      	ldrh	r3, [r3, #6]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00d      	beq.n	8008e2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	88da      	ldrh	r2, [r3, #6]
 8008e16:	893b      	ldrh	r3, [r7, #8]
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	bf28      	it	cs
 8008e1c:	4613      	movcs	r3, r2
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	461a      	mov	r2, r3
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa22 	bl	8009272 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	88db      	ldrh	r3, [r3, #6]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d104      	bne.n	8008e40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa79 	bl	800932e <USBD_CtlSendStatus>
 8008e3c:	e000      	b.n	8008e40 <USBD_GetDescriptor+0x2c8>
    return;
 8008e3e:	bf00      	nop
    }
  }
}
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop

08008e48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	889b      	ldrh	r3, [r3, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d130      	bne.n	8008ebc <USBD_SetAddress+0x74>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d12c      	bne.n	8008ebc <USBD_SetAddress+0x74>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	885b      	ldrh	r3, [r3, #2]
 8008e66:	2b7f      	cmp	r3, #127	; 0x7f
 8008e68:	d828      	bhi.n	8008ebc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d104      	bne.n	8008e8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f98b 	bl	800919e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e88:	e01d      	b.n	8008ec6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fe54 	bl	8009b44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa46 	bl	800932e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb0:	e009      	b.n	8008ec6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	e004      	b.n	8008ec6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f96d 	bl	800919e <USBD_CtlError>
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	4b41      	ldr	r3, [pc, #260]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008ee2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ee4:	4b40      	ldr	r3, [pc, #256]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d904      	bls.n	8008ef6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f955 	bl	800919e <USBD_CtlError>
 8008ef4:	e075      	b.n	8008fe2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d002      	beq.n	8008f06 <USBD_SetConfig+0x36>
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d023      	beq.n	8008f4c <USBD_SetConfig+0x7c>
 8008f04:	e062      	b.n	8008fcc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f06:	4b38      	ldr	r3, [pc, #224]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01a      	beq.n	8008f44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f0e:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f20:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff f9e7 	bl	80082fa <USBD_SetClassConfig>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d104      	bne.n	8008f3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f932 	bl	800919e <USBD_CtlError>
            return;
 8008f3a:	e052      	b.n	8008fe2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9f6 	bl	800932e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f42:	e04e      	b.n	8008fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f9f2 	bl	800932e <USBD_CtlSendStatus>
        break;
 8008f4a:	e04a      	b.n	8008fe2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f4c:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d112      	bne.n	8008f7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008f5c:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f66:	4b20      	ldr	r3, [pc, #128]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff f9e3 	bl	8008338 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9db 	bl	800932e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f78:	e033      	b.n	8008fe2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d01d      	beq.n	8008fc4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff f9d1 	bl	8008338 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f96:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff f9a7 	bl	80082fa <USBD_SetClassConfig>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d104      	bne.n	8008fbc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f8f2 	bl	800919e <USBD_CtlError>
            return;
 8008fba:	e012      	b.n	8008fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9b6 	bl	800932e <USBD_CtlSendStatus>
        break;
 8008fc2:	e00e      	b.n	8008fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f9b2 	bl	800932e <USBD_CtlSendStatus>
        break;
 8008fca:	e00a      	b.n	8008fe2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f8e5 	bl	800919e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <USBD_SetConfig+0x118>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff f9ac 	bl	8008338 <USBD_ClrClassConfig>
        break;
 8008fe0:	bf00      	nop
    }
  }
}
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20000308 	.word	0x20000308

08008fec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	88db      	ldrh	r3, [r3, #6]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d004      	beq.n	8009008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f8cc 	bl	800919e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009006:	e022      	b.n	800904e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900e:	2b02      	cmp	r3, #2
 8009010:	dc02      	bgt.n	8009018 <USBD_GetConfig+0x2c>
 8009012:	2b00      	cmp	r3, #0
 8009014:	dc03      	bgt.n	800901e <USBD_GetConfig+0x32>
 8009016:	e015      	b.n	8009044 <USBD_GetConfig+0x58>
 8009018:	2b03      	cmp	r3, #3
 800901a:	d00b      	beq.n	8009034 <USBD_GetConfig+0x48>
 800901c:	e012      	b.n	8009044 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3308      	adds	r3, #8
 8009028:	2201      	movs	r2, #1
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f920 	bl	8009272 <USBD_CtlSendData>
        break;
 8009032:	e00c      	b.n	800904e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	2201      	movs	r2, #1
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f918 	bl	8009272 <USBD_CtlSendData>
        break;
 8009042:	e004      	b.n	800904e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8a9 	bl	800919e <USBD_CtlError>
        break;
 800904c:	bf00      	nop
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009066:	3b01      	subs	r3, #1
 8009068:	2b02      	cmp	r3, #2
 800906a:	d81e      	bhi.n	80090aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	88db      	ldrh	r3, [r3, #6]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d004      	beq.n	800907e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f891 	bl	800919e <USBD_CtlError>
        break;
 800907c:	e01a      	b.n	80090b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f043 0202 	orr.w	r2, r3, #2
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	330c      	adds	r3, #12
 800909e:	2202      	movs	r2, #2
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f8e5 	bl	8009272 <USBD_CtlSendData>
      break;
 80090a8:	e004      	b.n	80090b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f876 	bl	800919e <USBD_CtlError>
      break;
 80090b2:	bf00      	nop
  }
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	885b      	ldrh	r3, [r3, #2]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d106      	bne.n	80090dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f929 	bl	800932e <USBD_CtlSendStatus>
  }
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	3b01      	subs	r3, #1
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d80b      	bhi.n	8009112 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	885b      	ldrh	r3, [r3, #2]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d10c      	bne.n	800911c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f90f 	bl	800932e <USBD_CtlSendStatus>
      }
      break;
 8009110:	e004      	b.n	800911c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f842 	bl	800919e <USBD_CtlError>
      break;
 800911a:	e000      	b.n	800911e <USBD_ClrFeature+0x3a>
      break;
 800911c:	bf00      	nop
  }
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	785a      	ldrb	r2, [r3, #1]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	3302      	adds	r3, #2
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	b29a      	uxth	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	3303      	adds	r3, #3
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	b29b      	uxth	r3, r3
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	b29b      	uxth	r3, r3
 8009154:	4413      	add	r3, r2
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	3304      	adds	r3, #4
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	b29a      	uxth	r2, r3
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	3305      	adds	r3, #5
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	b29b      	uxth	r3, r3
 8009170:	4413      	add	r3, r2
 8009172:	b29a      	uxth	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	3306      	adds	r3, #6
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	b29a      	uxth	r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	3307      	adds	r3, #7
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	b29b      	uxth	r3, r3
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	b29b      	uxth	r3, r3
 800918c:	4413      	add	r3, r2
 800918e:	b29a      	uxth	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	80da      	strh	r2, [r3, #6]

}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr

0800919e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80091a8:	2180      	movs	r1, #128	; 0x80
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fc60 	bl	8009a70 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80091b0:	2100      	movs	r1, #0
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc5c 	bl	8009a70 <USBD_LL_StallEP>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d032      	beq.n	800923c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 f834 	bl	8009244 <USBD_GetLen>
 80091dc:	4603      	mov	r3, r0
 80091de:	3301      	adds	r3, #1
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	75fa      	strb	r2, [r7, #23]
 80091f0:	461a      	mov	r2, r3
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	75fa      	strb	r2, [r7, #23]
 8009202:	461a      	mov	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4413      	add	r3, r2
 8009208:	2203      	movs	r2, #3
 800920a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800920c:	e012      	b.n	8009234 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	60fa      	str	r2, [r7, #12]
 8009214:	7dfa      	ldrb	r2, [r7, #23]
 8009216:	1c51      	adds	r1, r2, #1
 8009218:	75f9      	strb	r1, [r7, #23]
 800921a:	4611      	mov	r1, r2
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	440a      	add	r2, r1
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	75fa      	strb	r2, [r7, #23]
 800922a:	461a      	mov	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4413      	add	r3, r2
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e8      	bne.n	800920e <USBD_GetString+0x4e>
    }
  }
}
 800923c:	bf00      	nop
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009250:	e005      	b.n	800925e <USBD_GetLen+0x1a>
  {
    len++;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	3301      	adds	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3301      	adds	r3, #1
 800925c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1f5      	bne.n	8009252 <USBD_GetLen+0xe>
  }

  return len;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	bc80      	pop	{r7}
 8009270:	4770      	bx	lr

08009272 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	4613      	mov	r3, r2
 800927e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2202      	movs	r2, #2
 8009284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009288:	88fa      	ldrh	r2, [r7, #6]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009294:	88fb      	ldrh	r3, [r7, #6]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	2100      	movs	r1, #0
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f000 fc71 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	4613      	mov	r3, r2
 80092b6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fc5f 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	4613      	mov	r3, r2
 80092da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2203      	movs	r2, #3
 80092e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092e4:	88fa      	ldrh	r2, [r7, #6]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80092ec:	88fa      	ldrh	r2, [r7, #6]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	2100      	movs	r1, #0
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fc64 	bl	8009bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	4613      	mov	r3, r2
 8009316:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	2100      	movs	r1, #0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 fc52 	bl	8009bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2204      	movs	r2, #4
 800933a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800933e:	2300      	movs	r3, #0
 8009340:	2200      	movs	r2, #0
 8009342:	2100      	movs	r1, #0
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fc1c 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2205      	movs	r2, #5
 8009360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fc2c 	bl	8009bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009380:	2200      	movs	r2, #0
 8009382:	4912      	ldr	r1, [pc, #72]	; (80093cc <MX_USB_DEVICE_Init+0x50>)
 8009384:	4812      	ldr	r0, [pc, #72]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 8009386:	f7fe ff5e 	bl	8008246 <USBD_Init>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009390:	f7f7 fc8a 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009394:	490f      	ldr	r1, [pc, #60]	; (80093d4 <MX_USB_DEVICE_Init+0x58>)
 8009396:	480e      	ldr	r0, [pc, #56]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 8009398:	f7fe ff80 	bl	800829c <USBD_RegisterClass>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093a2:	f7f7 fc81 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093a6:	490c      	ldr	r1, [pc, #48]	; (80093d8 <MX_USB_DEVICE_Init+0x5c>)
 80093a8:	4809      	ldr	r0, [pc, #36]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 80093aa:	f7fe feb1 	bl	8008110 <USBD_CDC_RegisterInterface>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093b4:	f7f7 fc78 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 80093ba:	f7fe ff88 	bl	80082ce <USBD_Start>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093c4:	f7f7 fc70 	bl	8000ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093c8:	bf00      	nop
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	2000012c 	.word	0x2000012c
 80093d0:	2000030c 	.word	0x2000030c
 80093d4:	20000018 	.word	0x20000018
 80093d8:	2000011c 	.word	0x2000011c

080093dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093e0:	2200      	movs	r2, #0
 80093e2:	4905      	ldr	r1, [pc, #20]	; (80093f8 <CDC_Init_FS+0x1c>)
 80093e4:	4805      	ldr	r0, [pc, #20]	; (80093fc <CDC_Init_FS+0x20>)
 80093e6:	f7fe fea9 	bl	800813c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093ea:	4905      	ldr	r1, [pc, #20]	; (8009400 <CDC_Init_FS+0x24>)
 80093ec:	4803      	ldr	r0, [pc, #12]	; (80093fc <CDC_Init_FS+0x20>)
 80093ee:	f7fe febe 	bl	800816e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000650 	.word	0x20000650
 80093fc:	2000030c 	.word	0x2000030c
 8009400:	200005d0 	.word	0x200005d0

08009404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
	...

08009414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
 8009420:	4613      	mov	r3, r2
 8009422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	2b23      	cmp	r3, #35	; 0x23
 8009428:	d84a      	bhi.n	80094c0 <CDC_Control_FS+0xac>
 800942a:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <CDC_Control_FS+0x1c>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	080094c1 	.word	0x080094c1
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094c1 	.word	0x080094c1
 800943c:	080094c1 	.word	0x080094c1
 8009440:	080094c1 	.word	0x080094c1
 8009444:	080094c1 	.word	0x080094c1
 8009448:	080094c1 	.word	0x080094c1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	080094c1 	.word	0x080094c1
 8009454:	080094c1 	.word	0x080094c1
 8009458:	080094c1 	.word	0x080094c1
 800945c:	080094c1 	.word	0x080094c1
 8009460:	080094c1 	.word	0x080094c1
 8009464:	080094c1 	.word	0x080094c1
 8009468:	080094c1 	.word	0x080094c1
 800946c:	080094c1 	.word	0x080094c1
 8009470:	080094c1 	.word	0x080094c1
 8009474:	080094c1 	.word	0x080094c1
 8009478:	080094c1 	.word	0x080094c1
 800947c:	080094c1 	.word	0x080094c1
 8009480:	080094c1 	.word	0x080094c1
 8009484:	080094c1 	.word	0x080094c1
 8009488:	080094c1 	.word	0x080094c1
 800948c:	080094c1 	.word	0x080094c1
 8009490:	080094c1 	.word	0x080094c1
 8009494:	080094c1 	.word	0x080094c1
 8009498:	080094c1 	.word	0x080094c1
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094c1 	.word	0x080094c1
 80094a4:	080094c1 	.word	0x080094c1
 80094a8:	080094c1 	.word	0x080094c1
 80094ac:	080094c1 	.word	0x080094c1
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094c1 	.word	0x080094c1
 80094b8:	080094c1 	.word	0x080094c1
 80094bc:	080094c1 	.word	0x080094c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094c0:	bf00      	nop
  }

  return (USBD_OK);
 80094c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop

080094d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf, *Len);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f80e 	bl	8009504 <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4805      	ldr	r0, [pc, #20]	; (8009500 <CDC_Receive_FS+0x30>)
 80094ec:	f7fe fe3f 	bl	800816e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094f0:	4803      	ldr	r0, [pc, #12]	; (8009500 <CDC_Receive_FS+0x30>)
 80094f2:	f7fe fe7e 	bl	80081f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	2000030c 	.word	0x2000030c

08009504 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009514:	4b10      	ldr	r3, [pc, #64]	; (8009558 <CDC_Transmit_FS+0x54>)
 8009516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009526:	2301      	movs	r3, #1
 8009528:	e012      	b.n	8009550 <CDC_Transmit_FS+0x4c>
  }
  else if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800952a:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <CDC_Transmit_FS+0x54>)
 800952c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009530:	2b03      	cmp	r3, #3
 8009532:	d001      	beq.n	8009538 <CDC_Transmit_FS+0x34>
  {
    return USBD_FAIL;
 8009534:	2302      	movs	r3, #2
 8009536:	e00b      	b.n	8009550 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009538:	887b      	ldrh	r3, [r7, #2]
 800953a:	461a      	mov	r2, r3
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4806      	ldr	r0, [pc, #24]	; (8009558 <CDC_Transmit_FS+0x54>)
 8009540:	f7fe fdfc 	bl	800813c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009544:	4804      	ldr	r0, [pc, #16]	; (8009558 <CDC_Transmit_FS+0x54>)
 8009546:	f7fe fe25 	bl	8008194 <USBD_CDC_TransmitPacket>
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	2000030c 	.word	0x2000030c

0800955c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2212      	movs	r2, #18
 800956c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800956e:	4b03      	ldr	r3, [pc, #12]	; (800957c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	20000148 	.word	0x20000148

08009580 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	6039      	str	r1, [r7, #0]
 800958a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2204      	movs	r2, #4
 8009590:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009592:	4b03      	ldr	r3, [pc, #12]	; (80095a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	bc80      	pop	{r7}
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	2000015c 	.word	0x2000015c

080095a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d105      	bne.n	80095c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4907      	ldr	r1, [pc, #28]	; (80095d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80095ba:	4808      	ldr	r0, [pc, #32]	; (80095dc <USBD_FS_ProductStrDescriptor+0x38>)
 80095bc:	f7ff fe00 	bl	80091c0 <USBD_GetString>
 80095c0:	e004      	b.n	80095cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4904      	ldr	r1, [pc, #16]	; (80095d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80095c6:	4805      	ldr	r0, [pc, #20]	; (80095dc <USBD_FS_ProductStrDescriptor+0x38>)
 80095c8:	f7ff fdfa 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095cc:	4b02      	ldr	r3, [pc, #8]	; (80095d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200006d0 	.word	0x200006d0
 80095dc:	0800b1bc 	.word	0x0800b1bc

080095e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	6039      	str	r1, [r7, #0]
 80095ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	4904      	ldr	r1, [pc, #16]	; (8009600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095f0:	4804      	ldr	r0, [pc, #16]	; (8009604 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095f2:	f7ff fde5 	bl	80091c0 <USBD_GetString>
  return USBD_StrDesc;
 80095f6:	4b02      	ldr	r3, [pc, #8]	; (8009600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	200006d0 	.word	0x200006d0
 8009604:	0800b1c8 	.word	0x0800b1c8

08009608 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	6039      	str	r1, [r7, #0]
 8009612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	221a      	movs	r2, #26
 8009618:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800961a:	f000 f843 	bl	80096a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800961e:	4b02      	ldr	r3, [pc, #8]	; (8009628 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20000160 	.word	0x20000160

0800962c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d105      	bne.n	800964a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	4907      	ldr	r1, [pc, #28]	; (8009660 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009642:	4808      	ldr	r0, [pc, #32]	; (8009664 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009644:	f7ff fdbc 	bl	80091c0 <USBD_GetString>
 8009648:	e004      	b.n	8009654 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4904      	ldr	r1, [pc, #16]	; (8009660 <USBD_FS_ConfigStrDescriptor+0x34>)
 800964e:	4805      	ldr	r0, [pc, #20]	; (8009664 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009650:	f7ff fdb6 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	200006d0 	.word	0x200006d0
 8009664:	0800b1d0 	.word	0x0800b1d0

08009668 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	6039      	str	r1, [r7, #0]
 8009672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d105      	bne.n	8009686 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	4907      	ldr	r1, [pc, #28]	; (800969c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800967e:	4808      	ldr	r0, [pc, #32]	; (80096a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009680:	f7ff fd9e 	bl	80091c0 <USBD_GetString>
 8009684:	e004      	b.n	8009690 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4904      	ldr	r1, [pc, #16]	; (800969c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800968a:	4805      	ldr	r0, [pc, #20]	; (80096a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800968c:	f7ff fd98 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009690:	4b02      	ldr	r3, [pc, #8]	; (800969c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200006d0 	.word	0x200006d0
 80096a0:	0800b1dc 	.word	0x0800b1dc

080096a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096aa:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <Get_SerialNum+0x44>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096b0:	4b0e      	ldr	r3, [pc, #56]	; (80096ec <Get_SerialNum+0x48>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096b6:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <Get_SerialNum+0x4c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4413      	add	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096ca:	2208      	movs	r2, #8
 80096cc:	4909      	ldr	r1, [pc, #36]	; (80096f4 <Get_SerialNum+0x50>)
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 f814 	bl	80096fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096d4:	2204      	movs	r2, #4
 80096d6:	4908      	ldr	r1, [pc, #32]	; (80096f8 <Get_SerialNum+0x54>)
 80096d8:	68b8      	ldr	r0, [r7, #8]
 80096da:	f000 f80f 	bl	80096fc <IntToUnicode>
  }
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	1ffff7e8 	.word	0x1ffff7e8
 80096ec:	1ffff7ec 	.word	0x1ffff7ec
 80096f0:	1ffff7f0 	.word	0x1ffff7f0
 80096f4:	20000162 	.word	0x20000162
 80096f8:	20000172 	.word	0x20000172

080096fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800970e:	2300      	movs	r3, #0
 8009710:	75fb      	strb	r3, [r7, #23]
 8009712:	e027      	b.n	8009764 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	0f1b      	lsrs	r3, r3, #28
 8009718:	2b09      	cmp	r3, #9
 800971a:	d80b      	bhi.n	8009734 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	0f1b      	lsrs	r3, r3, #28
 8009720:	b2da      	uxtb	r2, r3
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	4619      	mov	r1, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	440b      	add	r3, r1
 800972c:	3230      	adds	r2, #48	; 0x30
 800972e:	b2d2      	uxtb	r2, r2
 8009730:	701a      	strb	r2, [r3, #0]
 8009732:	e00a      	b.n	800974a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	0f1b      	lsrs	r3, r3, #28
 8009738:	b2da      	uxtb	r2, r3
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	4619      	mov	r1, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	440b      	add	r3, r1
 8009744:	3237      	adds	r2, #55	; 0x37
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	011b      	lsls	r3, r3, #4
 800974e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	3301      	adds	r3, #1
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	4413      	add	r3, r2
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	3301      	adds	r3, #1
 8009762:	75fb      	strb	r3, [r7, #23]
 8009764:	7dfa      	ldrb	r2, [r7, #23]
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	429a      	cmp	r2, r3
 800976a:	d3d3      	bcc.n	8009714 <IntToUnicode+0x18>
  }
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	bc80      	pop	{r7}
 8009776:	4770      	bx	lr

08009778 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a0d      	ldr	r2, [pc, #52]	; (80097bc <HAL_PCD_MspInit+0x44>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d113      	bne.n	80097b2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <HAL_PCD_MspInit+0x48>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	4a0c      	ldr	r2, [pc, #48]	; (80097c0 <HAL_PCD_MspInit+0x48>)
 8009790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009794:	61d3      	str	r3, [r2, #28]
 8009796:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <HAL_PCD_MspInit+0x48>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80097a2:	2200      	movs	r2, #0
 80097a4:	2100      	movs	r1, #0
 80097a6:	2014      	movs	r0, #20
 80097a8:	f7f7 feb3 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097ac:	2014      	movs	r0, #20
 80097ae:	f7f7 fecc 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	40005c00 	.word	0x40005c00
 80097c0:	40021000 	.word	0x40021000

080097c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f7fe fdbf 	bl	800835e <USBD_LL_SetupStage>
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	440b      	add	r3, r1
 8009808:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	4619      	mov	r1, r3
 8009812:	f7fe fdf1 	bl	80083f8 <USBD_LL_DataOutStage>
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009830:	78fa      	ldrb	r2, [r7, #3]
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	00db      	lsls	r3, r3, #3
 800983c:	440b      	add	r3, r1
 800983e:	333c      	adds	r3, #60	; 0x3c
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	4619      	mov	r1, r3
 8009846:	f7fe fe48 	bl	80084da <USBD_LL_DataInStage>
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe ff58 	bl	8008716 <USBD_LL_SOF>
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009876:	2301      	movs	r3, #1
 8009878:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d001      	beq.n	8009886 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009882:	f7f7 fa11 	bl	8000ca8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800988c:	7bfa      	ldrb	r2, [r7, #15]
 800988e:	4611      	mov	r1, r2
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe ff08 	bl	80086a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe fec1 	bl	8008624 <USBD_LL_Reset>
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe ff02 	bl	80086c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d005      	beq.n	80098d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <HAL_PCD_SuspendCallback+0x30>)
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	4a03      	ldr	r2, [pc, #12]	; (80098dc <HAL_PCD_SuspendCallback+0x30>)
 80098ce:	f043 0306 	orr.w	r3, r3, #6
 80098d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	e000ed00 	.word	0xe000ed00

080098e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fefc 	bl	80086ec <USBD_LL_Resume>
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009904:	4a28      	ldr	r2, [pc, #160]	; (80099a8 <USBD_LL_Init+0xac>)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a26      	ldr	r2, [pc, #152]	; (80099a8 <USBD_LL_Init+0xac>)
 8009910:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009914:	4b24      	ldr	r3, [pc, #144]	; (80099a8 <USBD_LL_Init+0xac>)
 8009916:	4a25      	ldr	r2, [pc, #148]	; (80099ac <USBD_LL_Init+0xb0>)
 8009918:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800991a:	4b23      	ldr	r3, [pc, #140]	; (80099a8 <USBD_LL_Init+0xac>)
 800991c:	2208      	movs	r2, #8
 800991e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009920:	4b21      	ldr	r3, [pc, #132]	; (80099a8 <USBD_LL_Init+0xac>)
 8009922:	2202      	movs	r2, #2
 8009924:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009926:	4b20      	ldr	r3, [pc, #128]	; (80099a8 <USBD_LL_Init+0xac>)
 8009928:	2200      	movs	r2, #0
 800992a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800992c:	4b1e      	ldr	r3, [pc, #120]	; (80099a8 <USBD_LL_Init+0xac>)
 800992e:	2200      	movs	r2, #0
 8009930:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009932:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <USBD_LL_Init+0xac>)
 8009934:	2200      	movs	r2, #0
 8009936:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009938:	481b      	ldr	r0, [pc, #108]	; (80099a8 <USBD_LL_Init+0xac>)
 800993a:	f7f7 ffd4 	bl	80018e6 <HAL_PCD_Init>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009944:	f7f7 f9b0 	bl	8000ca8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800994e:	2318      	movs	r3, #24
 8009950:	2200      	movs	r2, #0
 8009952:	2100      	movs	r1, #0
 8009954:	f7f9 fc48 	bl	80031e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800995e:	2358      	movs	r3, #88	; 0x58
 8009960:	2200      	movs	r2, #0
 8009962:	2180      	movs	r1, #128	; 0x80
 8009964:	f7f9 fc40 	bl	80031e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800996e:	23c0      	movs	r3, #192	; 0xc0
 8009970:	2200      	movs	r2, #0
 8009972:	2181      	movs	r1, #129	; 0x81
 8009974:	f7f9 fc38 	bl	80031e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800997e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009982:	2200      	movs	r2, #0
 8009984:	2101      	movs	r1, #1
 8009986:	f7f9 fc2f 	bl	80031e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009994:	2200      	movs	r2, #0
 8009996:	2182      	movs	r1, #130	; 0x82
 8009998:	f7f9 fc26 	bl	80031e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200008d0 	.word	0x200008d0
 80099ac:	40005c00 	.word	0x40005c00

080099b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7f8 f898 	bl	8001afc <HAL_PCD_Start>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f94e 	bl	8009c74 <USBD_Get_USB_Status>
 80099d8:	4603      	mov	r3, r0
 80099da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	461a      	mov	r2, r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	70fb      	strb	r3, [r7, #3]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70bb      	strb	r3, [r7, #2]
 80099fc:	4613      	mov	r3, r2
 80099fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a0e:	78bb      	ldrb	r3, [r7, #2]
 8009a10:	883a      	ldrh	r2, [r7, #0]
 8009a12:	78f9      	ldrb	r1, [r7, #3]
 8009a14:	f7f8 fa10 	bl	8001e38 <HAL_PCD_EP_Open>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f928 	bl	8009c74 <USBD_Get_USB_Status>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	4611      	mov	r1, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f8 fa57 	bl	8001f04 <HAL_PCD_EP_Close>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 f909 	bl	8009c74 <USBD_Get_USB_Status>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f8 fb17 	bl	80020c2 <HAL_PCD_EP_SetStall>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f8ea 	bl	8009c74 <USBD_Get_USB_Status>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7f8 fb58 	bl	8002182 <HAL_PCD_EP_ClrStall>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f8cb 	bl	8009c74 <USBD_Get_USB_Status>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009afe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da0c      	bge.n	8009b22 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	440b      	add	r3, r1
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	e00b      	b.n	8009b3a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b28:	68f9      	ldr	r1, [r7, #12]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	440b      	add	r3, r1
 8009b34:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b38:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr

08009b44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f8 f943 	bl	8001dee <HAL_PCD_SetAddress>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f880 	bl	8009c74 <USBD_Get_USB_Status>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	460b      	mov	r3, r1
 8009b90:	72fb      	strb	r3, [r7, #11]
 8009b92:	4613      	mov	r3, r2
 8009b94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ba4:	893b      	ldrh	r3, [r7, #8]
 8009ba6:	7af9      	ldrb	r1, [r7, #11]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	f7f8 fa47 	bl	800203c <HAL_PCD_EP_Transmit>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f85d 	bl	8009c74 <USBD_Get_USB_Status>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	72fb      	strb	r3, [r7, #11]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	7af9      	ldrb	r1, [r7, #11]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	f7f8 f9d0 	bl	8001f94 <HAL_PCD_EP_Receive>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f83a 	bl	8009c74 <USBD_Get_USB_Status>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c04:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f8 f9f2 	bl	800200e <HAL_PCD_EP_GetRxCount>
 8009c2a:	4603      	mov	r3, r0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c3c:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <USBD_static_malloc+0x14>)
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bc80      	pop	{r7}
 8009c46:	4770      	bx	lr
 8009c48:	20000bbc 	.word	0x20000bbc

08009c4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]

}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr

08009c5e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bc80      	pop	{r7}
 8009c72:	4770      	bx	lr

08009c74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d817      	bhi.n	8009cb8 <USBD_Get_USB_Status+0x44>
 8009c88:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <USBD_Get_USB_Status+0x1c>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ca7 	.word	0x08009ca7
 8009c98:	08009cad 	.word	0x08009cad
 8009c9c:	08009cb3 	.word	0x08009cb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	e00b      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8009caa:	e008      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb0:	e005      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb6:	e002      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cb8:	2302      	movs	r3, #2
 8009cba:	73fb      	strb	r3, [r7, #15]
    break;
 8009cbc:	bf00      	nop
  }
  return usb_status;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop

08009ccc <arm_sqrt_q31>:
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	dd71      	ble.n	8009db4 <arm_sqrt_q31+0xe8>
 8009cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	fab0 f780 	clz	r7, r0
 8009cd8:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8009cdc:	f018 0a01 	ands.w	sl, r8, #1
 8009ce0:	bf16      	itet	ne
 8009ce2:	1ebe      	subne	r6, r7, #2
 8009ce4:	fa00 f608 	lsleq.w	r6, r0, r8
 8009ce8:	fa00 f606 	lslne.w	r6, r0, r6
 8009cec:	4630      	mov	r0, r6
 8009cee:	4689      	mov	r9, r1
 8009cf0:	f7f6 fba2 	bl	8000438 <__aeabi_i2f>
 8009cf4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8009cf8:	f7f6 fa30 	bl	800015c <__aeabi_fmul>
 8009cfc:	1043      	asrs	r3, r0, #1
 8009cfe:	4830      	ldr	r0, [pc, #192]	; (8009dc0 <arm_sqrt_q31+0xf4>)
 8009d00:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8009d04:	1ac0      	subs	r0, r0, r3
 8009d06:	f7f6 fa29 	bl	800015c <__aeabi_fmul>
 8009d0a:	f7f6 fbe9 	bl	80004e0 <__aeabi_f2iz>
 8009d0e:	fb80 2300 	smull	r2, r3, r0, r0
 8009d12:	0fd4      	lsrs	r4, r2, #31
 8009d14:	1071      	asrs	r1, r6, #1
 8009d16:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8009d1a:	fb84 4501 	smull	r4, r5, r4, r1
 8009d1e:	0fe3      	lsrs	r3, r4, #31
 8009d20:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8009d24:	f1c3 5340 	rsb	r3, r3, #805306368	; 0x30000000
 8009d28:	fb80 2303 	smull	r2, r3, r0, r3
 8009d2c:	0fd4      	lsrs	r4, r2, #31
 8009d2e:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8009d32:	00a0      	lsls	r0, r4, #2
 8009d34:	fb80 2300 	smull	r2, r3, r0, r0
 8009d38:	0fd2      	lsrs	r2, r2, #31
 8009d3a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8009d3e:	fb81 2302 	smull	r2, r3, r1, r2
 8009d42:	0fd4      	lsrs	r4, r2, #31
 8009d44:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8009d48:	f1c4 5440 	rsb	r4, r4, #805306368	; 0x30000000
 8009d4c:	fb80 4504 	smull	r4, r5, r0, r4
 8009d50:	0fe2      	lsrs	r2, r4, #31
 8009d52:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8009d56:	0093      	lsls	r3, r2, #2
 8009d58:	fb83 4503 	smull	r4, r5, r3, r3
 8009d5c:	0fe0      	lsrs	r0, r4, #31
 8009d5e:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8009d62:	fb81 0100 	smull	r0, r1, r1, r0
 8009d66:	0fc2      	lsrs	r2, r0, #31
 8009d68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8009d6c:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8009d70:	fb83 2302 	smull	r2, r3, r3, r2
 8009d74:	0fd0      	lsrs	r0, r2, #31
 8009d76:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009d7a:	0080      	lsls	r0, r0, #2
 8009d7c:	fb86 0100 	smull	r0, r1, r6, r0
 8009d80:	0fc3      	lsrs	r3, r0, #31
 8009d82:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	f1ba 0f00 	cmp.w	sl, #0
 8009d8c:	d009      	beq.n	8009da2 <arm_sqrt_q31+0xd6>
 8009d8e:	3f02      	subs	r7, #2
 8009d90:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8009d94:	107f      	asrs	r7, r7, #1
 8009d96:	413b      	asrs	r3, r7
 8009d98:	f8c9 3000 	str.w	r3, [r9]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009da6:	fa43 f308 	asr.w	r3, r3, r8
 8009daa:	f8c9 3000 	str.w	r3, [r9]
 8009dae:	2000      	movs	r0, #0
 8009db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db4:	2300      	movs	r3, #0
 8009db6:	600b      	str	r3, [r1, #0]
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	5f3759df 	.word	0x5f3759df

08009dc4 <arm_cos_q31>:
 8009dc4:	f110 5300 	adds.w	r3, r0, #536870912	; 0x20000000
 8009dc8:	bf48      	it	mi
 8009dca:	f100 4320 	addmi.w	r3, r0, #2684354560	; 0xa0000000
 8009dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd0:	0d9a      	lsrs	r2, r3, #22
 8009dd2:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8009e00 <arm_cos_q31+0x3c>
 8009dd6:	eba3 5382 	sub.w	r3, r3, r2, lsl #22
 8009dda:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 8009dde:	025b      	lsls	r3, r3, #9
 8009de0:	f1c3 4600 	rsb	r6, r3, #2147483648	; 0x80000000
 8009de4:	17e7      	asrs	r7, r4, #31
 8009de6:	fba6 4504 	umull	r4, r5, r6, r4
 8009dea:	fb06 5107 	mla	r1, r6, r7, r5
 8009dee:	3201      	adds	r2, #1
 8009df0:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8009df4:	2000      	movs	r0, #0
 8009df6:	fbc2 0103 	smlal	r0, r1, r2, r3
 8009dfa:	0048      	lsls	r0, r1, #1
 8009dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	0800b248 	.word	0x0800b248

08009e04 <__errno>:
 8009e04:	4b01      	ldr	r3, [pc, #4]	; (8009e0c <__errno+0x8>)
 8009e06:	6818      	ldr	r0, [r3, #0]
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	2000017c 	.word	0x2000017c

08009e10 <__libc_init_array>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	2600      	movs	r6, #0
 8009e14:	4d0c      	ldr	r5, [pc, #48]	; (8009e48 <__libc_init_array+0x38>)
 8009e16:	4c0d      	ldr	r4, [pc, #52]	; (8009e4c <__libc_init_array+0x3c>)
 8009e18:	1b64      	subs	r4, r4, r5
 8009e1a:	10a4      	asrs	r4, r4, #2
 8009e1c:	42a6      	cmp	r6, r4
 8009e1e:	d109      	bne.n	8009e34 <__libc_init_array+0x24>
 8009e20:	f001 f9a2 	bl	800b168 <_init>
 8009e24:	2600      	movs	r6, #0
 8009e26:	4d0a      	ldr	r5, [pc, #40]	; (8009e50 <__libc_init_array+0x40>)
 8009e28:	4c0a      	ldr	r4, [pc, #40]	; (8009e54 <__libc_init_array+0x44>)
 8009e2a:	1b64      	subs	r4, r4, r5
 8009e2c:	10a4      	asrs	r4, r4, #2
 8009e2e:	42a6      	cmp	r6, r4
 8009e30:	d105      	bne.n	8009e3e <__libc_init_array+0x2e>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e38:	4798      	blx	r3
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	e7ee      	b.n	8009e1c <__libc_init_array+0xc>
 8009e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e42:	4798      	blx	r3
 8009e44:	3601      	adds	r6, #1
 8009e46:	e7f2      	b.n	8009e2e <__libc_init_array+0x1e>
 8009e48:	0800bae4 	.word	0x0800bae4
 8009e4c:	0800bae4 	.word	0x0800bae4
 8009e50:	0800bae4 	.word	0x0800bae4
 8009e54:	0800bae8 	.word	0x0800bae8

08009e58 <malloc>:
 8009e58:	4b02      	ldr	r3, [pc, #8]	; (8009e64 <malloc+0xc>)
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	f000 b87b 	b.w	8009f58 <_malloc_r>
 8009e62:	bf00      	nop
 8009e64:	2000017c 	.word	0x2000017c

08009e68 <free>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <free+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 b80b 	b.w	8009e88 <_free_r>
 8009e72:	bf00      	nop
 8009e74:	2000017c 	.word	0x2000017c

08009e78 <memset>:
 8009e78:	4603      	mov	r3, r0
 8009e7a:	4402      	add	r2, r0
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d100      	bne.n	8009e82 <memset+0xa>
 8009e80:	4770      	bx	lr
 8009e82:	f803 1b01 	strb.w	r1, [r3], #1
 8009e86:	e7f9      	b.n	8009e7c <memset+0x4>

08009e88 <_free_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d040      	beq.n	8009f12 <_free_r+0x8a>
 8009e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e94:	1f0c      	subs	r4, r1, #4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	bfb8      	it	lt
 8009e9a:	18e4      	addlt	r4, r4, r3
 8009e9c:	f000 fa10 	bl	800a2c0 <__malloc_lock>
 8009ea0:	4a1c      	ldr	r2, [pc, #112]	; (8009f14 <_free_r+0x8c>)
 8009ea2:	6813      	ldr	r3, [r2, #0]
 8009ea4:	b933      	cbnz	r3, 8009eb4 <_free_r+0x2c>
 8009ea6:	6063      	str	r3, [r4, #4]
 8009ea8:	6014      	str	r4, [r2, #0]
 8009eaa:	4628      	mov	r0, r5
 8009eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb0:	f000 ba0c 	b.w	800a2cc <__malloc_unlock>
 8009eb4:	42a3      	cmp	r3, r4
 8009eb6:	d908      	bls.n	8009eca <_free_r+0x42>
 8009eb8:	6820      	ldr	r0, [r4, #0]
 8009eba:	1821      	adds	r1, r4, r0
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	bf01      	itttt	eq
 8009ec0:	6819      	ldreq	r1, [r3, #0]
 8009ec2:	685b      	ldreq	r3, [r3, #4]
 8009ec4:	1809      	addeq	r1, r1, r0
 8009ec6:	6021      	streq	r1, [r4, #0]
 8009ec8:	e7ed      	b.n	8009ea6 <_free_r+0x1e>
 8009eca:	461a      	mov	r2, r3
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	b10b      	cbz	r3, 8009ed4 <_free_r+0x4c>
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	d9fa      	bls.n	8009eca <_free_r+0x42>
 8009ed4:	6811      	ldr	r1, [r2, #0]
 8009ed6:	1850      	adds	r0, r2, r1
 8009ed8:	42a0      	cmp	r0, r4
 8009eda:	d10b      	bne.n	8009ef4 <_free_r+0x6c>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	4401      	add	r1, r0
 8009ee0:	1850      	adds	r0, r2, r1
 8009ee2:	4283      	cmp	r3, r0
 8009ee4:	6011      	str	r1, [r2, #0]
 8009ee6:	d1e0      	bne.n	8009eaa <_free_r+0x22>
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	4401      	add	r1, r0
 8009eee:	6011      	str	r1, [r2, #0]
 8009ef0:	6053      	str	r3, [r2, #4]
 8009ef2:	e7da      	b.n	8009eaa <_free_r+0x22>
 8009ef4:	d902      	bls.n	8009efc <_free_r+0x74>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	e7d6      	b.n	8009eaa <_free_r+0x22>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	1821      	adds	r1, r4, r0
 8009f00:	428b      	cmp	r3, r1
 8009f02:	bf01      	itttt	eq
 8009f04:	6819      	ldreq	r1, [r3, #0]
 8009f06:	685b      	ldreq	r3, [r3, #4]
 8009f08:	1809      	addeq	r1, r1, r0
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	6054      	str	r4, [r2, #4]
 8009f10:	e7cb      	b.n	8009eaa <_free_r+0x22>
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	20000ddc 	.word	0x20000ddc

08009f18 <sbrk_aligned>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	4e0e      	ldr	r6, [pc, #56]	; (8009f54 <sbrk_aligned+0x3c>)
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	6831      	ldr	r1, [r6, #0]
 8009f20:	4605      	mov	r5, r0
 8009f22:	b911      	cbnz	r1, 8009f2a <sbrk_aligned+0x12>
 8009f24:	f000 f8a4 	bl	800a070 <_sbrk_r>
 8009f28:	6030      	str	r0, [r6, #0]
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f89f 	bl	800a070 <_sbrk_r>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d00a      	beq.n	8009f4c <sbrk_aligned+0x34>
 8009f36:	1cc4      	adds	r4, r0, #3
 8009f38:	f024 0403 	bic.w	r4, r4, #3
 8009f3c:	42a0      	cmp	r0, r4
 8009f3e:	d007      	beq.n	8009f50 <sbrk_aligned+0x38>
 8009f40:	1a21      	subs	r1, r4, r0
 8009f42:	4628      	mov	r0, r5
 8009f44:	f000 f894 	bl	800a070 <_sbrk_r>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d101      	bne.n	8009f50 <sbrk_aligned+0x38>
 8009f4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f50:	4620      	mov	r0, r4
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	20000de0 	.word	0x20000de0

08009f58 <_malloc_r>:
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	1ccd      	adds	r5, r1, #3
 8009f5e:	f025 0503 	bic.w	r5, r5, #3
 8009f62:	3508      	adds	r5, #8
 8009f64:	2d0c      	cmp	r5, #12
 8009f66:	bf38      	it	cc
 8009f68:	250c      	movcc	r5, #12
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	db01      	blt.n	8009f74 <_malloc_r+0x1c>
 8009f70:	42a9      	cmp	r1, r5
 8009f72:	d905      	bls.n	8009f80 <_malloc_r+0x28>
 8009f74:	230c      	movs	r3, #12
 8009f76:	2600      	movs	r6, #0
 8009f78:	603b      	str	r3, [r7, #0]
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f80:	4e2e      	ldr	r6, [pc, #184]	; (800a03c <_malloc_r+0xe4>)
 8009f82:	f000 f99d 	bl	800a2c0 <__malloc_lock>
 8009f86:	6833      	ldr	r3, [r6, #0]
 8009f88:	461c      	mov	r4, r3
 8009f8a:	bb34      	cbnz	r4, 8009fda <_malloc_r+0x82>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ffc2 	bl	8009f18 <sbrk_aligned>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	4604      	mov	r4, r0
 8009f98:	d14d      	bne.n	800a036 <_malloc_r+0xde>
 8009f9a:	6834      	ldr	r4, [r6, #0]
 8009f9c:	4626      	mov	r6, r4
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	d140      	bne.n	800a024 <_malloc_r+0xcc>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	eb04 0803 	add.w	r8, r4, r3
 8009fac:	f000 f860 	bl	800a070 <_sbrk_r>
 8009fb0:	4580      	cmp	r8, r0
 8009fb2:	d13a      	bne.n	800a02a <_malloc_r+0xd2>
 8009fb4:	6821      	ldr	r1, [r4, #0]
 8009fb6:	3503      	adds	r5, #3
 8009fb8:	1a6d      	subs	r5, r5, r1
 8009fba:	f025 0503 	bic.w	r5, r5, #3
 8009fbe:	3508      	adds	r5, #8
 8009fc0:	2d0c      	cmp	r5, #12
 8009fc2:	bf38      	it	cc
 8009fc4:	250c      	movcc	r5, #12
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7ff ffa5 	bl	8009f18 <sbrk_aligned>
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d02b      	beq.n	800a02a <_malloc_r+0xd2>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	442b      	add	r3, r5
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	e00e      	b.n	8009ff8 <_malloc_r+0xa0>
 8009fda:	6822      	ldr	r2, [r4, #0]
 8009fdc:	1b52      	subs	r2, r2, r5
 8009fde:	d41e      	bmi.n	800a01e <_malloc_r+0xc6>
 8009fe0:	2a0b      	cmp	r2, #11
 8009fe2:	d916      	bls.n	800a012 <_malloc_r+0xba>
 8009fe4:	1961      	adds	r1, r4, r5
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	6025      	str	r5, [r4, #0]
 8009fea:	bf18      	it	ne
 8009fec:	6059      	strne	r1, [r3, #4]
 8009fee:	6863      	ldr	r3, [r4, #4]
 8009ff0:	bf08      	it	eq
 8009ff2:	6031      	streq	r1, [r6, #0]
 8009ff4:	5162      	str	r2, [r4, r5]
 8009ff6:	604b      	str	r3, [r1, #4]
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f104 060b 	add.w	r6, r4, #11
 8009ffe:	f000 f965 	bl	800a2cc <__malloc_unlock>
 800a002:	f026 0607 	bic.w	r6, r6, #7
 800a006:	1d23      	adds	r3, r4, #4
 800a008:	1af2      	subs	r2, r6, r3
 800a00a:	d0b6      	beq.n	8009f7a <_malloc_r+0x22>
 800a00c:	1b9b      	subs	r3, r3, r6
 800a00e:	50a3      	str	r3, [r4, r2]
 800a010:	e7b3      	b.n	8009f7a <_malloc_r+0x22>
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	42a3      	cmp	r3, r4
 800a016:	bf0c      	ite	eq
 800a018:	6032      	streq	r2, [r6, #0]
 800a01a:	605a      	strne	r2, [r3, #4]
 800a01c:	e7ec      	b.n	8009ff8 <_malloc_r+0xa0>
 800a01e:	4623      	mov	r3, r4
 800a020:	6864      	ldr	r4, [r4, #4]
 800a022:	e7b2      	b.n	8009f8a <_malloc_r+0x32>
 800a024:	4634      	mov	r4, r6
 800a026:	6876      	ldr	r6, [r6, #4]
 800a028:	e7b9      	b.n	8009f9e <_malloc_r+0x46>
 800a02a:	230c      	movs	r3, #12
 800a02c:	4638      	mov	r0, r7
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	f000 f94c 	bl	800a2cc <__malloc_unlock>
 800a034:	e7a1      	b.n	8009f7a <_malloc_r+0x22>
 800a036:	6025      	str	r5, [r4, #0]
 800a038:	e7de      	b.n	8009ff8 <_malloc_r+0xa0>
 800a03a:	bf00      	nop
 800a03c:	20000ddc 	.word	0x20000ddc

0800a040 <iprintf>:
 800a040:	b40f      	push	{r0, r1, r2, r3}
 800a042:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <iprintf+0x2c>)
 800a044:	b513      	push	{r0, r1, r4, lr}
 800a046:	681c      	ldr	r4, [r3, #0]
 800a048:	b124      	cbz	r4, 800a054 <iprintf+0x14>
 800a04a:	69a3      	ldr	r3, [r4, #24]
 800a04c:	b913      	cbnz	r3, 800a054 <iprintf+0x14>
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 f896 	bl	800a180 <__sinit>
 800a054:	ab05      	add	r3, sp, #20
 800a056:	4620      	mov	r0, r4
 800a058:	9a04      	ldr	r2, [sp, #16]
 800a05a:	68a1      	ldr	r1, [r4, #8]
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	f000 fabf 	bl	800a5e0 <_vfiprintf_r>
 800a062:	b002      	add	sp, #8
 800a064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a068:	b004      	add	sp, #16
 800a06a:	4770      	bx	lr
 800a06c:	2000017c 	.word	0x2000017c

0800a070 <_sbrk_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	2300      	movs	r3, #0
 800a074:	4d05      	ldr	r5, [pc, #20]	; (800a08c <_sbrk_r+0x1c>)
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7f7 f8ae 	bl	80011dc <_sbrk>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_sbrk_r+0x1a>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_sbrk_r+0x1a>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20000de8 	.word	0x20000de8

0800a090 <siprintf>:
 800a090:	b40e      	push	{r1, r2, r3}
 800a092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a096:	b500      	push	{lr}
 800a098:	b09c      	sub	sp, #112	; 0x70
 800a09a:	ab1d      	add	r3, sp, #116	; 0x74
 800a09c:	9002      	str	r0, [sp, #8]
 800a09e:	9006      	str	r0, [sp, #24]
 800a0a0:	9107      	str	r1, [sp, #28]
 800a0a2:	9104      	str	r1, [sp, #16]
 800a0a4:	4808      	ldr	r0, [pc, #32]	; (800a0c8 <siprintf+0x38>)
 800a0a6:	4909      	ldr	r1, [pc, #36]	; (800a0cc <siprintf+0x3c>)
 800a0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ac:	9105      	str	r1, [sp, #20]
 800a0ae:	6800      	ldr	r0, [r0, #0]
 800a0b0:	a902      	add	r1, sp, #8
 800a0b2:	9301      	str	r3, [sp, #4]
 800a0b4:	f000 f96c 	bl	800a390 <_svfiprintf_r>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	b01c      	add	sp, #112	; 0x70
 800a0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c4:	b003      	add	sp, #12
 800a0c6:	4770      	bx	lr
 800a0c8:	2000017c 	.word	0x2000017c
 800a0cc:	ffff0208 	.word	0xffff0208

0800a0d0 <std>:
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a0da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0de:	6083      	str	r3, [r0, #8]
 800a0e0:	8181      	strh	r1, [r0, #12]
 800a0e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a0e4:	81c2      	strh	r2, [r0, #14]
 800a0e6:	6183      	str	r3, [r0, #24]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	305c      	adds	r0, #92	; 0x5c
 800a0ee:	f7ff fec3 	bl	8009e78 <memset>
 800a0f2:	4b05      	ldr	r3, [pc, #20]	; (800a108 <std+0x38>)
 800a0f4:	6224      	str	r4, [r4, #32]
 800a0f6:	6263      	str	r3, [r4, #36]	; 0x24
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <std+0x3c>)
 800a0fa:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <std+0x40>)
 800a0fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <std+0x44>)
 800a102:	6323      	str	r3, [r4, #48]	; 0x30
 800a104:	bd10      	pop	{r4, pc}
 800a106:	bf00      	nop
 800a108:	0800ab6d 	.word	0x0800ab6d
 800a10c:	0800ab8f 	.word	0x0800ab8f
 800a110:	0800abc7 	.word	0x0800abc7
 800a114:	0800abeb 	.word	0x0800abeb

0800a118 <_cleanup_r>:
 800a118:	4901      	ldr	r1, [pc, #4]	; (800a120 <_cleanup_r+0x8>)
 800a11a:	f000 b8af 	b.w	800a27c <_fwalk_reent>
 800a11e:	bf00      	nop
 800a120:	0800aebd 	.word	0x0800aebd

0800a124 <__sfmoreglue>:
 800a124:	2268      	movs	r2, #104	; 0x68
 800a126:	b570      	push	{r4, r5, r6, lr}
 800a128:	1e4d      	subs	r5, r1, #1
 800a12a:	4355      	muls	r5, r2
 800a12c:	460e      	mov	r6, r1
 800a12e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a132:	f7ff ff11 	bl	8009f58 <_malloc_r>
 800a136:	4604      	mov	r4, r0
 800a138:	b140      	cbz	r0, 800a14c <__sfmoreglue+0x28>
 800a13a:	2100      	movs	r1, #0
 800a13c:	e9c0 1600 	strd	r1, r6, [r0]
 800a140:	300c      	adds	r0, #12
 800a142:	60a0      	str	r0, [r4, #8]
 800a144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a148:	f7ff fe96 	bl	8009e78 <memset>
 800a14c:	4620      	mov	r0, r4
 800a14e:	bd70      	pop	{r4, r5, r6, pc}

0800a150 <__sfp_lock_acquire>:
 800a150:	4801      	ldr	r0, [pc, #4]	; (800a158 <__sfp_lock_acquire+0x8>)
 800a152:	f000 b8b3 	b.w	800a2bc <__retarget_lock_acquire_recursive>
 800a156:	bf00      	nop
 800a158:	20000de5 	.word	0x20000de5

0800a15c <__sfp_lock_release>:
 800a15c:	4801      	ldr	r0, [pc, #4]	; (800a164 <__sfp_lock_release+0x8>)
 800a15e:	f000 b8ae 	b.w	800a2be <__retarget_lock_release_recursive>
 800a162:	bf00      	nop
 800a164:	20000de5 	.word	0x20000de5

0800a168 <__sinit_lock_acquire>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__sinit_lock_acquire+0x8>)
 800a16a:	f000 b8a7 	b.w	800a2bc <__retarget_lock_acquire_recursive>
 800a16e:	bf00      	nop
 800a170:	20000de6 	.word	0x20000de6

0800a174 <__sinit_lock_release>:
 800a174:	4801      	ldr	r0, [pc, #4]	; (800a17c <__sinit_lock_release+0x8>)
 800a176:	f000 b8a2 	b.w	800a2be <__retarget_lock_release_recursive>
 800a17a:	bf00      	nop
 800a17c:	20000de6 	.word	0x20000de6

0800a180 <__sinit>:
 800a180:	b510      	push	{r4, lr}
 800a182:	4604      	mov	r4, r0
 800a184:	f7ff fff0 	bl	800a168 <__sinit_lock_acquire>
 800a188:	69a3      	ldr	r3, [r4, #24]
 800a18a:	b11b      	cbz	r3, 800a194 <__sinit+0x14>
 800a18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a190:	f7ff bff0 	b.w	800a174 <__sinit_lock_release>
 800a194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a198:	6523      	str	r3, [r4, #80]	; 0x50
 800a19a:	4b13      	ldr	r3, [pc, #76]	; (800a1e8 <__sinit+0x68>)
 800a19c:	4a13      	ldr	r2, [pc, #76]	; (800a1ec <__sinit+0x6c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	bf08      	it	eq
 800a1a6:	2301      	moveq	r3, #1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	bf08      	it	eq
 800a1ac:	61a3      	streq	r3, [r4, #24]
 800a1ae:	f000 f81f 	bl	800a1f0 <__sfp>
 800a1b2:	6060      	str	r0, [r4, #4]
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 f81b 	bl	800a1f0 <__sfp>
 800a1ba:	60a0      	str	r0, [r4, #8]
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 f817 	bl	800a1f0 <__sfp>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2104      	movs	r1, #4
 800a1c6:	60e0      	str	r0, [r4, #12]
 800a1c8:	6860      	ldr	r0, [r4, #4]
 800a1ca:	f7ff ff81 	bl	800a0d0 <std>
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	2109      	movs	r1, #9
 800a1d2:	68a0      	ldr	r0, [r4, #8]
 800a1d4:	f7ff ff7c 	bl	800a0d0 <std>
 800a1d8:	2202      	movs	r2, #2
 800a1da:	2112      	movs	r1, #18
 800a1dc:	68e0      	ldr	r0, [r4, #12]
 800a1de:	f7ff ff77 	bl	800a0d0 <std>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	61a3      	str	r3, [r4, #24]
 800a1e6:	e7d1      	b.n	800a18c <__sinit+0xc>
 800a1e8:	0800ba4c 	.word	0x0800ba4c
 800a1ec:	0800a119 	.word	0x0800a119

0800a1f0 <__sfp>:
 800a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	f7ff ffac 	bl	800a150 <__sfp_lock_acquire>
 800a1f8:	4b1e      	ldr	r3, [pc, #120]	; (800a274 <__sfp+0x84>)
 800a1fa:	681e      	ldr	r6, [r3, #0]
 800a1fc:	69b3      	ldr	r3, [r6, #24]
 800a1fe:	b913      	cbnz	r3, 800a206 <__sfp+0x16>
 800a200:	4630      	mov	r0, r6
 800a202:	f7ff ffbd 	bl	800a180 <__sinit>
 800a206:	3648      	adds	r6, #72	; 0x48
 800a208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	d503      	bpl.n	800a218 <__sfp+0x28>
 800a210:	6833      	ldr	r3, [r6, #0]
 800a212:	b30b      	cbz	r3, 800a258 <__sfp+0x68>
 800a214:	6836      	ldr	r6, [r6, #0]
 800a216:	e7f7      	b.n	800a208 <__sfp+0x18>
 800a218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a21c:	b9d5      	cbnz	r5, 800a254 <__sfp+0x64>
 800a21e:	4b16      	ldr	r3, [pc, #88]	; (800a278 <__sfp+0x88>)
 800a220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a224:	60e3      	str	r3, [r4, #12]
 800a226:	6665      	str	r5, [r4, #100]	; 0x64
 800a228:	f000 f847 	bl	800a2ba <__retarget_lock_init_recursive>
 800a22c:	f7ff ff96 	bl	800a15c <__sfp_lock_release>
 800a230:	2208      	movs	r2, #8
 800a232:	4629      	mov	r1, r5
 800a234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a23c:	6025      	str	r5, [r4, #0]
 800a23e:	61a5      	str	r5, [r4, #24]
 800a240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a244:	f7ff fe18 	bl	8009e78 <memset>
 800a248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a24c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a250:	4620      	mov	r0, r4
 800a252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a254:	3468      	adds	r4, #104	; 0x68
 800a256:	e7d9      	b.n	800a20c <__sfp+0x1c>
 800a258:	2104      	movs	r1, #4
 800a25a:	4638      	mov	r0, r7
 800a25c:	f7ff ff62 	bl	800a124 <__sfmoreglue>
 800a260:	4604      	mov	r4, r0
 800a262:	6030      	str	r0, [r6, #0]
 800a264:	2800      	cmp	r0, #0
 800a266:	d1d5      	bne.n	800a214 <__sfp+0x24>
 800a268:	f7ff ff78 	bl	800a15c <__sfp_lock_release>
 800a26c:	230c      	movs	r3, #12
 800a26e:	603b      	str	r3, [r7, #0]
 800a270:	e7ee      	b.n	800a250 <__sfp+0x60>
 800a272:	bf00      	nop
 800a274:	0800ba4c 	.word	0x0800ba4c
 800a278:	ffff0001 	.word	0xffff0001

0800a27c <_fwalk_reent>:
 800a27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a280:	4606      	mov	r6, r0
 800a282:	4688      	mov	r8, r1
 800a284:	2700      	movs	r7, #0
 800a286:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a28a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a28e:	f1b9 0901 	subs.w	r9, r9, #1
 800a292:	d505      	bpl.n	800a2a0 <_fwalk_reent+0x24>
 800a294:	6824      	ldr	r4, [r4, #0]
 800a296:	2c00      	cmp	r4, #0
 800a298:	d1f7      	bne.n	800a28a <_fwalk_reent+0xe>
 800a29a:	4638      	mov	r0, r7
 800a29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a0:	89ab      	ldrh	r3, [r5, #12]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d907      	bls.n	800a2b6 <_fwalk_reent+0x3a>
 800a2a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	d003      	beq.n	800a2b6 <_fwalk_reent+0x3a>
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	47c0      	blx	r8
 800a2b4:	4307      	orrs	r7, r0
 800a2b6:	3568      	adds	r5, #104	; 0x68
 800a2b8:	e7e9      	b.n	800a28e <_fwalk_reent+0x12>

0800a2ba <__retarget_lock_init_recursive>:
 800a2ba:	4770      	bx	lr

0800a2bc <__retarget_lock_acquire_recursive>:
 800a2bc:	4770      	bx	lr

0800a2be <__retarget_lock_release_recursive>:
 800a2be:	4770      	bx	lr

0800a2c0 <__malloc_lock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_lock+0x8>)
 800a2c2:	f7ff bffb 	b.w	800a2bc <__retarget_lock_acquire_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	20000de4 	.word	0x20000de4

0800a2cc <__malloc_unlock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__malloc_unlock+0x8>)
 800a2ce:	f7ff bff6 	b.w	800a2be <__retarget_lock_release_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	20000de4 	.word	0x20000de4

0800a2d8 <__ssputs_r>:
 800a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	688e      	ldr	r6, [r1, #8]
 800a2de:	4682      	mov	sl, r0
 800a2e0:	429e      	cmp	r6, r3
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	4690      	mov	r8, r2
 800a2e6:	461f      	mov	r7, r3
 800a2e8:	d838      	bhi.n	800a35c <__ssputs_r+0x84>
 800a2ea:	898a      	ldrh	r2, [r1, #12]
 800a2ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2f0:	d032      	beq.n	800a358 <__ssputs_r+0x80>
 800a2f2:	6825      	ldr	r5, [r4, #0]
 800a2f4:	6909      	ldr	r1, [r1, #16]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	eba5 0901 	sub.w	r9, r5, r1
 800a2fc:	6965      	ldr	r5, [r4, #20]
 800a2fe:	444b      	add	r3, r9
 800a300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a308:	106d      	asrs	r5, r5, #1
 800a30a:	429d      	cmp	r5, r3
 800a30c:	bf38      	it	cc
 800a30e:	461d      	movcc	r5, r3
 800a310:	0553      	lsls	r3, r2, #21
 800a312:	d531      	bpl.n	800a378 <__ssputs_r+0xa0>
 800a314:	4629      	mov	r1, r5
 800a316:	f7ff fe1f 	bl	8009f58 <_malloc_r>
 800a31a:	4606      	mov	r6, r0
 800a31c:	b950      	cbnz	r0, 800a334 <__ssputs_r+0x5c>
 800a31e:	230c      	movs	r3, #12
 800a320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a324:	f8ca 3000 	str.w	r3, [sl]
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	464a      	mov	r2, r9
 800a336:	6921      	ldr	r1, [r4, #16]
 800a338:	f000 fe82 	bl	800b040 <memcpy>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	6126      	str	r6, [r4, #16]
 800a34a:	444e      	add	r6, r9
 800a34c:	6026      	str	r6, [r4, #0]
 800a34e:	463e      	mov	r6, r7
 800a350:	6165      	str	r5, [r4, #20]
 800a352:	eba5 0509 	sub.w	r5, r5, r9
 800a356:	60a5      	str	r5, [r4, #8]
 800a358:	42be      	cmp	r6, r7
 800a35a:	d900      	bls.n	800a35e <__ssputs_r+0x86>
 800a35c:	463e      	mov	r6, r7
 800a35e:	4632      	mov	r2, r6
 800a360:	4641      	mov	r1, r8
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	f000 fe7a 	bl	800b05c <memmove>
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	2000      	movs	r0, #0
 800a36c:	1b9b      	subs	r3, r3, r6
 800a36e:	60a3      	str	r3, [r4, #8]
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	4433      	add	r3, r6
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	e7db      	b.n	800a330 <__ssputs_r+0x58>
 800a378:	462a      	mov	r2, r5
 800a37a:	f000 fe89 	bl	800b090 <_realloc_r>
 800a37e:	4606      	mov	r6, r0
 800a380:	2800      	cmp	r0, #0
 800a382:	d1e1      	bne.n	800a348 <__ssputs_r+0x70>
 800a384:	4650      	mov	r0, sl
 800a386:	6921      	ldr	r1, [r4, #16]
 800a388:	f7ff fd7e 	bl	8009e88 <_free_r>
 800a38c:	e7c7      	b.n	800a31e <__ssputs_r+0x46>
	...

0800a390 <_svfiprintf_r>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	4698      	mov	r8, r3
 800a396:	898b      	ldrh	r3, [r1, #12]
 800a398:	4607      	mov	r7, r0
 800a39a:	061b      	lsls	r3, r3, #24
 800a39c:	460d      	mov	r5, r1
 800a39e:	4614      	mov	r4, r2
 800a3a0:	b09d      	sub	sp, #116	; 0x74
 800a3a2:	d50e      	bpl.n	800a3c2 <_svfiprintf_r+0x32>
 800a3a4:	690b      	ldr	r3, [r1, #16]
 800a3a6:	b963      	cbnz	r3, 800a3c2 <_svfiprintf_r+0x32>
 800a3a8:	2140      	movs	r1, #64	; 0x40
 800a3aa:	f7ff fdd5 	bl	8009f58 <_malloc_r>
 800a3ae:	6028      	str	r0, [r5, #0]
 800a3b0:	6128      	str	r0, [r5, #16]
 800a3b2:	b920      	cbnz	r0, 800a3be <_svfiprintf_r+0x2e>
 800a3b4:	230c      	movs	r3, #12
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3bc:	e0d1      	b.n	800a562 <_svfiprintf_r+0x1d2>
 800a3be:	2340      	movs	r3, #64	; 0x40
 800a3c0:	616b      	str	r3, [r5, #20]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c6:	2320      	movs	r3, #32
 800a3c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3cc:	2330      	movs	r3, #48	; 0x30
 800a3ce:	f04f 0901 	mov.w	r9, #1
 800a3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a57c <_svfiprintf_r+0x1ec>
 800a3da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3de:	4623      	mov	r3, r4
 800a3e0:	469a      	mov	sl, r3
 800a3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e6:	b10a      	cbz	r2, 800a3ec <_svfiprintf_r+0x5c>
 800a3e8:	2a25      	cmp	r2, #37	; 0x25
 800a3ea:	d1f9      	bne.n	800a3e0 <_svfiprintf_r+0x50>
 800a3ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f0:	d00b      	beq.n	800a40a <_svfiprintf_r+0x7a>
 800a3f2:	465b      	mov	r3, fp
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f7ff ff6d 	bl	800a2d8 <__ssputs_r>
 800a3fe:	3001      	adds	r0, #1
 800a400:	f000 80aa 	beq.w	800a558 <_svfiprintf_r+0x1c8>
 800a404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a406:	445a      	add	r2, fp
 800a408:	9209      	str	r2, [sp, #36]	; 0x24
 800a40a:	f89a 3000 	ldrb.w	r3, [sl]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 80a2 	beq.w	800a558 <_svfiprintf_r+0x1c8>
 800a414:	2300      	movs	r3, #0
 800a416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a41a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a41e:	f10a 0a01 	add.w	sl, sl, #1
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	9307      	str	r3, [sp, #28]
 800a426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a42a:	931a      	str	r3, [sp, #104]	; 0x68
 800a42c:	4654      	mov	r4, sl
 800a42e:	2205      	movs	r2, #5
 800a430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a434:	4851      	ldr	r0, [pc, #324]	; (800a57c <_svfiprintf_r+0x1ec>)
 800a436:	f000 fdf5 	bl	800b024 <memchr>
 800a43a:	9a04      	ldr	r2, [sp, #16]
 800a43c:	b9d8      	cbnz	r0, 800a476 <_svfiprintf_r+0xe6>
 800a43e:	06d0      	lsls	r0, r2, #27
 800a440:	bf44      	itt	mi
 800a442:	2320      	movmi	r3, #32
 800a444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a448:	0711      	lsls	r1, r2, #28
 800a44a:	bf44      	itt	mi
 800a44c:	232b      	movmi	r3, #43	; 0x2b
 800a44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a452:	f89a 3000 	ldrb.w	r3, [sl]
 800a456:	2b2a      	cmp	r3, #42	; 0x2a
 800a458:	d015      	beq.n	800a486 <_svfiprintf_r+0xf6>
 800a45a:	4654      	mov	r4, sl
 800a45c:	2000      	movs	r0, #0
 800a45e:	f04f 0c0a 	mov.w	ip, #10
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	4621      	mov	r1, r4
 800a466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a46a:	3b30      	subs	r3, #48	; 0x30
 800a46c:	2b09      	cmp	r3, #9
 800a46e:	d94e      	bls.n	800a50e <_svfiprintf_r+0x17e>
 800a470:	b1b0      	cbz	r0, 800a4a0 <_svfiprintf_r+0x110>
 800a472:	9207      	str	r2, [sp, #28]
 800a474:	e014      	b.n	800a4a0 <_svfiprintf_r+0x110>
 800a476:	eba0 0308 	sub.w	r3, r0, r8
 800a47a:	fa09 f303 	lsl.w	r3, r9, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	46a2      	mov	sl, r4
 800a482:	9304      	str	r3, [sp, #16]
 800a484:	e7d2      	b.n	800a42c <_svfiprintf_r+0x9c>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	1d19      	adds	r1, r3, #4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	9103      	str	r1, [sp, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bfbb      	ittet	lt
 800a492:	425b      	neglt	r3, r3
 800a494:	f042 0202 	orrlt.w	r2, r2, #2
 800a498:	9307      	strge	r3, [sp, #28]
 800a49a:	9307      	strlt	r3, [sp, #28]
 800a49c:	bfb8      	it	lt
 800a49e:	9204      	strlt	r2, [sp, #16]
 800a4a0:	7823      	ldrb	r3, [r4, #0]
 800a4a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a4:	d10c      	bne.n	800a4c0 <_svfiprintf_r+0x130>
 800a4a6:	7863      	ldrb	r3, [r4, #1]
 800a4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4aa:	d135      	bne.n	800a518 <_svfiprintf_r+0x188>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	3402      	adds	r4, #2
 800a4b0:	1d1a      	adds	r2, r3, #4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	9203      	str	r2, [sp, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfb8      	it	lt
 800a4ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4be:	9305      	str	r3, [sp, #20]
 800a4c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a580 <_svfiprintf_r+0x1f0>
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	4650      	mov	r0, sl
 800a4c8:	7821      	ldrb	r1, [r4, #0]
 800a4ca:	f000 fdab 	bl	800b024 <memchr>
 800a4ce:	b140      	cbz	r0, 800a4e2 <_svfiprintf_r+0x152>
 800a4d0:	2340      	movs	r3, #64	; 0x40
 800a4d2:	eba0 000a 	sub.w	r0, r0, sl
 800a4d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a4da:	9b04      	ldr	r3, [sp, #16]
 800a4dc:	3401      	adds	r4, #1
 800a4de:	4303      	orrs	r3, r0
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e6:	2206      	movs	r2, #6
 800a4e8:	4826      	ldr	r0, [pc, #152]	; (800a584 <_svfiprintf_r+0x1f4>)
 800a4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ee:	f000 fd99 	bl	800b024 <memchr>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d038      	beq.n	800a568 <_svfiprintf_r+0x1d8>
 800a4f6:	4b24      	ldr	r3, [pc, #144]	; (800a588 <_svfiprintf_r+0x1f8>)
 800a4f8:	bb1b      	cbnz	r3, 800a542 <_svfiprintf_r+0x1b2>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	f023 0307 	bic.w	r3, r3, #7
 800a502:	3308      	adds	r3, #8
 800a504:	9303      	str	r3, [sp, #12]
 800a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a508:	4433      	add	r3, r6
 800a50a:	9309      	str	r3, [sp, #36]	; 0x24
 800a50c:	e767      	b.n	800a3de <_svfiprintf_r+0x4e>
 800a50e:	460c      	mov	r4, r1
 800a510:	2001      	movs	r0, #1
 800a512:	fb0c 3202 	mla	r2, ip, r2, r3
 800a516:	e7a5      	b.n	800a464 <_svfiprintf_r+0xd4>
 800a518:	2300      	movs	r3, #0
 800a51a:	f04f 0c0a 	mov.w	ip, #10
 800a51e:	4619      	mov	r1, r3
 800a520:	3401      	adds	r4, #1
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	4620      	mov	r0, r4
 800a526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a52a:	3a30      	subs	r2, #48	; 0x30
 800a52c:	2a09      	cmp	r2, #9
 800a52e:	d903      	bls.n	800a538 <_svfiprintf_r+0x1a8>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0c5      	beq.n	800a4c0 <_svfiprintf_r+0x130>
 800a534:	9105      	str	r1, [sp, #20]
 800a536:	e7c3      	b.n	800a4c0 <_svfiprintf_r+0x130>
 800a538:	4604      	mov	r4, r0
 800a53a:	2301      	movs	r3, #1
 800a53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a540:	e7f0      	b.n	800a524 <_svfiprintf_r+0x194>
 800a542:	ab03      	add	r3, sp, #12
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	462a      	mov	r2, r5
 800a548:	4638      	mov	r0, r7
 800a54a:	4b10      	ldr	r3, [pc, #64]	; (800a58c <_svfiprintf_r+0x1fc>)
 800a54c:	a904      	add	r1, sp, #16
 800a54e:	f3af 8000 	nop.w
 800a552:	1c42      	adds	r2, r0, #1
 800a554:	4606      	mov	r6, r0
 800a556:	d1d6      	bne.n	800a506 <_svfiprintf_r+0x176>
 800a558:	89ab      	ldrh	r3, [r5, #12]
 800a55a:	065b      	lsls	r3, r3, #25
 800a55c:	f53f af2c 	bmi.w	800a3b8 <_svfiprintf_r+0x28>
 800a560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a562:	b01d      	add	sp, #116	; 0x74
 800a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a568:	ab03      	add	r3, sp, #12
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	462a      	mov	r2, r5
 800a56e:	4638      	mov	r0, r7
 800a570:	4b06      	ldr	r3, [pc, #24]	; (800a58c <_svfiprintf_r+0x1fc>)
 800a572:	a904      	add	r1, sp, #16
 800a574:	f000 f9d4 	bl	800a920 <_printf_i>
 800a578:	e7eb      	b.n	800a552 <_svfiprintf_r+0x1c2>
 800a57a:	bf00      	nop
 800a57c:	0800bab0 	.word	0x0800bab0
 800a580:	0800bab6 	.word	0x0800bab6
 800a584:	0800baba 	.word	0x0800baba
 800a588:	00000000 	.word	0x00000000
 800a58c:	0800a2d9 	.word	0x0800a2d9

0800a590 <__sfputc_r>:
 800a590:	6893      	ldr	r3, [r2, #8]
 800a592:	b410      	push	{r4}
 800a594:	3b01      	subs	r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	6093      	str	r3, [r2, #8]
 800a59a:	da07      	bge.n	800a5ac <__sfputc_r+0x1c>
 800a59c:	6994      	ldr	r4, [r2, #24]
 800a59e:	42a3      	cmp	r3, r4
 800a5a0:	db01      	blt.n	800a5a6 <__sfputc_r+0x16>
 800a5a2:	290a      	cmp	r1, #10
 800a5a4:	d102      	bne.n	800a5ac <__sfputc_r+0x1c>
 800a5a6:	bc10      	pop	{r4}
 800a5a8:	f000 bb24 	b.w	800abf4 <__swbuf_r>
 800a5ac:	6813      	ldr	r3, [r2, #0]
 800a5ae:	1c58      	adds	r0, r3, #1
 800a5b0:	6010      	str	r0, [r2, #0]
 800a5b2:	7019      	strb	r1, [r3, #0]
 800a5b4:	4608      	mov	r0, r1
 800a5b6:	bc10      	pop	{r4}
 800a5b8:	4770      	bx	lr

0800a5ba <__sfputs_r>:
 800a5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	18d5      	adds	r5, r2, r3
 800a5c4:	42ac      	cmp	r4, r5
 800a5c6:	d101      	bne.n	800a5cc <__sfputs_r+0x12>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e007      	b.n	800a5dc <__sfputs_r+0x22>
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d4:	f7ff ffdc 	bl	800a590 <__sfputc_r>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d1f3      	bne.n	800a5c4 <__sfputs_r+0xa>
 800a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5e0 <_vfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	4614      	mov	r4, r2
 800a5e8:	4698      	mov	r8, r3
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	b09d      	sub	sp, #116	; 0x74
 800a5ee:	b118      	cbz	r0, 800a5f8 <_vfiprintf_r+0x18>
 800a5f0:	6983      	ldr	r3, [r0, #24]
 800a5f2:	b90b      	cbnz	r3, 800a5f8 <_vfiprintf_r+0x18>
 800a5f4:	f7ff fdc4 	bl	800a180 <__sinit>
 800a5f8:	4b89      	ldr	r3, [pc, #548]	; (800a820 <_vfiprintf_r+0x240>)
 800a5fa:	429d      	cmp	r5, r3
 800a5fc:	d11b      	bne.n	800a636 <_vfiprintf_r+0x56>
 800a5fe:	6875      	ldr	r5, [r6, #4]
 800a600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a602:	07d9      	lsls	r1, r3, #31
 800a604:	d405      	bmi.n	800a612 <_vfiprintf_r+0x32>
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	059a      	lsls	r2, r3, #22
 800a60a:	d402      	bmi.n	800a612 <_vfiprintf_r+0x32>
 800a60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a60e:	f7ff fe55 	bl	800a2bc <__retarget_lock_acquire_recursive>
 800a612:	89ab      	ldrh	r3, [r5, #12]
 800a614:	071b      	lsls	r3, r3, #28
 800a616:	d501      	bpl.n	800a61c <_vfiprintf_r+0x3c>
 800a618:	692b      	ldr	r3, [r5, #16]
 800a61a:	b9eb      	cbnz	r3, 800a658 <_vfiprintf_r+0x78>
 800a61c:	4629      	mov	r1, r5
 800a61e:	4630      	mov	r0, r6
 800a620:	f000 fb4c 	bl	800acbc <__swsetup_r>
 800a624:	b1c0      	cbz	r0, 800a658 <_vfiprintf_r+0x78>
 800a626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a628:	07dc      	lsls	r4, r3, #31
 800a62a:	d50e      	bpl.n	800a64a <_vfiprintf_r+0x6a>
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a630:	b01d      	add	sp, #116	; 0x74
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a636:	4b7b      	ldr	r3, [pc, #492]	; (800a824 <_vfiprintf_r+0x244>)
 800a638:	429d      	cmp	r5, r3
 800a63a:	d101      	bne.n	800a640 <_vfiprintf_r+0x60>
 800a63c:	68b5      	ldr	r5, [r6, #8]
 800a63e:	e7df      	b.n	800a600 <_vfiprintf_r+0x20>
 800a640:	4b79      	ldr	r3, [pc, #484]	; (800a828 <_vfiprintf_r+0x248>)
 800a642:	429d      	cmp	r5, r3
 800a644:	bf08      	it	eq
 800a646:	68f5      	ldreq	r5, [r6, #12]
 800a648:	e7da      	b.n	800a600 <_vfiprintf_r+0x20>
 800a64a:	89ab      	ldrh	r3, [r5, #12]
 800a64c:	0598      	lsls	r0, r3, #22
 800a64e:	d4ed      	bmi.n	800a62c <_vfiprintf_r+0x4c>
 800a650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a652:	f7ff fe34 	bl	800a2be <__retarget_lock_release_recursive>
 800a656:	e7e9      	b.n	800a62c <_vfiprintf_r+0x4c>
 800a658:	2300      	movs	r3, #0
 800a65a:	9309      	str	r3, [sp, #36]	; 0x24
 800a65c:	2320      	movs	r3, #32
 800a65e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a662:	2330      	movs	r3, #48	; 0x30
 800a664:	f04f 0901 	mov.w	r9, #1
 800a668:	f8cd 800c 	str.w	r8, [sp, #12]
 800a66c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a82c <_vfiprintf_r+0x24c>
 800a670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a674:	4623      	mov	r3, r4
 800a676:	469a      	mov	sl, r3
 800a678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a67c:	b10a      	cbz	r2, 800a682 <_vfiprintf_r+0xa2>
 800a67e:	2a25      	cmp	r2, #37	; 0x25
 800a680:	d1f9      	bne.n	800a676 <_vfiprintf_r+0x96>
 800a682:	ebba 0b04 	subs.w	fp, sl, r4
 800a686:	d00b      	beq.n	800a6a0 <_vfiprintf_r+0xc0>
 800a688:	465b      	mov	r3, fp
 800a68a:	4622      	mov	r2, r4
 800a68c:	4629      	mov	r1, r5
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff93 	bl	800a5ba <__sfputs_r>
 800a694:	3001      	adds	r0, #1
 800a696:	f000 80aa 	beq.w	800a7ee <_vfiprintf_r+0x20e>
 800a69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a69c:	445a      	add	r2, fp
 800a69e:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 80a2 	beq.w	800a7ee <_vfiprintf_r+0x20e>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b4:	f10a 0a01 	add.w	sl, sl, #1
 800a6b8:	9304      	str	r3, [sp, #16]
 800a6ba:	9307      	str	r3, [sp, #28]
 800a6bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2205      	movs	r2, #5
 800a6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ca:	4858      	ldr	r0, [pc, #352]	; (800a82c <_vfiprintf_r+0x24c>)
 800a6cc:	f000 fcaa 	bl	800b024 <memchr>
 800a6d0:	9a04      	ldr	r2, [sp, #16]
 800a6d2:	b9d8      	cbnz	r0, 800a70c <_vfiprintf_r+0x12c>
 800a6d4:	06d1      	lsls	r1, r2, #27
 800a6d6:	bf44      	itt	mi
 800a6d8:	2320      	movmi	r3, #32
 800a6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6de:	0713      	lsls	r3, r2, #28
 800a6e0:	bf44      	itt	mi
 800a6e2:	232b      	movmi	r3, #43	; 0x2b
 800a6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ee:	d015      	beq.n	800a71c <_vfiprintf_r+0x13c>
 800a6f0:	4654      	mov	r4, sl
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	f04f 0c0a 	mov.w	ip, #10
 800a6f8:	9a07      	ldr	r2, [sp, #28]
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a700:	3b30      	subs	r3, #48	; 0x30
 800a702:	2b09      	cmp	r3, #9
 800a704:	d94e      	bls.n	800a7a4 <_vfiprintf_r+0x1c4>
 800a706:	b1b0      	cbz	r0, 800a736 <_vfiprintf_r+0x156>
 800a708:	9207      	str	r2, [sp, #28]
 800a70a:	e014      	b.n	800a736 <_vfiprintf_r+0x156>
 800a70c:	eba0 0308 	sub.w	r3, r0, r8
 800a710:	fa09 f303 	lsl.w	r3, r9, r3
 800a714:	4313      	orrs	r3, r2
 800a716:	46a2      	mov	sl, r4
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	e7d2      	b.n	800a6c2 <_vfiprintf_r+0xe2>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	1d19      	adds	r1, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	9103      	str	r1, [sp, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	bfbb      	ittet	lt
 800a728:	425b      	neglt	r3, r3
 800a72a:	f042 0202 	orrlt.w	r2, r2, #2
 800a72e:	9307      	strge	r3, [sp, #28]
 800a730:	9307      	strlt	r3, [sp, #28]
 800a732:	bfb8      	it	lt
 800a734:	9204      	strlt	r2, [sp, #16]
 800a736:	7823      	ldrb	r3, [r4, #0]
 800a738:	2b2e      	cmp	r3, #46	; 0x2e
 800a73a:	d10c      	bne.n	800a756 <_vfiprintf_r+0x176>
 800a73c:	7863      	ldrb	r3, [r4, #1]
 800a73e:	2b2a      	cmp	r3, #42	; 0x2a
 800a740:	d135      	bne.n	800a7ae <_vfiprintf_r+0x1ce>
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	3402      	adds	r4, #2
 800a746:	1d1a      	adds	r2, r3, #4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	9203      	str	r2, [sp, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bfb8      	it	lt
 800a750:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a830 <_vfiprintf_r+0x250>
 800a75a:	2203      	movs	r2, #3
 800a75c:	4650      	mov	r0, sl
 800a75e:	7821      	ldrb	r1, [r4, #0]
 800a760:	f000 fc60 	bl	800b024 <memchr>
 800a764:	b140      	cbz	r0, 800a778 <_vfiprintf_r+0x198>
 800a766:	2340      	movs	r3, #64	; 0x40
 800a768:	eba0 000a 	sub.w	r0, r0, sl
 800a76c:	fa03 f000 	lsl.w	r0, r3, r0
 800a770:	9b04      	ldr	r3, [sp, #16]
 800a772:	3401      	adds	r4, #1
 800a774:	4303      	orrs	r3, r0
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77c:	2206      	movs	r2, #6
 800a77e:	482d      	ldr	r0, [pc, #180]	; (800a834 <_vfiprintf_r+0x254>)
 800a780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a784:	f000 fc4e 	bl	800b024 <memchr>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d03f      	beq.n	800a80c <_vfiprintf_r+0x22c>
 800a78c:	4b2a      	ldr	r3, [pc, #168]	; (800a838 <_vfiprintf_r+0x258>)
 800a78e:	bb1b      	cbnz	r3, 800a7d8 <_vfiprintf_r+0x1f8>
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	3307      	adds	r3, #7
 800a794:	f023 0307 	bic.w	r3, r3, #7
 800a798:	3308      	adds	r3, #8
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	443b      	add	r3, r7
 800a7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a2:	e767      	b.n	800a674 <_vfiprintf_r+0x94>
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ac:	e7a5      	b.n	800a6fa <_vfiprintf_r+0x11a>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f04f 0c0a 	mov.w	ip, #10
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	3401      	adds	r4, #1
 800a7b8:	9305      	str	r3, [sp, #20]
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c0:	3a30      	subs	r2, #48	; 0x30
 800a7c2:	2a09      	cmp	r2, #9
 800a7c4:	d903      	bls.n	800a7ce <_vfiprintf_r+0x1ee>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0c5      	beq.n	800a756 <_vfiprintf_r+0x176>
 800a7ca:	9105      	str	r1, [sp, #20]
 800a7cc:	e7c3      	b.n	800a756 <_vfiprintf_r+0x176>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7d6:	e7f0      	b.n	800a7ba <_vfiprintf_r+0x1da>
 800a7d8:	ab03      	add	r3, sp, #12
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	462a      	mov	r2, r5
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4b16      	ldr	r3, [pc, #88]	; (800a83c <_vfiprintf_r+0x25c>)
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	1c78      	adds	r0, r7, #1
 800a7ec:	d1d6      	bne.n	800a79c <_vfiprintf_r+0x1bc>
 800a7ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f0:	07d9      	lsls	r1, r3, #31
 800a7f2:	d405      	bmi.n	800a800 <_vfiprintf_r+0x220>
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	059a      	lsls	r2, r3, #22
 800a7f8:	d402      	bmi.n	800a800 <_vfiprintf_r+0x220>
 800a7fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fc:	f7ff fd5f 	bl	800a2be <__retarget_lock_release_recursive>
 800a800:	89ab      	ldrh	r3, [r5, #12]
 800a802:	065b      	lsls	r3, r3, #25
 800a804:	f53f af12 	bmi.w	800a62c <_vfiprintf_r+0x4c>
 800a808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a80a:	e711      	b.n	800a630 <_vfiprintf_r+0x50>
 800a80c:	ab03      	add	r3, sp, #12
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	462a      	mov	r2, r5
 800a812:	4630      	mov	r0, r6
 800a814:	4b09      	ldr	r3, [pc, #36]	; (800a83c <_vfiprintf_r+0x25c>)
 800a816:	a904      	add	r1, sp, #16
 800a818:	f000 f882 	bl	800a920 <_printf_i>
 800a81c:	e7e4      	b.n	800a7e8 <_vfiprintf_r+0x208>
 800a81e:	bf00      	nop
 800a820:	0800ba70 	.word	0x0800ba70
 800a824:	0800ba90 	.word	0x0800ba90
 800a828:	0800ba50 	.word	0x0800ba50
 800a82c:	0800bab0 	.word	0x0800bab0
 800a830:	0800bab6 	.word	0x0800bab6
 800a834:	0800baba 	.word	0x0800baba
 800a838:	00000000 	.word	0x00000000
 800a83c:	0800a5bb 	.word	0x0800a5bb

0800a840 <_printf_common>:
 800a840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	4616      	mov	r6, r2
 800a846:	4699      	mov	r9, r3
 800a848:	688a      	ldr	r2, [r1, #8]
 800a84a:	690b      	ldr	r3, [r1, #16]
 800a84c:	4607      	mov	r7, r0
 800a84e:	4293      	cmp	r3, r2
 800a850:	bfb8      	it	lt
 800a852:	4613      	movlt	r3, r2
 800a854:	6033      	str	r3, [r6, #0]
 800a856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a85a:	460c      	mov	r4, r1
 800a85c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a860:	b10a      	cbz	r2, 800a866 <_printf_common+0x26>
 800a862:	3301      	adds	r3, #1
 800a864:	6033      	str	r3, [r6, #0]
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	0699      	lsls	r1, r3, #26
 800a86a:	bf42      	ittt	mi
 800a86c:	6833      	ldrmi	r3, [r6, #0]
 800a86e:	3302      	addmi	r3, #2
 800a870:	6033      	strmi	r3, [r6, #0]
 800a872:	6825      	ldr	r5, [r4, #0]
 800a874:	f015 0506 	ands.w	r5, r5, #6
 800a878:	d106      	bne.n	800a888 <_printf_common+0x48>
 800a87a:	f104 0a19 	add.w	sl, r4, #25
 800a87e:	68e3      	ldr	r3, [r4, #12]
 800a880:	6832      	ldr	r2, [r6, #0]
 800a882:	1a9b      	subs	r3, r3, r2
 800a884:	42ab      	cmp	r3, r5
 800a886:	dc28      	bgt.n	800a8da <_printf_common+0x9a>
 800a888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a88c:	1e13      	subs	r3, r2, #0
 800a88e:	6822      	ldr	r2, [r4, #0]
 800a890:	bf18      	it	ne
 800a892:	2301      	movne	r3, #1
 800a894:	0692      	lsls	r2, r2, #26
 800a896:	d42d      	bmi.n	800a8f4 <_printf_common+0xb4>
 800a898:	4649      	mov	r1, r9
 800a89a:	4638      	mov	r0, r7
 800a89c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8a0:	47c0      	blx	r8
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	d020      	beq.n	800a8e8 <_printf_common+0xa8>
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	68e5      	ldr	r5, [r4, #12]
 800a8aa:	f003 0306 	and.w	r3, r3, #6
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	bf18      	it	ne
 800a8b2:	2500      	movne	r5, #0
 800a8b4:	6832      	ldr	r2, [r6, #0]
 800a8b6:	f04f 0600 	mov.w	r6, #0
 800a8ba:	68a3      	ldr	r3, [r4, #8]
 800a8bc:	bf08      	it	eq
 800a8be:	1aad      	subeq	r5, r5, r2
 800a8c0:	6922      	ldr	r2, [r4, #16]
 800a8c2:	bf08      	it	eq
 800a8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	bfc4      	itt	gt
 800a8cc:	1a9b      	subgt	r3, r3, r2
 800a8ce:	18ed      	addgt	r5, r5, r3
 800a8d0:	341a      	adds	r4, #26
 800a8d2:	42b5      	cmp	r5, r6
 800a8d4:	d11a      	bne.n	800a90c <_printf_common+0xcc>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e008      	b.n	800a8ec <_printf_common+0xac>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4652      	mov	r2, sl
 800a8de:	4649      	mov	r1, r9
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	47c0      	blx	r8
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d103      	bne.n	800a8f0 <_printf_common+0xb0>
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f0:	3501      	adds	r5, #1
 800a8f2:	e7c4      	b.n	800a87e <_printf_common+0x3e>
 800a8f4:	2030      	movs	r0, #48	; 0x30
 800a8f6:	18e1      	adds	r1, r4, r3
 800a8f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a902:	4422      	add	r2, r4
 800a904:	3302      	adds	r3, #2
 800a906:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a90a:	e7c5      	b.n	800a898 <_printf_common+0x58>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4622      	mov	r2, r4
 800a910:	4649      	mov	r1, r9
 800a912:	4638      	mov	r0, r7
 800a914:	47c0      	blx	r8
 800a916:	3001      	adds	r0, #1
 800a918:	d0e6      	beq.n	800a8e8 <_printf_common+0xa8>
 800a91a:	3601      	adds	r6, #1
 800a91c:	e7d9      	b.n	800a8d2 <_printf_common+0x92>
	...

0800a920 <_printf_i>:
 800a920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a924:	7e0f      	ldrb	r7, [r1, #24]
 800a926:	4691      	mov	r9, r2
 800a928:	2f78      	cmp	r7, #120	; 0x78
 800a92a:	4680      	mov	r8, r0
 800a92c:	460c      	mov	r4, r1
 800a92e:	469a      	mov	sl, r3
 800a930:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a936:	d807      	bhi.n	800a948 <_printf_i+0x28>
 800a938:	2f62      	cmp	r7, #98	; 0x62
 800a93a:	d80a      	bhi.n	800a952 <_printf_i+0x32>
 800a93c:	2f00      	cmp	r7, #0
 800a93e:	f000 80d9 	beq.w	800aaf4 <_printf_i+0x1d4>
 800a942:	2f58      	cmp	r7, #88	; 0x58
 800a944:	f000 80a4 	beq.w	800aa90 <_printf_i+0x170>
 800a948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a94c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a950:	e03a      	b.n	800a9c8 <_printf_i+0xa8>
 800a952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a956:	2b15      	cmp	r3, #21
 800a958:	d8f6      	bhi.n	800a948 <_printf_i+0x28>
 800a95a:	a101      	add	r1, pc, #4	; (adr r1, 800a960 <_printf_i+0x40>)
 800a95c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a960:	0800a9b9 	.word	0x0800a9b9
 800a964:	0800a9cd 	.word	0x0800a9cd
 800a968:	0800a949 	.word	0x0800a949
 800a96c:	0800a949 	.word	0x0800a949
 800a970:	0800a949 	.word	0x0800a949
 800a974:	0800a949 	.word	0x0800a949
 800a978:	0800a9cd 	.word	0x0800a9cd
 800a97c:	0800a949 	.word	0x0800a949
 800a980:	0800a949 	.word	0x0800a949
 800a984:	0800a949 	.word	0x0800a949
 800a988:	0800a949 	.word	0x0800a949
 800a98c:	0800aadb 	.word	0x0800aadb
 800a990:	0800a9fd 	.word	0x0800a9fd
 800a994:	0800aabd 	.word	0x0800aabd
 800a998:	0800a949 	.word	0x0800a949
 800a99c:	0800a949 	.word	0x0800a949
 800a9a0:	0800aafd 	.word	0x0800aafd
 800a9a4:	0800a949 	.word	0x0800a949
 800a9a8:	0800a9fd 	.word	0x0800a9fd
 800a9ac:	0800a949 	.word	0x0800a949
 800a9b0:	0800a949 	.word	0x0800a949
 800a9b4:	0800aac5 	.word	0x0800aac5
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	1d1a      	adds	r2, r3, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	602a      	str	r2, [r5, #0]
 800a9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e0a4      	b.n	800ab16 <_printf_i+0x1f6>
 800a9cc:	6820      	ldr	r0, [r4, #0]
 800a9ce:	6829      	ldr	r1, [r5, #0]
 800a9d0:	0606      	lsls	r6, r0, #24
 800a9d2:	f101 0304 	add.w	r3, r1, #4
 800a9d6:	d50a      	bpl.n	800a9ee <_printf_i+0xce>
 800a9d8:	680e      	ldr	r6, [r1, #0]
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	2e00      	cmp	r6, #0
 800a9de:	da03      	bge.n	800a9e8 <_printf_i+0xc8>
 800a9e0:	232d      	movs	r3, #45	; 0x2d
 800a9e2:	4276      	negs	r6, r6
 800a9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9e8:	230a      	movs	r3, #10
 800a9ea:	485e      	ldr	r0, [pc, #376]	; (800ab64 <_printf_i+0x244>)
 800a9ec:	e019      	b.n	800aa22 <_printf_i+0x102>
 800a9ee:	680e      	ldr	r6, [r1, #0]
 800a9f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	bf18      	it	ne
 800a9f8:	b236      	sxthne	r6, r6
 800a9fa:	e7ef      	b.n	800a9dc <_printf_i+0xbc>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	1d19      	adds	r1, r3, #4
 800aa02:	6029      	str	r1, [r5, #0]
 800aa04:	0601      	lsls	r1, r0, #24
 800aa06:	d501      	bpl.n	800aa0c <_printf_i+0xec>
 800aa08:	681e      	ldr	r6, [r3, #0]
 800aa0a:	e002      	b.n	800aa12 <_printf_i+0xf2>
 800aa0c:	0646      	lsls	r6, r0, #25
 800aa0e:	d5fb      	bpl.n	800aa08 <_printf_i+0xe8>
 800aa10:	881e      	ldrh	r6, [r3, #0]
 800aa12:	2f6f      	cmp	r7, #111	; 0x6f
 800aa14:	bf0c      	ite	eq
 800aa16:	2308      	moveq	r3, #8
 800aa18:	230a      	movne	r3, #10
 800aa1a:	4852      	ldr	r0, [pc, #328]	; (800ab64 <_printf_i+0x244>)
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa22:	6865      	ldr	r5, [r4, #4]
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	bfa8      	it	ge
 800aa28:	6821      	ldrge	r1, [r4, #0]
 800aa2a:	60a5      	str	r5, [r4, #8]
 800aa2c:	bfa4      	itt	ge
 800aa2e:	f021 0104 	bicge.w	r1, r1, #4
 800aa32:	6021      	strge	r1, [r4, #0]
 800aa34:	b90e      	cbnz	r6, 800aa3a <_printf_i+0x11a>
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	d04d      	beq.n	800aad6 <_printf_i+0x1b6>
 800aa3a:	4615      	mov	r5, r2
 800aa3c:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa40:	fb03 6711 	mls	r7, r3, r1, r6
 800aa44:	5dc7      	ldrb	r7, [r0, r7]
 800aa46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa4a:	4637      	mov	r7, r6
 800aa4c:	42bb      	cmp	r3, r7
 800aa4e:	460e      	mov	r6, r1
 800aa50:	d9f4      	bls.n	800aa3c <_printf_i+0x11c>
 800aa52:	2b08      	cmp	r3, #8
 800aa54:	d10b      	bne.n	800aa6e <_printf_i+0x14e>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	07de      	lsls	r6, r3, #31
 800aa5a:	d508      	bpl.n	800aa6e <_printf_i+0x14e>
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	6861      	ldr	r1, [r4, #4]
 800aa60:	4299      	cmp	r1, r3
 800aa62:	bfde      	ittt	le
 800aa64:	2330      	movle	r3, #48	; 0x30
 800aa66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa6e:	1b52      	subs	r2, r2, r5
 800aa70:	6122      	str	r2, [r4, #16]
 800aa72:	464b      	mov	r3, r9
 800aa74:	4621      	mov	r1, r4
 800aa76:	4640      	mov	r0, r8
 800aa78:	f8cd a000 	str.w	sl, [sp]
 800aa7c:	aa03      	add	r2, sp, #12
 800aa7e:	f7ff fedf 	bl	800a840 <_printf_common>
 800aa82:	3001      	adds	r0, #1
 800aa84:	d14c      	bne.n	800ab20 <_printf_i+0x200>
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa8a:	b004      	add	sp, #16
 800aa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa90:	4834      	ldr	r0, [pc, #208]	; (800ab64 <_printf_i+0x244>)
 800aa92:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa96:	6829      	ldr	r1, [r5, #0]
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa9e:	6029      	str	r1, [r5, #0]
 800aaa0:	061d      	lsls	r5, r3, #24
 800aaa2:	d514      	bpl.n	800aace <_printf_i+0x1ae>
 800aaa4:	07df      	lsls	r7, r3, #31
 800aaa6:	bf44      	itt	mi
 800aaa8:	f043 0320 	orrmi.w	r3, r3, #32
 800aaac:	6023      	strmi	r3, [r4, #0]
 800aaae:	b91e      	cbnz	r6, 800aab8 <_printf_i+0x198>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	f023 0320 	bic.w	r3, r3, #32
 800aab6:	6023      	str	r3, [r4, #0]
 800aab8:	2310      	movs	r3, #16
 800aaba:	e7af      	b.n	800aa1c <_printf_i+0xfc>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	f043 0320 	orr.w	r3, r3, #32
 800aac2:	6023      	str	r3, [r4, #0]
 800aac4:	2378      	movs	r3, #120	; 0x78
 800aac6:	4828      	ldr	r0, [pc, #160]	; (800ab68 <_printf_i+0x248>)
 800aac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aacc:	e7e3      	b.n	800aa96 <_printf_i+0x176>
 800aace:	0659      	lsls	r1, r3, #25
 800aad0:	bf48      	it	mi
 800aad2:	b2b6      	uxthmi	r6, r6
 800aad4:	e7e6      	b.n	800aaa4 <_printf_i+0x184>
 800aad6:	4615      	mov	r5, r2
 800aad8:	e7bb      	b.n	800aa52 <_printf_i+0x132>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	6826      	ldr	r6, [r4, #0]
 800aade:	1d18      	adds	r0, r3, #4
 800aae0:	6961      	ldr	r1, [r4, #20]
 800aae2:	6028      	str	r0, [r5, #0]
 800aae4:	0635      	lsls	r5, r6, #24
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	d501      	bpl.n	800aaee <_printf_i+0x1ce>
 800aaea:	6019      	str	r1, [r3, #0]
 800aaec:	e002      	b.n	800aaf4 <_printf_i+0x1d4>
 800aaee:	0670      	lsls	r0, r6, #25
 800aaf0:	d5fb      	bpl.n	800aaea <_printf_i+0x1ca>
 800aaf2:	8019      	strh	r1, [r3, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4615      	mov	r5, r2
 800aaf8:	6123      	str	r3, [r4, #16]
 800aafa:	e7ba      	b.n	800aa72 <_printf_i+0x152>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	2100      	movs	r1, #0
 800ab00:	1d1a      	adds	r2, r3, #4
 800ab02:	602a      	str	r2, [r5, #0]
 800ab04:	681d      	ldr	r5, [r3, #0]
 800ab06:	6862      	ldr	r2, [r4, #4]
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f000 fa8b 	bl	800b024 <memchr>
 800ab0e:	b108      	cbz	r0, 800ab14 <_printf_i+0x1f4>
 800ab10:	1b40      	subs	r0, r0, r5
 800ab12:	6060      	str	r0, [r4, #4]
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1e:	e7a8      	b.n	800aa72 <_printf_i+0x152>
 800ab20:	462a      	mov	r2, r5
 800ab22:	4649      	mov	r1, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	47d0      	blx	sl
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d0ab      	beq.n	800aa86 <_printf_i+0x166>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	079b      	lsls	r3, r3, #30
 800ab32:	d413      	bmi.n	800ab5c <_printf_i+0x23c>
 800ab34:	68e0      	ldr	r0, [r4, #12]
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	4298      	cmp	r0, r3
 800ab3a:	bfb8      	it	lt
 800ab3c:	4618      	movlt	r0, r3
 800ab3e:	e7a4      	b.n	800aa8a <_printf_i+0x16a>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4632      	mov	r2, r6
 800ab44:	4649      	mov	r1, r9
 800ab46:	4640      	mov	r0, r8
 800ab48:	47d0      	blx	sl
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d09b      	beq.n	800aa86 <_printf_i+0x166>
 800ab4e:	3501      	adds	r5, #1
 800ab50:	68e3      	ldr	r3, [r4, #12]
 800ab52:	9903      	ldr	r1, [sp, #12]
 800ab54:	1a5b      	subs	r3, r3, r1
 800ab56:	42ab      	cmp	r3, r5
 800ab58:	dcf2      	bgt.n	800ab40 <_printf_i+0x220>
 800ab5a:	e7eb      	b.n	800ab34 <_printf_i+0x214>
 800ab5c:	2500      	movs	r5, #0
 800ab5e:	f104 0619 	add.w	r6, r4, #25
 800ab62:	e7f5      	b.n	800ab50 <_printf_i+0x230>
 800ab64:	0800bac1 	.word	0x0800bac1
 800ab68:	0800bad2 	.word	0x0800bad2

0800ab6c <__sread>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	f000 fabc 	bl	800b0f0 <_read_r>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	bfab      	itete	ge
 800ab7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab80:	181b      	addge	r3, r3, r0
 800ab82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab86:	bfac      	ite	ge
 800ab88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab8a:	81a3      	strhlt	r3, [r4, #12]
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <__swrite>:
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	461f      	mov	r7, r3
 800ab94:	898b      	ldrh	r3, [r1, #12]
 800ab96:	4605      	mov	r5, r0
 800ab98:	05db      	lsls	r3, r3, #23
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	d505      	bpl.n	800abac <__swrite+0x1e>
 800aba0:	2302      	movs	r3, #2
 800aba2:	2200      	movs	r2, #0
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	f000 f9c4 	bl	800af34 <_lseek_r>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	4632      	mov	r2, r6
 800abb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	4628      	mov	r0, r5
 800abb8:	463b      	mov	r3, r7
 800abba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abc2:	f000 b869 	b.w	800ac98 <_write_r>

0800abc6 <__sseek>:
 800abc6:	b510      	push	{r4, lr}
 800abc8:	460c      	mov	r4, r1
 800abca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abce:	f000 f9b1 	bl	800af34 <_lseek_r>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	bf15      	itete	ne
 800abd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800abda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abe2:	81a3      	strheq	r3, [r4, #12]
 800abe4:	bf18      	it	ne
 800abe6:	81a3      	strhne	r3, [r4, #12]
 800abe8:	bd10      	pop	{r4, pc}

0800abea <__sclose>:
 800abea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abee:	f000 b8d3 	b.w	800ad98 <_close_r>
	...

0800abf4 <__swbuf_r>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	460e      	mov	r6, r1
 800abf8:	4614      	mov	r4, r2
 800abfa:	4605      	mov	r5, r0
 800abfc:	b118      	cbz	r0, 800ac06 <__swbuf_r+0x12>
 800abfe:	6983      	ldr	r3, [r0, #24]
 800ac00:	b90b      	cbnz	r3, 800ac06 <__swbuf_r+0x12>
 800ac02:	f7ff fabd 	bl	800a180 <__sinit>
 800ac06:	4b21      	ldr	r3, [pc, #132]	; (800ac8c <__swbuf_r+0x98>)
 800ac08:	429c      	cmp	r4, r3
 800ac0a:	d12b      	bne.n	800ac64 <__swbuf_r+0x70>
 800ac0c:	686c      	ldr	r4, [r5, #4]
 800ac0e:	69a3      	ldr	r3, [r4, #24]
 800ac10:	60a3      	str	r3, [r4, #8]
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	071a      	lsls	r2, r3, #28
 800ac16:	d52f      	bpl.n	800ac78 <__swbuf_r+0x84>
 800ac18:	6923      	ldr	r3, [r4, #16]
 800ac1a:	b36b      	cbz	r3, 800ac78 <__swbuf_r+0x84>
 800ac1c:	6923      	ldr	r3, [r4, #16]
 800ac1e:	6820      	ldr	r0, [r4, #0]
 800ac20:	b2f6      	uxtb	r6, r6
 800ac22:	1ac0      	subs	r0, r0, r3
 800ac24:	6963      	ldr	r3, [r4, #20]
 800ac26:	4637      	mov	r7, r6
 800ac28:	4283      	cmp	r3, r0
 800ac2a:	dc04      	bgt.n	800ac36 <__swbuf_r+0x42>
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 f944 	bl	800aebc <_fflush_r>
 800ac34:	bb30      	cbnz	r0, 800ac84 <__swbuf_r+0x90>
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	3001      	adds	r0, #1
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	60a3      	str	r3, [r4, #8]
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	6022      	str	r2, [r4, #0]
 800ac44:	701e      	strb	r6, [r3, #0]
 800ac46:	6963      	ldr	r3, [r4, #20]
 800ac48:	4283      	cmp	r3, r0
 800ac4a:	d004      	beq.n	800ac56 <__swbuf_r+0x62>
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	07db      	lsls	r3, r3, #31
 800ac50:	d506      	bpl.n	800ac60 <__swbuf_r+0x6c>
 800ac52:	2e0a      	cmp	r6, #10
 800ac54:	d104      	bne.n	800ac60 <__swbuf_r+0x6c>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 f92f 	bl	800aebc <_fflush_r>
 800ac5e:	b988      	cbnz	r0, 800ac84 <__swbuf_r+0x90>
 800ac60:	4638      	mov	r0, r7
 800ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac64:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <__swbuf_r+0x9c>)
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d101      	bne.n	800ac6e <__swbuf_r+0x7a>
 800ac6a:	68ac      	ldr	r4, [r5, #8]
 800ac6c:	e7cf      	b.n	800ac0e <__swbuf_r+0x1a>
 800ac6e:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <__swbuf_r+0xa0>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	bf08      	it	eq
 800ac74:	68ec      	ldreq	r4, [r5, #12]
 800ac76:	e7ca      	b.n	800ac0e <__swbuf_r+0x1a>
 800ac78:	4621      	mov	r1, r4
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f000 f81e 	bl	800acbc <__swsetup_r>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d0cb      	beq.n	800ac1c <__swbuf_r+0x28>
 800ac84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac88:	e7ea      	b.n	800ac60 <__swbuf_r+0x6c>
 800ac8a:	bf00      	nop
 800ac8c:	0800ba70 	.word	0x0800ba70
 800ac90:	0800ba90 	.word	0x0800ba90
 800ac94:	0800ba50 	.word	0x0800ba50

0800ac98 <_write_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	4611      	mov	r1, r2
 800aca0:	2200      	movs	r2, #0
 800aca2:	4d05      	ldr	r5, [pc, #20]	; (800acb8 <_write_r+0x20>)
 800aca4:	602a      	str	r2, [r5, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	f7f6 fa4b 	bl	8001142 <_write>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d102      	bne.n	800acb6 <_write_r+0x1e>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b103      	cbz	r3, 800acb6 <_write_r+0x1e>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	20000de8 	.word	0x20000de8

0800acbc <__swsetup_r>:
 800acbc:	4b32      	ldr	r3, [pc, #200]	; (800ad88 <__swsetup_r+0xcc>)
 800acbe:	b570      	push	{r4, r5, r6, lr}
 800acc0:	681d      	ldr	r5, [r3, #0]
 800acc2:	4606      	mov	r6, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	b125      	cbz	r5, 800acd2 <__swsetup_r+0x16>
 800acc8:	69ab      	ldr	r3, [r5, #24]
 800acca:	b913      	cbnz	r3, 800acd2 <__swsetup_r+0x16>
 800accc:	4628      	mov	r0, r5
 800acce:	f7ff fa57 	bl	800a180 <__sinit>
 800acd2:	4b2e      	ldr	r3, [pc, #184]	; (800ad8c <__swsetup_r+0xd0>)
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d10f      	bne.n	800acf8 <__swsetup_r+0x3c>
 800acd8:	686c      	ldr	r4, [r5, #4]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ace0:	0719      	lsls	r1, r3, #28
 800ace2:	d42c      	bmi.n	800ad3e <__swsetup_r+0x82>
 800ace4:	06dd      	lsls	r5, r3, #27
 800ace6:	d411      	bmi.n	800ad0c <__swsetup_r+0x50>
 800ace8:	2309      	movs	r3, #9
 800acea:	6033      	str	r3, [r6, #0]
 800acec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	e03e      	b.n	800ad76 <__swsetup_r+0xba>
 800acf8:	4b25      	ldr	r3, [pc, #148]	; (800ad90 <__swsetup_r+0xd4>)
 800acfa:	429c      	cmp	r4, r3
 800acfc:	d101      	bne.n	800ad02 <__swsetup_r+0x46>
 800acfe:	68ac      	ldr	r4, [r5, #8]
 800ad00:	e7eb      	b.n	800acda <__swsetup_r+0x1e>
 800ad02:	4b24      	ldr	r3, [pc, #144]	; (800ad94 <__swsetup_r+0xd8>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	bf08      	it	eq
 800ad08:	68ec      	ldreq	r4, [r5, #12]
 800ad0a:	e7e6      	b.n	800acda <__swsetup_r+0x1e>
 800ad0c:	0758      	lsls	r0, r3, #29
 800ad0e:	d512      	bpl.n	800ad36 <__swsetup_r+0x7a>
 800ad10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad12:	b141      	cbz	r1, 800ad26 <__swsetup_r+0x6a>
 800ad14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	d002      	beq.n	800ad22 <__swsetup_r+0x66>
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7ff f8b3 	bl	8009e88 <_free_r>
 800ad22:	2300      	movs	r3, #0
 800ad24:	6363      	str	r3, [r4, #52]	; 0x34
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f043 0308 	orr.w	r3, r3, #8
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	b94b      	cbnz	r3, 800ad56 <__swsetup_r+0x9a>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad4c:	d003      	beq.n	800ad56 <__swsetup_r+0x9a>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4630      	mov	r0, r6
 800ad52:	f000 f927 	bl	800afa4 <__smakebuf_r>
 800ad56:	89a0      	ldrh	r0, [r4, #12]
 800ad58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad5c:	f010 0301 	ands.w	r3, r0, #1
 800ad60:	d00a      	beq.n	800ad78 <__swsetup_r+0xbc>
 800ad62:	2300      	movs	r3, #0
 800ad64:	60a3      	str	r3, [r4, #8]
 800ad66:	6963      	ldr	r3, [r4, #20]
 800ad68:	425b      	negs	r3, r3
 800ad6a:	61a3      	str	r3, [r4, #24]
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	b943      	cbnz	r3, 800ad82 <__swsetup_r+0xc6>
 800ad70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad74:	d1ba      	bne.n	800acec <__swsetup_r+0x30>
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	0781      	lsls	r1, r0, #30
 800ad7a:	bf58      	it	pl
 800ad7c:	6963      	ldrpl	r3, [r4, #20]
 800ad7e:	60a3      	str	r3, [r4, #8]
 800ad80:	e7f4      	b.n	800ad6c <__swsetup_r+0xb0>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e7f7      	b.n	800ad76 <__swsetup_r+0xba>
 800ad86:	bf00      	nop
 800ad88:	2000017c 	.word	0x2000017c
 800ad8c:	0800ba70 	.word	0x0800ba70
 800ad90:	0800ba90 	.word	0x0800ba90
 800ad94:	0800ba50 	.word	0x0800ba50

0800ad98 <_close_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4d05      	ldr	r5, [pc, #20]	; (800adb4 <_close_r+0x1c>)
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	602b      	str	r3, [r5, #0]
 800ada4:	f7f6 f9e9 	bl	800117a <_close>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_close_r+0x1a>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_close_r+0x1a>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20000de8 	.word	0x20000de8

0800adb8 <__sflush_r>:
 800adb8:	898a      	ldrh	r2, [r1, #12]
 800adba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbc:	4605      	mov	r5, r0
 800adbe:	0710      	lsls	r0, r2, #28
 800adc0:	460c      	mov	r4, r1
 800adc2:	d457      	bmi.n	800ae74 <__sflush_r+0xbc>
 800adc4:	684b      	ldr	r3, [r1, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	dc04      	bgt.n	800add4 <__sflush_r+0x1c>
 800adca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dc01      	bgt.n	800add4 <__sflush_r+0x1c>
 800add0:	2000      	movs	r0, #0
 800add2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800add6:	2e00      	cmp	r6, #0
 800add8:	d0fa      	beq.n	800add0 <__sflush_r+0x18>
 800adda:	2300      	movs	r3, #0
 800addc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ade0:	682f      	ldr	r7, [r5, #0]
 800ade2:	602b      	str	r3, [r5, #0]
 800ade4:	d032      	beq.n	800ae4c <__sflush_r+0x94>
 800ade6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	075a      	lsls	r2, r3, #29
 800adec:	d505      	bpl.n	800adfa <__sflush_r+0x42>
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	1ac0      	subs	r0, r0, r3
 800adf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adf4:	b10b      	cbz	r3, 800adfa <__sflush_r+0x42>
 800adf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adf8:	1ac0      	subs	r0, r0, r3
 800adfa:	2300      	movs	r3, #0
 800adfc:	4602      	mov	r2, r0
 800adfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae00:	4628      	mov	r0, r5
 800ae02:	6a21      	ldr	r1, [r4, #32]
 800ae04:	47b0      	blx	r6
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	d106      	bne.n	800ae1a <__sflush_r+0x62>
 800ae0c:	6829      	ldr	r1, [r5, #0]
 800ae0e:	291d      	cmp	r1, #29
 800ae10:	d82c      	bhi.n	800ae6c <__sflush_r+0xb4>
 800ae12:	4a29      	ldr	r2, [pc, #164]	; (800aeb8 <__sflush_r+0x100>)
 800ae14:	40ca      	lsrs	r2, r1
 800ae16:	07d6      	lsls	r6, r2, #31
 800ae18:	d528      	bpl.n	800ae6c <__sflush_r+0xb4>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	6062      	str	r2, [r4, #4]
 800ae1e:	6922      	ldr	r2, [r4, #16]
 800ae20:	04d9      	lsls	r1, r3, #19
 800ae22:	6022      	str	r2, [r4, #0]
 800ae24:	d504      	bpl.n	800ae30 <__sflush_r+0x78>
 800ae26:	1c42      	adds	r2, r0, #1
 800ae28:	d101      	bne.n	800ae2e <__sflush_r+0x76>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	b903      	cbnz	r3, 800ae30 <__sflush_r+0x78>
 800ae2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ae30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae32:	602f      	str	r7, [r5, #0]
 800ae34:	2900      	cmp	r1, #0
 800ae36:	d0cb      	beq.n	800add0 <__sflush_r+0x18>
 800ae38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae3c:	4299      	cmp	r1, r3
 800ae3e:	d002      	beq.n	800ae46 <__sflush_r+0x8e>
 800ae40:	4628      	mov	r0, r5
 800ae42:	f7ff f821 	bl	8009e88 <_free_r>
 800ae46:	2000      	movs	r0, #0
 800ae48:	6360      	str	r0, [r4, #52]	; 0x34
 800ae4a:	e7c2      	b.n	800add2 <__sflush_r+0x1a>
 800ae4c:	6a21      	ldr	r1, [r4, #32]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b0      	blx	r6
 800ae54:	1c41      	adds	r1, r0, #1
 800ae56:	d1c7      	bne.n	800ade8 <__sflush_r+0x30>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0c4      	beq.n	800ade8 <__sflush_r+0x30>
 800ae5e:	2b1d      	cmp	r3, #29
 800ae60:	d001      	beq.n	800ae66 <__sflush_r+0xae>
 800ae62:	2b16      	cmp	r3, #22
 800ae64:	d101      	bne.n	800ae6a <__sflush_r+0xb2>
 800ae66:	602f      	str	r7, [r5, #0]
 800ae68:	e7b2      	b.n	800add0 <__sflush_r+0x18>
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae70:	81a3      	strh	r3, [r4, #12]
 800ae72:	e7ae      	b.n	800add2 <__sflush_r+0x1a>
 800ae74:	690f      	ldr	r7, [r1, #16]
 800ae76:	2f00      	cmp	r7, #0
 800ae78:	d0aa      	beq.n	800add0 <__sflush_r+0x18>
 800ae7a:	0793      	lsls	r3, r2, #30
 800ae7c:	bf18      	it	ne
 800ae7e:	2300      	movne	r3, #0
 800ae80:	680e      	ldr	r6, [r1, #0]
 800ae82:	bf08      	it	eq
 800ae84:	694b      	ldreq	r3, [r1, #20]
 800ae86:	1bf6      	subs	r6, r6, r7
 800ae88:	600f      	str	r7, [r1, #0]
 800ae8a:	608b      	str	r3, [r1, #8]
 800ae8c:	2e00      	cmp	r6, #0
 800ae8e:	dd9f      	ble.n	800add0 <__sflush_r+0x18>
 800ae90:	4633      	mov	r3, r6
 800ae92:	463a      	mov	r2, r7
 800ae94:	4628      	mov	r0, r5
 800ae96:	6a21      	ldr	r1, [r4, #32]
 800ae98:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae9c:	47e0      	blx	ip
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	dc06      	bgt.n	800aeb0 <__sflush_r+0xf8>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	e790      	b.n	800add2 <__sflush_r+0x1a>
 800aeb0:	4407      	add	r7, r0
 800aeb2:	1a36      	subs	r6, r6, r0
 800aeb4:	e7ea      	b.n	800ae8c <__sflush_r+0xd4>
 800aeb6:	bf00      	nop
 800aeb8:	20400001 	.word	0x20400001

0800aebc <_fflush_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	690b      	ldr	r3, [r1, #16]
 800aec0:	4605      	mov	r5, r0
 800aec2:	460c      	mov	r4, r1
 800aec4:	b913      	cbnz	r3, 800aecc <_fflush_r+0x10>
 800aec6:	2500      	movs	r5, #0
 800aec8:	4628      	mov	r0, r5
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	b118      	cbz	r0, 800aed6 <_fflush_r+0x1a>
 800aece:	6983      	ldr	r3, [r0, #24]
 800aed0:	b90b      	cbnz	r3, 800aed6 <_fflush_r+0x1a>
 800aed2:	f7ff f955 	bl	800a180 <__sinit>
 800aed6:	4b14      	ldr	r3, [pc, #80]	; (800af28 <_fflush_r+0x6c>)
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d11b      	bne.n	800af14 <_fflush_r+0x58>
 800aedc:	686c      	ldr	r4, [r5, #4]
 800aede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0ef      	beq.n	800aec6 <_fflush_r+0xa>
 800aee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aee8:	07d0      	lsls	r0, r2, #31
 800aeea:	d404      	bmi.n	800aef6 <_fflush_r+0x3a>
 800aeec:	0599      	lsls	r1, r3, #22
 800aeee:	d402      	bmi.n	800aef6 <_fflush_r+0x3a>
 800aef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aef2:	f7ff f9e3 	bl	800a2bc <__retarget_lock_acquire_recursive>
 800aef6:	4628      	mov	r0, r5
 800aef8:	4621      	mov	r1, r4
 800aefa:	f7ff ff5d 	bl	800adb8 <__sflush_r>
 800aefe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af00:	4605      	mov	r5, r0
 800af02:	07da      	lsls	r2, r3, #31
 800af04:	d4e0      	bmi.n	800aec8 <_fflush_r+0xc>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	059b      	lsls	r3, r3, #22
 800af0a:	d4dd      	bmi.n	800aec8 <_fflush_r+0xc>
 800af0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af0e:	f7ff f9d6 	bl	800a2be <__retarget_lock_release_recursive>
 800af12:	e7d9      	b.n	800aec8 <_fflush_r+0xc>
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <_fflush_r+0x70>)
 800af16:	429c      	cmp	r4, r3
 800af18:	d101      	bne.n	800af1e <_fflush_r+0x62>
 800af1a:	68ac      	ldr	r4, [r5, #8]
 800af1c:	e7df      	b.n	800aede <_fflush_r+0x22>
 800af1e:	4b04      	ldr	r3, [pc, #16]	; (800af30 <_fflush_r+0x74>)
 800af20:	429c      	cmp	r4, r3
 800af22:	bf08      	it	eq
 800af24:	68ec      	ldreq	r4, [r5, #12]
 800af26:	e7da      	b.n	800aede <_fflush_r+0x22>
 800af28:	0800ba70 	.word	0x0800ba70
 800af2c:	0800ba90 	.word	0x0800ba90
 800af30:	0800ba50 	.word	0x0800ba50

0800af34 <_lseek_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	4611      	mov	r1, r2
 800af3c:	2200      	movs	r2, #0
 800af3e:	4d05      	ldr	r5, [pc, #20]	; (800af54 <_lseek_r+0x20>)
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7f6 f93d 	bl	80011c2 <_lseek>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_lseek_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_lseek_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	20000de8 	.word	0x20000de8

0800af58 <__swhatbuf_r>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	460e      	mov	r6, r1
 800af5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af60:	4614      	mov	r4, r2
 800af62:	2900      	cmp	r1, #0
 800af64:	461d      	mov	r5, r3
 800af66:	b096      	sub	sp, #88	; 0x58
 800af68:	da08      	bge.n	800af7c <__swhatbuf_r+0x24>
 800af6a:	2200      	movs	r2, #0
 800af6c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	061a      	lsls	r2, r3, #24
 800af74:	d410      	bmi.n	800af98 <__swhatbuf_r+0x40>
 800af76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af7a:	e00e      	b.n	800af9a <__swhatbuf_r+0x42>
 800af7c:	466a      	mov	r2, sp
 800af7e:	f000 f8c9 	bl	800b114 <_fstat_r>
 800af82:	2800      	cmp	r0, #0
 800af84:	dbf1      	blt.n	800af6a <__swhatbuf_r+0x12>
 800af86:	9a01      	ldr	r2, [sp, #4]
 800af88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af90:	425a      	negs	r2, r3
 800af92:	415a      	adcs	r2, r3
 800af94:	602a      	str	r2, [r5, #0]
 800af96:	e7ee      	b.n	800af76 <__swhatbuf_r+0x1e>
 800af98:	2340      	movs	r3, #64	; 0x40
 800af9a:	2000      	movs	r0, #0
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	b016      	add	sp, #88	; 0x58
 800afa0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afa4 <__smakebuf_r>:
 800afa4:	898b      	ldrh	r3, [r1, #12]
 800afa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afa8:	079d      	lsls	r5, r3, #30
 800afaa:	4606      	mov	r6, r0
 800afac:	460c      	mov	r4, r1
 800afae:	d507      	bpl.n	800afc0 <__smakebuf_r+0x1c>
 800afb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	2301      	movs	r3, #1
 800afba:	6163      	str	r3, [r4, #20]
 800afbc:	b002      	add	sp, #8
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	466a      	mov	r2, sp
 800afc2:	ab01      	add	r3, sp, #4
 800afc4:	f7ff ffc8 	bl	800af58 <__swhatbuf_r>
 800afc8:	9900      	ldr	r1, [sp, #0]
 800afca:	4605      	mov	r5, r0
 800afcc:	4630      	mov	r0, r6
 800afce:	f7fe ffc3 	bl	8009f58 <_malloc_r>
 800afd2:	b948      	cbnz	r0, 800afe8 <__smakebuf_r+0x44>
 800afd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd8:	059a      	lsls	r2, r3, #22
 800afda:	d4ef      	bmi.n	800afbc <__smakebuf_r+0x18>
 800afdc:	f023 0303 	bic.w	r3, r3, #3
 800afe0:	f043 0302 	orr.w	r3, r3, #2
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	e7e3      	b.n	800afb0 <__smakebuf_r+0xc>
 800afe8:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <__smakebuf_r+0x7c>)
 800afea:	62b3      	str	r3, [r6, #40]	; 0x28
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	6020      	str	r0, [r4, #0]
 800aff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff4:	81a3      	strh	r3, [r4, #12]
 800aff6:	9b00      	ldr	r3, [sp, #0]
 800aff8:	6120      	str	r0, [r4, #16]
 800affa:	6163      	str	r3, [r4, #20]
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	b15b      	cbz	r3, 800b018 <__smakebuf_r+0x74>
 800b000:	4630      	mov	r0, r6
 800b002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b006:	f000 f897 	bl	800b138 <_isatty_r>
 800b00a:	b128      	cbz	r0, 800b018 <__smakebuf_r+0x74>
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	f023 0303 	bic.w	r3, r3, #3
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	81a3      	strh	r3, [r4, #12]
 800b018:	89a0      	ldrh	r0, [r4, #12]
 800b01a:	4305      	orrs	r5, r0
 800b01c:	81a5      	strh	r5, [r4, #12]
 800b01e:	e7cd      	b.n	800afbc <__smakebuf_r+0x18>
 800b020:	0800a119 	.word	0x0800a119

0800b024 <memchr>:
 800b024:	4603      	mov	r3, r0
 800b026:	b510      	push	{r4, lr}
 800b028:	b2c9      	uxtb	r1, r1
 800b02a:	4402      	add	r2, r0
 800b02c:	4293      	cmp	r3, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	d101      	bne.n	800b036 <memchr+0x12>
 800b032:	2000      	movs	r0, #0
 800b034:	e003      	b.n	800b03e <memchr+0x1a>
 800b036:	7804      	ldrb	r4, [r0, #0]
 800b038:	3301      	adds	r3, #1
 800b03a:	428c      	cmp	r4, r1
 800b03c:	d1f6      	bne.n	800b02c <memchr+0x8>
 800b03e:	bd10      	pop	{r4, pc}

0800b040 <memcpy>:
 800b040:	440a      	add	r2, r1
 800b042:	4291      	cmp	r1, r2
 800b044:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b048:	d100      	bne.n	800b04c <memcpy+0xc>
 800b04a:	4770      	bx	lr
 800b04c:	b510      	push	{r4, lr}
 800b04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b052:	4291      	cmp	r1, r2
 800b054:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b058:	d1f9      	bne.n	800b04e <memcpy+0xe>
 800b05a:	bd10      	pop	{r4, pc}

0800b05c <memmove>:
 800b05c:	4288      	cmp	r0, r1
 800b05e:	b510      	push	{r4, lr}
 800b060:	eb01 0402 	add.w	r4, r1, r2
 800b064:	d902      	bls.n	800b06c <memmove+0x10>
 800b066:	4284      	cmp	r4, r0
 800b068:	4623      	mov	r3, r4
 800b06a:	d807      	bhi.n	800b07c <memmove+0x20>
 800b06c:	1e43      	subs	r3, r0, #1
 800b06e:	42a1      	cmp	r1, r4
 800b070:	d008      	beq.n	800b084 <memmove+0x28>
 800b072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07a:	e7f8      	b.n	800b06e <memmove+0x12>
 800b07c:	4601      	mov	r1, r0
 800b07e:	4402      	add	r2, r0
 800b080:	428a      	cmp	r2, r1
 800b082:	d100      	bne.n	800b086 <memmove+0x2a>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b08e:	e7f7      	b.n	800b080 <memmove+0x24>

0800b090 <_realloc_r>:
 800b090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b094:	4680      	mov	r8, r0
 800b096:	4614      	mov	r4, r2
 800b098:	460e      	mov	r6, r1
 800b09a:	b921      	cbnz	r1, 800b0a6 <_realloc_r+0x16>
 800b09c:	4611      	mov	r1, r2
 800b09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a2:	f7fe bf59 	b.w	8009f58 <_malloc_r>
 800b0a6:	b92a      	cbnz	r2, 800b0b4 <_realloc_r+0x24>
 800b0a8:	f7fe feee 	bl	8009e88 <_free_r>
 800b0ac:	4625      	mov	r5, r4
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	f000 f850 	bl	800b158 <_malloc_usable_size_r>
 800b0b8:	4284      	cmp	r4, r0
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	d802      	bhi.n	800b0c4 <_realloc_r+0x34>
 800b0be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0c2:	d812      	bhi.n	800b0ea <_realloc_r+0x5a>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	f7fe ff46 	bl	8009f58 <_malloc_r>
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d0ed      	beq.n	800b0ae <_realloc_r+0x1e>
 800b0d2:	42bc      	cmp	r4, r7
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	bf28      	it	cs
 800b0da:	463a      	movcs	r2, r7
 800b0dc:	f7ff ffb0 	bl	800b040 <memcpy>
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f7fe fed0 	bl	8009e88 <_free_r>
 800b0e8:	e7e1      	b.n	800b0ae <_realloc_r+0x1e>
 800b0ea:	4635      	mov	r5, r6
 800b0ec:	e7df      	b.n	800b0ae <_realloc_r+0x1e>
	...

0800b0f0 <_read_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4d05      	ldr	r5, [pc, #20]	; (800b110 <_read_r+0x20>)
 800b0fc:	602a      	str	r2, [r5, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f7f6 f802 	bl	8001108 <_read>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <_read_r+0x1e>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	b103      	cbz	r3, 800b10e <_read_r+0x1e>
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	20000de8 	.word	0x20000de8

0800b114 <_fstat_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	2300      	movs	r3, #0
 800b118:	4d06      	ldr	r5, [pc, #24]	; (800b134 <_fstat_r+0x20>)
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	4611      	mov	r1, r2
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	f7f6 f835 	bl	8001190 <_fstat>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d102      	bne.n	800b130 <_fstat_r+0x1c>
 800b12a:	682b      	ldr	r3, [r5, #0]
 800b12c:	b103      	cbz	r3, 800b130 <_fstat_r+0x1c>
 800b12e:	6023      	str	r3, [r4, #0]
 800b130:	bd38      	pop	{r3, r4, r5, pc}
 800b132:	bf00      	nop
 800b134:	20000de8 	.word	0x20000de8

0800b138 <_isatty_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	2300      	movs	r3, #0
 800b13c:	4d05      	ldr	r5, [pc, #20]	; (800b154 <_isatty_r+0x1c>)
 800b13e:	4604      	mov	r4, r0
 800b140:	4608      	mov	r0, r1
 800b142:	602b      	str	r3, [r5, #0]
 800b144:	f7f6 f833 	bl	80011ae <_isatty>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d102      	bne.n	800b152 <_isatty_r+0x1a>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	b103      	cbz	r3, 800b152 <_isatty_r+0x1a>
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	20000de8 	.word	0x20000de8

0800b158 <_malloc_usable_size_r>:
 800b158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b15c:	1f18      	subs	r0, r3, #4
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfbc      	itt	lt
 800b162:	580b      	ldrlt	r3, [r1, r0]
 800b164:	18c0      	addlt	r0, r0, r3
 800b166:	4770      	bx	lr

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
